<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Microbot Team</title>
  
  <subtitle>MT-ryansuen</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ryansuen.github.io/"/>
  <updated>2019-03-17T15:31:04.000Z</updated>
  <id>https://ryansuen.github.io/</id>
  
  <author>
    <name>Ryan Suen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里云lNMN环境搭建</title>
    <link href="https://ryansuen.github.io/2019/02/21/%E9%98%BF%E9%87%8C%E4%BA%91lNMN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://ryansuen.github.io/2019/02/21/阿里云lNMN环境搭建/</id>
    <published>2019-02-21T13:46:19.000Z</published>
    <updated>2019-03-17T15:31:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里云lNMN-linux-nginx-mysql-node-js-环境搭建"><a href="#阿里云lNMN-linux-nginx-mysql-node-js-环境搭建" class="headerlink" title="阿里云lNMN(linux + nginx + mysql + node.js)环境搭建"></a>阿里云lNMN(linux + nginx + mysql + node.js)环境搭建</h1><h3 id="购买服务器登录服务器"><a href="#购买服务器登录服务器" class="headerlink" title="购买服务器登录服务器"></a>购买服务器登录服务器</h3><blockquote><p>略</p></blockquote><h3 id="登录服务器后安装开发包和库文件"><a href="#登录服务器后安装开发包和库文件" class="headerlink" title="登录服务器后安装开发包和库文件"></a>登录服务器后安装开发包和库文件</h3><ol><li><p>输入命令<code>cat /etc/redhat-release</code>,可查看Linux系统版本</p></li><li><p>执行命令：<code>chkconfig iptables off</code>，关掉防火墙，避免实验中出现服务器无法访问的情况。在真实的生产环境中，请根据实际需求，配置相应的防火墙规则。</p></li><li><p>执行如下命令，安装LNMN环境所需的开发包和库文件，例如：openssl等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ntp make openssl openssl-devel pcre pcre-devel libpng libpng-devel libjpeg-6b libjpeg-devel-6b freetype freetype-devel gd gd-devel zlib zlib-devel gcc gcc-c++ libXpm libXpm-devel ncurses ncurses-devel libmcrypt libmcrypt-devel libxml2 libxml2-devel imake autoconf automake screen sysstat compat-libstdc++-33 curl curl-devel</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>安装过程需要等待1分钟左右。安装完成后，页面显示“Complete!”。</p></blockquote><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><ol><li>输入命令<code>yum -y install nginx</code>，通过yum的方式安装nginx。</li><li>看到Complete！字样表示安装完成。</li><li>使用命令 <code>vi /etc/nginx/conf.d/default.conf</code>，进入nginx配置文件“default.conf”的编辑页面。<ul><li>在Nginx配置文件的编辑页面中，默认监听使用ipv4和ipv6。</li><li>使用键盘方向键将光标移动到“listen [::]:80 default_server;”位置，并输入dd命令，删除此行，也就是删除其中监听为ipv6的配置<code>listen [::]80 default_server</code>。因为，目前阿里云使用的是ipv4，若使用ipv6，运行时会报错。完成后，输入“:wq”，保存退出编辑页面。</li></ul></li><li>输入<code>nginx -t</code>命令检查配置是否正确，出现<code>OK</code>字样配置正确，输入命令<code>service nginx start</code>，启动nginx服务器。若页面显示“Starting nignx  [OK]”，证明Nginx服务器已启动。若报错，请检查如上Nginx配置是否正确。</li><li>打开浏览器，并在地址栏中，输入云中沙箱提供的ECS实例“公网地址”。若页面显示“Welcome to Nginx on EPEL!”，则证明Nginx服务器已部署且启动成功。</li><li>执行命令chkconfig –levels 235 nginx on，设置2、3、5级别开机启动nginx。通过设置如上开机启动级别，在下次启动或者运行ECS服务器的时候，就可以自动运行Nignx服务器。</li></ol><h3 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h3><ol><li>首先，在安装MySQL之前，执行命令<code>yum -y install mysql mysql-server mysql-devel</code> ，安装mysql及其组件mysql-server，mysql-devel。 等待几秒钟，页面显示“Complete!”，证明已完成MySQL的安装。</li><li>输入命令<code>service mysqld start</code>，启动mysql数据库。等待几秒钟，页面显示“Starting mysqld  ［ok］”。证明mysql启动成功。</li><li>输入命令<code>mysql</code>，进入MySQL数据库的命令页面，证明已经成功安装并运行MySQL数据库。<blockquote><p>ps: 此时mysql是无密码状态，注意设置密码。</p></blockquote></li><li>在mysql的命令行中，输入exit，页面提示“bye”，退出mysql的命令页面。</li><li>最后，执行命令<code>chkconfig --levels 235 mysqld on</code>，设置2、3、5级别开机启动mysql。这样，用户在下次启动ECS服务器时，ECS实例会自动运行mysql数据库，无需用户手动启动。</li></ol><h3 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h3><h4 id="linux下nvm安装"><a href="#linux下nvm安装" class="headerlink" title="linux下nvm安装"></a>linux下nvm安装</h4><ol><li><p>执行如下命令安装：<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</code></p><blockquote><p>更多详情参考<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">链接</a></p></blockquote></li><li><p>通过nvm指令查看远端node.js版本（当然也可以官网查看），我们可以选近几个稳定的版本安装。<code>nvm ls-remote</code>。 如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">v8.9.0   (LTS: Carbon)</span><br><span class="line">v8.15.1   (Latest LTS: Carbon)</span><br><span class="line">v10.15.3   (Latest LTS: Dubnium)</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><p>其它nvm常用指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm ls  //查看有那些node.js版本</span><br><span class="line">nvm use [node版本]    //选择当前命令行使用的node.js版本</span><br><span class="line">nvm alias default [node版本] //设置命令行默认的node.js版本</span><br></pre></td></tr></table></figure></li><li><p>可能会出现nvm not command， 解决方案详见<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">链接</a></p></li><li><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3></li><li><p>通过nvm安装，如执行指令： <code>nvm install v10.15.3</code>, <code>nvm install v8.15.1</code>, <code>nvm install v8.9.0</code>;</p></li><li><p>执行<code>nvm ls</code>查看所有的node.js版本及默认的node.js版本。</p></li><li><p>执行命令<code>node -v</code> 查看node.js是否安装成功。如显示正常的版本这表示node.js安装成功。</p></li></ol><h3 id="验证环境"><a href="#验证环境" class="headerlink" title="验证环境"></a>验证环境</h3><blockquote><p>到此整个LNMN环境完全安装好了。</p></blockquote><ol><li><p>写如下一段服务代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// server.js</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">http.createServer(function(req, res) &#123;</span><br><span class="line">  console.log(&apos;server starts...&apos;); // 加入此行</span><br><span class="line">  res.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/plain&apos;&#125;);</span><br><span class="line">  res.end(&apos;Hello lnmn&apos;);</span><br><span class="line">&#125;).listen(5000);</span><br></pre></td></tr></table></figure></li><li><p>启动服务<code>node server.js</code>,打开浏览器输入<code>http://[公网ip]:5000</code>验证如看到返回“hello lnmn字样”，整个lnmn环境搭建成功。</p></li><li><p>此时可能还是不能访问，原因，我们需要去阿里云服务器管理后台去配置安全组规则，允许通过5000端口访问。 因为我们用的是5000端口，同理需要远程连接服务器数据库也需要允许访问如3306端口。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;阿里云lNMN-linux-nginx-mysql-node-js-环境搭建&quot;&gt;&lt;a href=&quot;#阿里云lNMN-linux-nginx-mysql-node-js-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;阿里云lNMN(linux + 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据校验与加解密</title>
    <link href="https://ryansuen.github.io/2019/01/19/%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C%E4%B8%8E%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <id>https://ryansuen.github.io/2019/01/19/数据校验与加解密/</id>
    <published>2019-01-19T08:54:58.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先看看小程序的开放数据校验与解密"><a href="#先看看小程序的开放数据校验与解密" class="headerlink" title="先看看小程序的开放数据校验与解密"></a>先看看小程序的开放数据校验与解密</h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/signature.html" target="_blank" rel="noopener">开放数据校验与解密</a></p><hr><h3 id="公钥，私钥，对称非对称，DES加密算法，AES加密算法，RSA加密算法，Base64加密算法，MD5加密算法等的定义"><a href="#公钥，私钥，对称非对称，DES加密算法，AES加密算法，RSA加密算法，Base64加密算法，MD5加密算法等的定义" class="headerlink" title="公钥，私钥，对称非对称，DES加密算法，AES加密算法，RSA加密算法，Base64加密算法，MD5加密算法等的定义"></a>公钥，私钥，对称非对称，DES加密算法，AES加密算法，RSA加密算法，Base64加密算法，MD5加密算法等的定义</h3><blockquote><p>略</p></blockquote><h2 id="openssl的使用"><a href="#openssl的使用" class="headerlink" title="openssl的使用"></a>openssl的使用</h2><h3 id="mac-本省自带openssl可通过如下命令查看"><a href="#mac-本省自带openssl可通过如下命令查看" class="headerlink" title="mac 本省自带openssl可通过如下命令查看"></a>mac 本省自带openssl可通过如下命令查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  .ssh openssl version</span><br><span class="line">LibreSSL 2.2.7</span><br></pre></td></tr></table></figure><ol><li>命令行cd到公私密钥需要生成的目录</li><li>生成公钥： <code>openssl genrsa -out rsa_private_key.pem 1024</code> </li><li>生成私钥: <code>openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</code></li></ol><hr><h3 id="拓展指令"><a href="#拓展指令" class="headerlink" title="拓展指令"></a>拓展指令</h3><ol><li><p>使用终端进入到制定目录下</p></li><li><p>运行命令：<code>openssl</code></p></li><li><p>生成一个1024位的私钥：<code>genrsa -out rsa_private_key.pem 1024</code></p></li><li><p>利用私钥生成JAVA支持的PKCS8类型的私钥：<code>pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt -out pkcs8_private_key.pem</code></p></li><li><p>生成JAVA支持的PKCS8二进制类型的私钥：<code>pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform DER -nocrypt -out pkcs8_private_key.der</code>（java端使用的私钥就是这个：pkcs8_private_key.der）</p></li><li><p>生成公钥：<code>rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</code></p></li><li><p>创建证书请求：<code>req -new -out cert.csr -key rsa_private_key.pem</code>（其间会要求填写国家地区公司信息等，随便填写OR认真填写都不影响证书使用）</p></li><li><p>创建X509的自签署跟证书（iOS支持X509，有效期3650天）：<code>x509 -req -in cert.csr -out rsa_public_key.der -outform der -signkey rsa_private_key.pem -days 3650</code>（iOS端使用的私钥就是这个：rsa_public_key.der）</p></li></ol><p>下面创建iOS端的密钥（p12）</p><ol start="9"><li><p><code>x509 -req -days 3650 -in cert.csr -signkey rsa_private_key.pem -out rsacert.crt</code></p></li><li><p><code>pkcs12 -export -out p.p12 -inkey rsa_private_key.pem -in rsacert.crt</code></p></li></ol><hr><h2 id="node-js公钥，私钥加解密一例"><a href="#node-js公钥，私钥加解密一例" class="headerlink" title="node.js公钥，私钥加解密一例"></a>node.js公钥，私钥加解密一例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publicKey = fs.readFileSync(<span class="string">'./pem/rsa_public_key.pem'</span>).toString(<span class="string">'ascii'</span>);</span><br><span class="line"><span class="keyword">const</span> privateKey = fs.readFileSync(<span class="string">'./pem/rsa_private_key.pem'</span>).toString(<span class="string">'ascii'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(publicKey, privateKey);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="string">'hi ryan suen'</span>;</span><br><span class="line"><span class="comment">//const enData = crypto.publicEncrypt(publicKey, new Buffer(data)).toString('base64');</span></span><br><span class="line"><span class="keyword">const</span> enData = crypto.publicEncrypt(publicKey, <span class="keyword">new</span> Buffer(data));</span><br><span class="line"><span class="built_in">console</span>.log( enData );</span><br><span class="line"></span><br><span class="line"><span class="comment">//const deData = crypto.privateDecrypt( privateKey, new Buffer(enData, 'base64') );</span></span><br><span class="line"><span class="keyword">const</span> deData = crypto.privateDecrypt( privateKey, enData );</span><br><span class="line"><span class="built_in">console</span>.log(deData.toString());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;先看看小程序的开放数据校验与解密&quot;&gt;&lt;a href=&quot;#先看看小程序的开放数据校验与解密&quot; class=&quot;headerlink&quot; title=&quot;先看看小程序的开放数据校验与解密&quot;&gt;&lt;/a&gt;先看看小程序的开放数据校验与解密&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node.js 发现和解决问题</title>
    <link href="https://ryansuen.github.io/2018/12/22/node-js-%E5%8F%91%E7%8E%B0%E5%92%8C%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
    <id>https://ryansuen.github.io/2018/12/22/node-js-发现和解决问题/</id>
    <published>2018-12-22T13:53:25.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="显示异常处理"><a href="#显示异常处理" class="headerlink" title="显示异常处理"></a>显示异常处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"> name </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( !name ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"name is required!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示异常用try/catch处理</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fn();</span><br><span class="line">&#125; <span class="keyword">catch</span>( err ) &#123;</span><br><span class="line">    <span class="built_in">console</span> &amp;&amp; <span class="built_in">console</span>.error( err.message, err.stack );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps:</p><ol><li>throw只能用于同步方法中。或者当异步方法中异步执行触发前 throw会生效。</li><li>通常抛出的异常都需要继承于Error。使用简单的字符串（new “ error”）无法获取对应的调用栈，无法获取那里发生错误的相关信息。</li><li>不要在内置的node.js方法中的回调函数中抛出异常；这样捕获到的堆栈没什么有用的信息。我们可以直接处理异常，或把异常交给合适的错误处理函数。</li></ol><h4 id="隐藏是异常"><a href="#隐藏是异常" class="headerlink" title="隐藏是异常"></a>隐藏是异常</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(date);    <span class="comment">//ReferenceError： date is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try/catch 包住是很有必要的。 例如用try/catch包住JSON.parse也很有必要。</p><h4 id="错误事件处理"><a href="#错误事件处理" class="headerlink" title="错误事件处理"></a>错误事件处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">"events"</span>).EventEmitter;</span><br><span class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">e.emit(<span class="string">"error"</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"no handle to catch me"</span>));</span><br></pre></td></tr></table></figure><p>处理方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span> &amp;&amp; <span class="built_in">console</span>.error(err.message, err.stack);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="参数错误处理"><a href="#参数错误处理" class="headerlink" title="参数错误处理"></a>参数错误处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(<span class="string">"./file.txt"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, buf</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> handleError(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="处理未捕获的异常"><a href="#处理未捕获的异常" class="headerlink" title="处理未捕获的异常"></a>处理未捕获的异常</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line">var server = http.createServer(req, res) &#123;</span><br><span class="line">    response.end(&quot;hello world&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">server.listen(3000);</span><br><span class="line">process.on(&quot;uncaughtException&quot;, function(err)&#123;</span><br><span class="line">    console &amp;&amp; console.error(err);</span><br><span class="line">    server.close();</span><br><span class="line">    setTimeout(process.exit, 500, 1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="使用域来处理未捕获的异常"><a href="#使用域来处理未捕获的异常" class="headerlink" title="使用域来处理未捕获的异常"></a>使用域来处理未捕获的异常</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var domain = require(&quot;domain&quot;);</span><br><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">var d = domain.create();</span><br><span class="line">d.run(function() &#123;</span><br><span class="line">    var server = http.createServer(req, res) &#123;</span><br><span class="line">        d.on(&quot;error&quot;, function(err) &#123;</span><br><span class="line">            res.statusCode = 500;</span><br><span class="line">            res.end(&quot;internal server error&quot;);</span><br><span class="line">            setTimeout(process.exit, 5000, 1);</span><br><span class="line">        &#125;);</span><br><span class="line">        response.end(&quot;hello world&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    server.listen(3000);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="node-js-的问题调试"><a href="#node-js-的问题调试" class="headerlink" title="node.js 的问题调试"></a>node.js 的问题调试</h3><h4 id="node-debug"><a href="#node-debug" class="headerlink" title="node debug"></a>node debug</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// test.js</span><br><span class="line">var a = 123;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><p><code>node debug test.js</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop node debug test.js  </span><br><span class="line">(node:78403) [DEP0068] DeprecationWarning: `node debug` is deprecated. Please use `node inspect` instead.</span><br><span class="line">&lt; Debugger listening on ws://127.0.0.1:9229/eaab7bad-ccd1-46d8-9e82-d5845e864dd7</span><br><span class="line">&lt; For <span class="built_in">help</span> see https://nodejs.org/en/docs/inspector</span><br><span class="line">&lt; Debugger attached.</span><br><span class="line">Break on start <span class="keyword">in</span> test.js:1</span><br><span class="line">&gt; 1 (<span class="keyword">function</span> (exports, require, module, __filename, __dirname) &#123; var a = 123;</span><br><span class="line">  2 console.log(a);</span><br><span class="line">  3 </span><br><span class="line">debug&gt; <span class="built_in">help</span></span><br><span class="line">run, restart, r       Run the application or reconnect</span><br><span class="line"><span class="built_in">kill</span>                  Kill a running application or disconnect</span><br><span class="line"></span><br><span class="line">cont, c               Resume execution</span><br><span class="line">next, n               Continue to next line <span class="keyword">in</span> current file</span><br><span class="line">step, s               Step into, potentially entering a <span class="keyword">function</span></span><br><span class="line">out, o                Step out, leaving the current <span class="keyword">function</span></span><br><span class="line">backtrace, bt         Print the current backtrace</span><br><span class="line">list                  Print the <span class="built_in">source</span> around the current line <span class="built_in">where</span> execution</span><br><span class="line">                      is currently paused</span><br><span class="line"></span><br><span class="line">setBreakpoint, sb     Set a breakpoint</span><br><span class="line">clearBreakpoint, cb   Clear a breakpoint</span><br><span class="line">breakpoints           List all known breakpoints</span><br><span class="line">breakOnException      Pause execution whenever an exception is thrown</span><br><span class="line">breakOnUncaught       Pause execution whenever an exception isn<span class="string">'t caught</span></span><br><span class="line"><span class="string">breakOnNone           Don'</span>t pause on exceptions (this is the default)</span><br><span class="line"></span><br><span class="line">watch(expr)           Start watching the given expression</span><br><span class="line">unwatch(expr)         Stop watching an expression</span><br><span class="line">watchers              Print all watched expressions and their current values</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span>(expr)            Evaluate the expression and <span class="built_in">print</span> the value</span><br><span class="line">repl                  Enter a debug repl that works like <span class="built_in">exec</span></span><br><span class="line"></span><br><span class="line">scripts               List application scripts that are currently loaded</span><br><span class="line">scripts(<span class="literal">true</span>)         List all scripts (including node-internals)</span><br><span class="line"></span><br><span class="line">profile               Start CPU profiling session.</span><br><span class="line">profileEnd            Stop current CPU profiling session.</span><br><span class="line">profiles              Array of completed CPU profiling sessions.</span><br><span class="line">profiles[n].save(filepath = <span class="string">'node.cpuprofile'</span>)</span><br><span class="line">                      Save CPU profiling session to disk as JSON.</span><br><span class="line"></span><br><span class="line">takeHeapSnapshot(filepath = <span class="string">'node.heapsnapshot'</span>)</span><br><span class="line">                      Take a heap snapshot and save to disk as JSON.</span><br><span class="line">debug&gt;</span><br></pre></td></tr></table></figure><p>ps: 如上方法已不推荐使用。</p><p><code>node inspect test.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop node inspect test.js</span><br><span class="line">&lt; Debugger listening on ws://127.0.0.1:9229/e0ac6cc0-d7db-40ec-bd58-4d9a98f2a18f</span><br><span class="line">&lt; For help see https://nodejs.org/en/docs/inspector</span><br><span class="line">&lt; Debugger attached.</span><br><span class="line">Break on start in test.js:1</span><br><span class="line">&gt; 1 (function (exports, require, module, __filename, __dirname) &#123; var a = 123;</span><br><span class="line">  2 console.log(a);</span><br><span class="line">  3 </span><br><span class="line">debug&gt; help</span><br><span class="line">run, restart, r       Run the application or reconnect</span><br><span class="line">kill                  Kill a running application or disconnect</span><br><span class="line"></span><br><span class="line">cont, c               Resume execution</span><br><span class="line">next, n               Continue to next line in current file</span><br><span class="line">step, s               Step into, potentially entering a function</span><br><span class="line">out, o                Step out, leaving the current function</span><br><span class="line">backtrace, bt         Print the current backtrace</span><br><span class="line">list                  Print the source around the current line where execution</span><br><span class="line">                      is currently paused</span><br><span class="line"></span><br><span class="line">setBreakpoint, sb     Set a breakpoint</span><br><span class="line">clearBreakpoint, cb   Clear a breakpoint</span><br><span class="line">breakpoints           List all known breakpoints</span><br><span class="line">breakOnException      Pause execution whenever an exception is thrown</span><br><span class="line">breakOnUncaught       Pause execution whenever an exception isn&apos;t caught</span><br><span class="line">breakOnNone           Don&apos;t pause on exceptions (this is the default)</span><br><span class="line"></span><br><span class="line">watch(expr)           Start watching the given expression</span><br><span class="line">unwatch(expr)         Stop watching an expression</span><br><span class="line">watchers              Print all watched expressions and their current values</span><br><span class="line"></span><br><span class="line">exec(expr)            Evaluate the expression and print the value</span><br><span class="line">repl                  Enter a debug repl that works like exec</span><br><span class="line"></span><br><span class="line">scripts               List application scripts that are currently loaded</span><br><span class="line">scripts(true)         List all scripts (including node-internals)</span><br><span class="line"></span><br><span class="line">profile               Start CPU profiling session.</span><br><span class="line">profileEnd            Stop current CPU profiling session.</span><br><span class="line">profiles              Array of completed CPU profiling sessions.</span><br><span class="line">profiles[n].save(filepath = &apos;node.cpuprofile&apos;)</span><br><span class="line">                      Save CPU profiling session to disk as JSON.</span><br><span class="line"></span><br><span class="line">takeHeapSnapshot(filepath = &apos;node.heapsnapshot&apos;)</span><br><span class="line">                      Take a heap snapshot and save to disk as JSON.</span><br><span class="line">debug&gt;</span><br></pre></td></tr></table></figure><p>感兴趣，自己尝试了。官方的推荐，但不够可视化。</p><h4 id="使用Node-inspector"><a href="#使用Node-inspector" class="headerlink" title="使用Node inspector"></a>使用Node inspector</h4><p>使用<code>node-inspector</code></p><p><code>$ npm install node-inspector -g</code></p><p>然后需要通过浏览器连接到node-inspector，需要启动inspector服务：</p><p><code>$ node-inspector</code><br>最后以debug模式运行node.js应用：</p><p>官文使用方法： 实际已不推荐。<br><code>$ node --debug app.js</code></p><p>ps: The node-debug command will load Node Inspector in your default browser.</p><blockquote><p>NOTE: Node Inspector works in Chrome and Opera only. You have to re-open the inspector page in one of those browsers if another browser is your default web browser (e.g. Safari or Internet Explorer). </p></blockquote><p>建议使用Chrome为浏览器</p><p>实际使用：<br><code>$ node --inspect app.js</code><br>通过URL <a href="http://127.0.0.1:8080/debug?port=5858" target="_blank" rel="noopener">http://127.0.0.1:8080/debug?port=5858</a> 就可以进行调试了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 两个 node.js 服务自动重启工具推荐</span><br><span class="line"></span><br><span class="line">[supervisor](https://www.npmjs.com/package/supervisor)</span><br></pre></td></tr></table></figure><p>npm install -g supervisor</p><p>//使用<br>supervisor ./app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[nodemon](https://www.npmjs.com/package/nodemon)</span><br></pre></td></tr></table></figure></p><p>npm install -g nodemon</p><p>//使用<br>nodemon ./app.js<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;异常处理&quot;&gt;&lt;a href=&quot;#异常处理&quot; class=&quot;headerlink&quot; title=&quot;异常处理&quot;&gt;&lt;/a&gt;异常处理&lt;/h3&gt;&lt;h4 id=&quot;显示异常处理&quot;&gt;&lt;a href=&quot;#显示异常处理&quot; class=&quot;headerlink&quot; title=&quot;显示异常处
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>简单的apm性能收集方案</title>
    <link href="https://ryansuen.github.io/2018/12/04/%E7%AE%80%E5%8D%95%E7%9A%84apm%E6%80%A7%E8%83%BD%E6%94%B6%E9%9B%86%E6%96%B9%E6%A1%88/"/>
    <id>https://ryansuen.github.io/2018/12/04/简单的apm性能收集方案/</id>
    <published>2018-12-04T02:21:42.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>本文通过浏览器提供的performance接口获取页面性能数据。performace相关的了解请查看<a href="https://ryansuen.top/2018/01/21/performance/" target="_blank" rel="noopener">performance</a>。</p><h4 id="整体技术方案"><a href="#整体技术方案" class="headerlink" title="整体技术方案"></a>整体技术方案</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-fe.ggwan.com/images/6c39c015da7fa0-1478x1082.png" alt="apm" title>                </div>                <div class="image-caption">apm</div>            </figure><h3 id="浏览器上报sdk添加性能收集部分。"><a href="#浏览器上报sdk添加性能收集部分。" class="headerlink" title="浏览器上报sdk添加性能收集部分。"></a>浏览器上报sdk添加性能收集部分。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">_performance: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> performance = <span class="built_in">window</span>.performance;</span><br><span class="line">            <span class="keyword">if</span> (!!performance) &#123;</span><br><span class="line">                <span class="keyword">var</span> data = &#123;&#125;;</span><br><span class="line">                data.origin_pathname = location.origin + location.pathname;</span><br><span class="line">                <span class="keyword">if</span> (performance.memory) &#123;</span><br><span class="line">                    data.jsHeapSizeLimit = performance.memory.jsHeapSizeLimit;</span><br><span class="line">                    data.totalJSHeapSize = performance.memory.totalJSHeapSize;</span><br><span class="line">                    data.usedJSHeapSize = performance.memory.usedJSHeapSize;</span><br><span class="line">                    <span class="keyword">if</span> (</span><br><span class="line">                        data.jsHeapSizeLimit === <span class="number">0</span> ||</span><br><span class="line">                        data.totalJSHeapSize === <span class="number">0</span> ||</span><br><span class="line">                        data.usedJSHeapSize === <span class="number">0</span></span><br><span class="line">                    ) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (performance.navigation) &#123;</span><br><span class="line">                    data.redirectCount = performance.navigation.redirectCount;</span><br><span class="line">                    data.type = performance.navigation.type;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// if(performance.timeOrigin) &#123;</span></span><br><span class="line">                <span class="comment">//     data.timeOrigin = performance.timeOrigin;</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">                <span class="keyword">if</span> (!!performance.timing) &#123;</span><br><span class="line">                    <span class="keyword">var</span> navigationStart = performance.timing.navigationStart;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> redirectStart = performance.timing.redirectStart; </span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> redirectEnd = performance.timing.redirectEnd;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> fetchStart = performance.timing.fetchStart;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> domainLookupStart = performance.timing.domainLookupStart;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> domainLookupEnd = performance.timing.domainLookupEnd;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> connectStart = performance.timing.connectStart;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> secureConnectionStart = performance.timing.secureConnectionStart;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> connectEnd = performance.timing.connectEnd;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> requestStart = performance.timing.requestStart;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> responseStart = performance.timing.responseStart;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> responseEnd = performance.timing.responseEnd;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> domLoading = performance.timing.domLoading;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> domInteractive = performance.timing.domInteractive;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> domContentLoadedEventStart = performance.timing.domContentLoadedEventStart;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> domContentLoadedEventEnd = performance.timing.domContentLoadedEventEnd;  </span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> domComplete = performance.timing.domComplete;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> loadEventStart = performance.timing.loadEventStart;  </span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> loadEventEnd = performance.timing.loadEventEnd;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> unloadEventStart = performance.timing.unloadEventStart; </span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> unloadEventEnd = performance.timing.unloadEventEnd; </span><br><span class="line">                    </span><br><span class="line">                    data.appCache = <span class="built_in">Math</span>.max(domainLookupStart - fetchStart, <span class="number">0</span>);</span><br><span class="line">                    data.dns = domainLookupEnd - domainLookupStart;</span><br><span class="line">                    data.connection = connectEnd - connectStart;</span><br><span class="line">                    data.request = responseStart - requestStart;</span><br><span class="line">                    data.response = responseEnd - responseStart;</span><br><span class="line">                    data.loading = responseEnd - requestStart;</span><br><span class="line">                    data.rendering = domComplete - domLoading;</span><br><span class="line">                    data.blankScreen = domContentLoadedEventEnd - navigationStart;</span><br><span class="line">                    data.domComplete = domComplete - navigationStart;</span><br><span class="line">                    data.loaded = loadEventEnd - navigationStart;</span><br><span class="line">                    data.loadEvent = loadEventEnd - loadEventStart;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (</span><br><span class="line">                        data.appCache &lt; <span class="number">0</span> || data.appCache &gt; <span class="number">120000</span> || </span><br><span class="line">                        data.dns &lt; <span class="number">0</span> || data.dns &gt; <span class="number">120000</span> || </span><br><span class="line">                        data.connection &lt; <span class="number">0</span> || data.connection &gt; <span class="number">120000</span> || </span><br><span class="line">                        data.request &lt; <span class="number">0</span> || data.request &gt; <span class="number">120000</span> || </span><br><span class="line">                        data.loading &lt; <span class="number">0</span> || data.loading &gt; <span class="number">120000</span> || </span><br><span class="line">                        data.rendering &lt; <span class="number">0</span> || data.rendering &gt; <span class="number">120000</span> || </span><br><span class="line">                        data.blankScreen &lt; <span class="number">0</span> || data.blankScreen &gt; <span class="number">120000</span> || </span><br><span class="line">                        data.domComplete &lt; <span class="number">0</span> || data.domComplete &gt; <span class="number">120000</span> || </span><br><span class="line">                        data.loaded &lt; <span class="number">0</span> || data.loaded &gt; <span class="number">120000</span> || </span><br><span class="line">                        data.loadEvent &lt; <span class="number">0</span> || data.loadEvent &gt; <span class="number">120000</span></span><br><span class="line">                    ) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> origin = config.url.split(<span class="string">'/api'</span>);</span><br><span class="line">                    <span class="keyword">var</span> url = origin[<span class="number">0</span>] + <span class="string">'/api/apm/performance'</span>;</span><br><span class="line">                    <span class="keyword">this</span>.request.ajax(&#123;</span><br><span class="line">                        url: url || <span class="string">'https://xxx.xxx.com/api/apm/performance'</span>,</span><br><span class="line">                        type: <span class="string">'post'</span>,</span><br><span class="line">                        data: data,</span><br><span class="line">                        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                            <span class="comment">//do nothing</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    <span class="built_in">console</span> &amp;&amp; <span class="built_in">console</span>.error(<span class="built_in">JSON</span>.stringify(e));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><h4 id="如上代码我们注意如几个点："><a href="#如上代码我们注意如几个点：" class="headerlink" title="如上代码我们注意如几个点："></a>如上代码我们注意如几个点：</h4><ol><li>performance有兼容性问题存在，所以要先判断浏览器是否已支持。</li><li>内存数据可能回有异常，如jsHeapSizeLimit=0。存在异常数据可过滤掉本条数据。</li><li>性能数据每一条都可能有异常值，导致计算出来的差值可能小于零，也可能很大。这里做了一个正常值判断。0&lt;=正常数据&lt;=120,000ms。</li></ol><h3 id="服务器接性能数据"><a href="#服务器接性能数据" class="headerlink" title="服务器接性能数据"></a>服务器接性能数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">post: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> reqQuery = ctx.request.body;</span><br><span class="line">            <span class="keyword">let</span> queryData = &#123;</span><br><span class="line">                origin_pathname: reqQuery[<span class="string">'origin_pathname'</span>],</span><br><span class="line"></span><br><span class="line">                jsHeapSizeLimit: reqQuery[<span class="string">'jsHeapSizeLimit'</span>],</span><br><span class="line">                totalJSHeapSize: reqQuery[<span class="string">'totalJSHeapSize'</span>],</span><br><span class="line">                usedJSHeapSize: reqQuery[<span class="string">'usedJSHeapSize'</span>],</span><br><span class="line"></span><br><span class="line">                redirectCount: reqQuery[<span class="string">'redirectCount'</span>],</span><br><span class="line">                type: reqQuery[<span class="string">'type'</span>],</span><br><span class="line"></span><br><span class="line">                redirect: reqQuery[<span class="string">'redirect'</span>],</span><br><span class="line">                appCache: reqQuery[<span class="string">'appCache'</span>],</span><br><span class="line">                dns: reqQuery[<span class="string">'dns'</span>],</span><br><span class="line">                connection: reqQuery[<span class="string">'connection'</span>],</span><br><span class="line">                request: reqQuery[<span class="string">'request'</span>],</span><br><span class="line">                response: reqQuery[<span class="string">'response'</span>],</span><br><span class="line"></span><br><span class="line">                loading: reqQuery[<span class="string">'loading'</span>],</span><br><span class="line">                rendering: reqQuery[<span class="string">'rendering'</span>],</span><br><span class="line">                blankScreen: reqQuery[<span class="string">'blankScreen'</span>],</span><br><span class="line">                domComplete: reqQuery[<span class="string">'domComplete'</span>],</span><br><span class="line">                loaded: reqQuery[<span class="string">'loaded'</span>],</span><br><span class="line">                loadEvent: reqQuery[<span class="string">'loadEvent'</span>],</span><br><span class="line">                create_time: moment().unix(),</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                queryData.appCache &lt; <span class="number">0</span> || queryData.appCache &gt; <span class="number">120000</span> ||</span><br><span class="line">                queryData.dns &lt; <span class="number">0</span> || queryData.dns &gt; <span class="number">120000</span> ||</span><br><span class="line">                queryData.connection &lt; <span class="number">0</span> || queryData.connection &gt; <span class="number">120000</span> ||</span><br><span class="line">                queryData.request &lt; <span class="number">0</span> || queryData.request &gt; <span class="number">120000</span> ||</span><br><span class="line">                queryData.response &lt; <span class="number">0</span> || queryData.response &gt; <span class="number">120000</span> ||</span><br><span class="line">                queryData.loading &lt; <span class="number">0</span> || queryData.loading &gt; <span class="number">120000</span> ||</span><br><span class="line">                queryData.rendering &lt; <span class="number">0</span> || queryData.rendering &gt; <span class="number">120000</span> ||</span><br><span class="line">                queryData.blankScreen &lt; <span class="number">0</span> || queryData.blankScreen &gt; <span class="number">120000</span> ||</span><br><span class="line">                queryData.domComplete &lt; <span class="number">0</span> || queryData.domComplete &gt; <span class="number">120000</span> ||</span><br><span class="line">                queryData.loaded &lt; <span class="number">0</span> || queryData.domComplete &gt; <span class="number">120000</span> ||</span><br><span class="line">                queryData.loadEvent &lt; <span class="number">0</span> || queryData.loadEvent &gt; <span class="number">120000</span> ||</span><br><span class="line">                queryData.jsHeapSizeLimit == <span class="number">0</span> || <span class="built_in">isNaN</span>(queryData.jsHeapSizeLimit) ||</span><br><span class="line">                queryData.totalJSHeapSize == <span class="number">0</span> || <span class="built_in">isNaN</span>(queryData.totalJSHeapSize) ||</span><br><span class="line">                queryData.usedJSHeapSize == <span class="number">0</span> || <span class="built_in">isNaN</span>(queryData.usedJSHeapSize)</span><br><span class="line">            ) &#123;</span><br><span class="line">                ctx.response.body = repWrapper(&#123;</span><br><span class="line">                    status: <span class="string">"OK"</span>,</span><br><span class="line">                    info: <span class="string">'不合理数据,暂不做统计'</span></span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> status = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// rdsCli.keys('performance:*', function (err, keys) &#123;</span></span><br><span class="line">                <span class="comment">//     let len = keys.length;</span></span><br><span class="line">                <span class="comment">//     if (len &lt; 10416) &#123;    //日300w pv 平均每5分钟的pv数</span></span><br><span class="line">                rdsCli.set(<span class="string">`performance:<span class="subst">$&#123;utils.guid()&#125;</span>`</span>, <span class="built_in">JSON</span>.stringify(queryData), <span class="string">'EX'</span>, (<span class="number">70</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, status</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                        <span class="keyword">throw</span> err;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        resolve(&#123;</span><br><span class="line">                            status</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">//     &#125; else &#123;</span></span><br><span class="line">                <span class="comment">//         resolve(&#123;</span></span><br><span class="line">                <span class="comment">//             status: "OK",</span></span><br><span class="line">                <span class="comment">//             info: '达到设定的redis缓存上线，不做redis缓存处理'</span></span><br><span class="line">                <span class="comment">//         &#125;);</span></span><br><span class="line">                <span class="comment">//     &#125;</span></span><br><span class="line">                <span class="comment">// &#125;);</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            ctx.response.body = repWrapper(status)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            ctx.response.body = repWrapper(e.toString(), errMapping[<span class="string">'ERR_DATABASE_REQ'</span>][<span class="string">'code'</span>]);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此部分将数据缓存到redis70s。同理这里也做了一些数据校验，过滤掉无用的数据。</p><h3 id="定时任务获取redis中的数据并入库"><a href="#定时任务获取redis中的数据并入库" class="headerlink" title="定时任务获取redis中的数据并入库"></a>定时任务获取redis中的数据并入库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        rdsCli.keys(<span class="string">'performance:*'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">err, keys</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> data = <span class="keyword">await</span> bluebird.map(keys, <span class="keyword">async</span> (v, k) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> value = <span class="keyword">await</span> getAsync(v);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(</span><br><span class="line">                    value</span><br><span class="line">                );</span><br><span class="line">            &#125;);</span><br><span class="line">            _.map(keys, (key) =&gt; &#123;</span><br><span class="line">                rdsCli.set(key, <span class="string">''</span>, <span class="string">'EX'</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算</span></span><br><span class="line">    <span class="keyword">let</span> archive = _.groupBy(data, <span class="string">'origin_pathname'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> archiveData = <span class="built_in">Object</span>.keys(archive).map(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> archive[v].reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = &#123;&#125;;</span><br><span class="line">            _.keys(a).forEach(<span class="function">(<span class="params">sv</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">'origin_pathname'</span> === sv) &#123;</span><br><span class="line">                    temp[sv] = a[sv];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>( <span class="string">'create_time'</span> === sv ) &#123;</span><br><span class="line">                    temp[sv] = <span class="built_in">Math</span>.round( ( <span class="built_in">parseFloat</span>(a[sv]) + <span class="built_in">parseFloat</span>(b[sv]) ) / <span class="number">2</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    temp[sv] = ( ( <span class="built_in">parseFloat</span>(a[sv]) + <span class="built_in">parseFloat</span>(b[sv]) ) / <span class="number">2</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    archiveData = archiveData.filter(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v.jsHeapSizeLimit != <span class="string">'NaN'</span> &amp;&amp; </span><br><span class="line">        v.totalJSHeapSize != <span class="string">'NaN'</span> &amp;&amp; </span><br><span class="line">        v.usedJSHeapSize != <span class="string">'NaN'</span> &amp;&amp;</span><br><span class="line">        v.domComplete != <span class="string">'NaN'</span> &amp;&amp; </span><br><span class="line">        v.loadEvent != <span class="string">'NaN'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//批量插入数据库</span></span><br><span class="line">    <span class="keyword">let</span> queryRst = <span class="keyword">await</span> db.elPerformance.bulkCreate(archiveData);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几个需要注意的点</p><ol><li>从redis拿数据是30秒一次。而redis的缓存是70秒，所以拿到redis数据后，需要将已经拿到的数据删除，以防出现重复数据。</li><li>这里做的不好的点从redis拿出的数据校验不够完善，需优化。</li></ol><h3 id="获取性能数据"><a href="#获取性能数据" class="headerlink" title="获取性能数据"></a>获取性能数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>: async (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 取参</span></span><br><span class="line">            <span class="keyword">let</span> &#123;</span><br><span class="line">                origin_pathname,</span><br><span class="line">                start_time,</span><br><span class="line">                end_time</span><br><span class="line">            &#125; = ctx.query;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询</span></span><br><span class="line">            <span class="keyword">let</span> whereQuery = &#123;&#125;;</span><br><span class="line">            <span class="keyword">const</span> Op = db.sequelize.Op;</span><br><span class="line">            <span class="keyword">if</span> (origin_pathname) &#123;</span><br><span class="line">                </span><br><span class="line">                whereQuery[<span class="string">'origin_pathname'</span>] = &#123;</span><br><span class="line">                    [Op.like]: <span class="string">`%<span class="subst">$&#123;origin_pathname&#125;</span>%`</span></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (start_time &amp;&amp; end_time) &#123;</span><br><span class="line">                whereQuery[<span class="string">'create_time'</span>] = &#123;</span><br><span class="line">                    $gt: start_time,</span><br><span class="line">                    $lt: end_time</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> queryRst = <span class="keyword">await</span> db.elPerformance.findAndCountAll(&#123;</span><br><span class="line">                attributes: [</span><br><span class="line">                    db.sequelize.fn(<span class="string">'DISTINCT'</span>, db.sequelize.col(<span class="string">'origin_pathname'</span>)),</span><br><span class="line">                ],</span><br><span class="line">                where: whereQuery,</span><br><span class="line">                raw: <span class="literal">true</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回</span></span><br><span class="line">            ctx.response.body = repWrapper(&#123;</span><br><span class="line">                list: queryRst.rows,</span><br><span class="line">                page: &#123;</span><br><span class="line">                    current: <span class="number">1</span> || current,</span><br><span class="line">                    per_page: <span class="number">15</span> || per_page,</span><br><span class="line">                    total_page: <span class="number">15</span> || <span class="built_in">Math</span>.ceil(queryRst.count.length / per_page)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            ctx.response.body = repWrapper(e.toString(), errMapping[<span class="string">'ERR_DATABASE_REQ'</span>][<span class="string">'code'</span>]);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    one: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> origin_pathname = <span class="built_in">decodeURIComponent</span>(ctx.params.id);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 取参</span></span><br><span class="line">            <span class="keyword">let</span> &#123;</span><br><span class="line">                start_time,</span><br><span class="line">                end_time,</span><br><span class="line">            &#125; = ctx.query;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查询</span></span><br><span class="line">            <span class="keyword">let</span> whereQuery = &#123;&#125;;</span><br><span class="line">            whereQuery[<span class="string">'origin_pathname'</span>] = origin_pathname;</span><br><span class="line">            <span class="keyword">if</span> (start_time &amp;&amp; end_time) &#123;</span><br><span class="line">                whereQuery[<span class="string">'create_time'</span>] = &#123;</span><br><span class="line">                    $gt: start_time,</span><br><span class="line">                    $lt: end_time</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> queryDetail = <span class="keyword">await</span> db.elPerformance.findAndCountAll(&#123;</span><br><span class="line">                attributes: [</span><br><span class="line">                    <span class="string">'connection'</span>,</span><br><span class="line">                    <span class="string">'request'</span>,</span><br><span class="line">                    <span class="string">'response'</span>,</span><br><span class="line">                    <span class="string">'loading'</span>,</span><br><span class="line">                    <span class="string">'rendering'</span>,</span><br><span class="line">                    <span class="string">'blankScreen'</span>,</span><br><span class="line">                    <span class="string">'domComplete'</span>,</span><br><span class="line">                    <span class="string">'loaded'</span>,</span><br><span class="line">                    <span class="string">'loadEvent'</span>,</span><br><span class="line">                    <span class="string">'create_time'</span></span><br><span class="line">                ],</span><br><span class="line">                where: whereQuery</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">let</span> qdf = &#123;</span><br><span class="line">                <span class="string">'connection'</span>: [],</span><br><span class="line">                <span class="string">'request'</span>: [],</span><br><span class="line">                <span class="string">'response'</span>: [],</span><br><span class="line">                <span class="string">'loading'</span>: [],</span><br><span class="line">                <span class="string">'rendering'</span>: [],</span><br><span class="line">                <span class="string">'blankScreen'</span>: [],</span><br><span class="line">                <span class="string">'domComplete'</span>: [],</span><br><span class="line">                <span class="string">'loaded'</span>: [],</span><br><span class="line">                <span class="string">'loadEvent'</span>: [],</span><br><span class="line">                <span class="string">'create_time'</span>: []</span><br><span class="line">            &#125;;</span><br><span class="line">            queryDetail.rows.forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> data = v.dataValues;</span><br><span class="line">                <span class="built_in">Object</span>.keys(data).forEach( <span class="function"><span class="params">sv</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>( <span class="string">'create_time'</span>=== sv ) &#123;</span><br><span class="line">                        qdf[sv].push( moment.unix(v[sv]).format(<span class="string">"YYYY-MM-DD hh:MM:SS"</span>) );</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        qdf[sv].push(v[sv]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回</span></span><br><span class="line">            ctx.response.body = repWrapper(&#123;</span><br><span class="line">                origin_pathname,</span><br><span class="line">                queryDetail: qdf,</span><br><span class="line">                count: queryDetail.count,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            ctx.response.body = repWrapper(e.toString(), errMapping[<span class="string">'ERR_DATABASE_REQ'</span>][<span class="string">'code'</span>]);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>这一步就很简单了，先获取列表的数据，再获取具体某一条链接的性能数据。这里也有几个注意点</p><ol><li>默认设置的查询时间比较短（一天）</li><li>没有一次性计算完所有页面的数据，计算量太大，假设每条连接每天有8000条数据，500条链接总共就会有4000万条数据，数据砍半也有2000万条数据。很好性能。所以改成了如上的查询方式。</li><li>对某些数据字段添加了索引（<code>id, origin_path, create_at</code>），加速查询。</li></ol><h3 id="后台界面展示"><a href="#后台界面展示" class="headerlink" title="后台界面展示"></a>后台界面展示</h3><ol><li>列表页<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-fe.ggwan.com/images/3fd0572bd5a996-2400x1262.png" alt="list" title>                </div>                <div class="image-caption">list</div>            </figure></li><li>具体性能页面<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-fe.ggwan.com/images/957f5ef5acc5f7-2834x1396.png" alt="detail" title>                </div>                <div class="image-caption">detail</div>            </figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;本文通过浏览器提供的performance接口获取页面性能数据。performace相关的了解请查看&lt;a href=&quot;https://rya
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github之webhook自动部署</title>
    <link href="https://ryansuen.github.io/2018/10/21/github%E4%B9%8Bwebhook%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <id>https://ryansuen.github.io/2018/10/21/github之webhook自动部署/</id>
    <published>2018-10-21T00:36:49.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术应用场景"><a href="#技术应用场景" class="headerlink" title="技术应用场景"></a>技术应用场景</h2><blockquote><p>自己有一个小的技术博客，部分代码用github托管， 含有隐私信息的代码采用了ftp上传绕过托管。当然更好的方式是自己搭建一个gitlab服务器。代码部署在自己的服务器上面，每次提交完代码都要去服务器上面更新代码是一件很低效的事。说以想通通过一个性价比很高的方式实现如上需求。</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>配置GitHub当push master上代码的时候，访问自己服务器上的一个api（webhooks），假如叫<a href="https://xxx.com/api/webhook。" target="_blank" rel="noopener">https://xxx.com/api/webhook。</a><br><a href="https://xxx.com/" target="_blank" rel="noopener">https://xxx.com/</a></li><li>api里写着这样的逻辑，拉取代码（<code>git fetch</code>）, 合并代码(<code>git merge</code>）。 自己玩也就没有做打标签。</li><li>代码拉取，合并完毕，重启服务端的服务，我是用了pm2做进程管理，所以再执行<code>pm2 restart name</code>就好。</li></ol><blockquote><p>原理很简单，就是当向github里push master代码的时候，github调用服务器的api，服务器拉取，合并代码，然后重启网站服务。</p></blockquote><h2 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h2><ol><li>进入对应的仓库</li><li>点击settings</li><li>点击Webhooks</li><li>add webhooks</li><li>Payload URL 里添加好我们自己服务器的完整api url。</li><li>Which events would you like to trigger this webhook?  选Just the push event.就好。</li></ol><h2 id="服务端代码-node-js"><a href="#服务端代码-node-js" class="headerlink" title="服务端代码(node.js)"></a>服务端代码(node.js)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里使用了shelljs模块，实现js和linux的交互。</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">linux</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        shell.exec(<span class="string">`<span class="subst">$&#123;command&#125;</span>`</span>, (err, stdout, srderr) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(err) &#123;</span><br><span class="line">                reject(srderr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(stdout);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"><span class="comment">//怎么实现一个nodejs就不赘述了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处异步改同步后的操作（本api的返回，发送新的请求）都不行。</span></span><br><span class="line"><span class="keyword">let</span> fetch = <span class="keyword">await</span> utils.linux(<span class="string">'git fetch origin'</span>);</span><br><span class="line"><span class="keyword">let</span> merge = <span class="keyword">await</span> utils.linux(<span class="string">'git merge origin/master'</span>);</span><br><span class="line"><span class="keyword">let</span> pm2 = <span class="keyword">await</span> utils.linux(<span class="string">'pm2 restart ryansuen.top'</span>);</span><br></pre></td></tr></table></figure><ul><li>这里我做了当服务器完成代码拉取，合并后就钉钉推送的操作。</li><li>但无论我用shelljs的回调还是通过async/await改异步为同步都不行代码都不能正常运行。(想拿到shelljs执行linux命令返回的信息，再钉钉通知，方便知晓是否成功)</li><li>这里我做了个调整，api的第一步是做钉钉通知，后面在做拉取，合并操作。</li><li>这样操作注意访问线上代码是否生效。</li></ul><blockquote><p>这里我只是满足，我自己的一台服务器的提效需求。而且还有一些安全问题目前还没有进一步完善。哪些问题呢？</p></blockquote><ul><li>如果有多台服务器怎么操作？ (发布机)</li><li>其他人知道我的跟新api url怎么办？(代码执行用户，文件权限，访问的ip限制)</li></ul><blockquote><p>目前博客主要是满足自己提升需求，遭受攻击的风险还小，未做更多的安全操作。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;技术应用场景&quot;&gt;&lt;a href=&quot;#技术应用场景&quot; class=&quot;headerlink&quot; title=&quot;技术应用场景&quot;&gt;&lt;/a&gt;技术应用场景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;自己有一个小的技术博客，部分代码用github托管， 含有隐私信息的代码采用了ft
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node.js爬虫实战一例</title>
    <link href="https://ryansuen.github.io/2018/08/31/node-js%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E4%B8%80%E4%BE%8B/"/>
    <id>https://ryansuen.github.io/2018/08/31/node-js爬虫实战一例/</id>
    <published>2018-08-30T16:06:10.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫实战一例"><a href="#爬虫实战一例" class="headerlink" title="爬虫实战一例"></a>爬虫实战一例</h1><h3 id="爬虫需求由来"><a href="#爬虫需求由来" class="headerlink" title="爬虫需求由来"></a>爬虫需求由来</h3><p>我的目的很单纯，只是想知道<a href="https://a.haifffffo.top/nameCheck2018/index.html?testId=25&amp;nickname=%E5%AD%99%E6%AF%85&amp;sex=1&amp;province=%E5%B9%BF%E4%B8%9C&amp;city=%E5%B9%BF%E5%B7%9E&amp;country=%E4%B8%AD%E5%9B%BD&amp;headimgurl=http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJQ1BMAQ6Atp26lp75sib0hcJ5vdS7ljkwtW10icfMIeQ5Oh5hqiaP8ic8wYOSskcV7IFulsm7t5ER55A/132&amp;access_token=12_b_5yVyUZB1n2IPcdLbPw09N2SfmZvOOXgEVKKMsH8hnh5Ry7x1NZTXWRd5DfMrDNJerMM2uoBYRsdHgZiemyyTR3camD8-b_lhignKuPZcY&amp;openid=ograBtyH9hjdO3MG-e4YiBiMpSJw&amp;unionid=ooYW_t7bPwAgVa6nT-cOQmk8Hjlo&amp;from=singlemessage&amp;isappinstalled=0" target="_blank" rel="noopener">这个小测试</a>背后的测试结果数据，看能不能获取到一些有用的信息。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://mmc-forecast.oss-cn-shanghai.aliyuncs.com/images/9e613aa33cca65-582x1180.png" alt="page1" title>                </div>                <div class="image-caption">page1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://mmc-forecast.oss-cn-shanghai.aliyuncs.com/images/b71af920603aa9-576x760.png" alt="page2" title>                </div>                <div class="image-caption">page2</div>            </figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>通过观察，我们会发现结果页的数据很少，然而就这样简简单单的几个数据就形成了一个完整的结果，还能产生一定的传播效应。接下来开始我们一探究竟。</p><h3 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h3><p>通过chrome我们很容易发现，这不是一个后端渲染的页面，我们不需要去爬完整的页面，再渲染页面，然后通过造作dom获取数据。<br>我们也能够很容易能够发现他的数据来自于哪一个接口。接口是<code>https://www.goodstudydayup.com:1443/wnl/H5Test/nameresult?tid=25&amp;name=%E6%B5%8B%E8%AF%95&amp;op=0</code>。 </p><p>通过肉眼观察，我们发现这个接口有如下3个参数：</p><ul><li>tid=25</li><li>name=%E6%B5%8B%E8%AF%95</li><li>op=0</li></ul><p>open in new tab,返回的数据如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    code: "200",</span><br><span class="line">    msg: "ok",</span><br><span class="line">    data: &#123;</span><br><span class="line">        title: "赵丽颖",</span><br><span class="line">        placehold: "的命运相似明星是",</span><br><span class="line">        icon: "https://cdn.jptj.goodstudydayup.com/cover/201807/1532503163444.jpeg",</span><br><span class="line">        point: "6",</span><br><span class="line">        desc: "你的命运和赵丽颖相似，喜欢脚踏实地的前进，独一无二的你总有一天能够功成名就，实现自己的梦想。",</span><br><span class="line">        back_small: "https://cdn.jptj.goodstudydayup.com/cover/201807/1532502774491.jpeg"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到这里心中暗喜了下，才三个参数，那应该很好猜，name我们一看便知道是什么。用户的名字。那tid和op代表什么意思呢？</p><p>tid和op估计是猜不出来，我们不试一试。初高中大学我们都做过实验，知道要去探究某一个输入（参数）对响应（返回值）有什么影响。只要改变这一项输入的值，保证其他输入不变。</p><h3 id="我们先从op开始验证-只改变链接上的op值。从链接看op是一个整数，我们用不同的整数验证。"><a href="#我们先从op开始验证-只改变链接上的op值。从链接看op是一个整数，我们用不同的整数验证。" class="headerlink" title="我们先从op开始验证,只改变链接上的op值。从链接看op是一个整数，我们用不同的整数验证。"></a>我们先从op开始验证,只改变链接上的op值。从链接看op是一个整数，我们用不同的整数验证。</h3><table><thead><tr><th style="text-align:center">op(输入)</th><th style="text-align:center">response(响应)</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">title: “赵丽颖”</td></tr><tr><td style="text-align:center">-1</td><td style="text-align:center">title: “吴彦祖”,</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">title: “吴彦祖”,</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">title: “吴彦祖”,</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><hr><h3 id="看到这里大概有点眉目了，我们先不做结论。继续往下验证两种情况。op为0与改变name，op为1改变name值-op为-1改变name值。"><a href="#看到这里大概有点眉目了，我们先不做结论。继续往下验证两种情况。op为0与改变name，op为1改变name值-op为-1改变name值。" class="headerlink" title="看到这里大概有点眉目了，我们先不做结论。继续往下验证两种情况。op为0与改变name，op为1改变name值,op为-1改变name值。"></a>看到这里大概有点眉目了，我们先不做结论。继续往下验证两种情况。op为0与改变name，op为1改变name值,op为-1改变name值。</h3><table><thead><tr><th style="text-align:center">op(输入)</th><th style="text-align:center">name(输入)</th><th style="text-align:center">response(响应)</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">测试</td><td style="text-align:center">title: “赵丽颖”</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">测试1</td><td style="text-align:center">title: “宋慧乔”</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">测试2</td><td style="text-align:center">title: “小S”</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">测试3</td><td style="text-align:center">title: “赵丽颖”</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><table><thead><tr><th style="text-align:center">op(输入)</th><th style="text-align:center">name(输入)</th><th style="text-align:center">response(响应)</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">测试</td><td style="text-align:center">title: “吴彦祖”</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">测试1</td><td style="text-align:center">title: “杨洋”</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">测试2</td><td style="text-align:center">title: “林更新”</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">测试3</td><td style="text-align:center">title: “林更新”</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><table><thead><tr><th style="text-align:center">op(输入)</th><th style="text-align:center">name(输入)</th><th style="text-align:center">response(响应)</th></tr></thead><tbody><tr><td style="text-align:center">-1</td><td style="text-align:center">测试</td><td style="text-align:center">title: “吴彦祖”</td></tr><tr><td style="text-align:center">-1</td><td style="text-align:center">测试1</td><td style="text-align:center">title: “杨洋”</td></tr><tr><td style="text-align:center">-1</td><td style="text-align:center">测试2</td><td style="text-align:center">title: “林更新”</td></tr><tr><td style="text-align:center">-1</td><td style="text-align:center">测试3</td><td style="text-align:center">title: “林更新”</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><blockquote><p>看完上面的结果我们基本可以得出结论。op原来代表性别。1是男性，0是女性（他自己定的值，不用去质疑）。其他整数默认为男性。 这里我们可以很自然的想到一个疑问，<strong>为什么性别这个参数它没有命名为sex 或则gender,而是op?</strong> </p></blockquote><p>我们可以猜测下，op（option?）,难道不一定代表性别？<br>先放下这个疑问不管。继续往下探索。</p><p>name,op我们都大概清晰了，接下来就是去研究tid代表什么意思了？老规矩，tid改变，其它值不变。tid初始值等于25,我们取前10条数据的结果看看。</p><h3 id="通过代码获取结果数据"><a href="#通过代码获取结果数据" class="headerlink" title="通过代码获取结果数据"></a>通过代码获取结果数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;    </span><br><span class="line">    <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">30</span>),(val,index)=&gt;index).forEach(<span class="keyword">async</span>(v,k) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> tid = v;</span><br><span class="line">        <span class="keyword">let</span> name = <span class="string">'测试'</span>;</span><br><span class="line">        <span class="keyword">let</span> op = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> reptileUrl = <span class="string">`https://www.goodstudydayup.com:1443/wnl/H5Test/nameresult?tid=<span class="subst">$&#123;tid&#125;</span>&amp;name=<span class="subst">$&#123;name&#125;</span>&amp;op=<span class="subst">$&#123;op&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> superagent.get(reptileUrl);</span><br><span class="line">        <span class="built_in">console</span>.log(tid, res.text);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="数据结果"><a href="#数据结果" class="headerlink" title="数据结果"></a>数据结果</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">3 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">2 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">4 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">1 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">7 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">9 '&#123;"code":"200","msg":"ok","data":&#123;"title":"锄头一把","placehold":"的名字价值","icon":"https://cdn.jptj.goodstudydayup.com/cover/201805/1526372362583.jpeg","point":"2,5,8","desc":"虽说低调是美德，但你的名字可能就显得有点不讲究了，对事业的帮助率很低。赶紧想想如何提升自己名字的价值吧！","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">6 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">5 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">10 '&#123;"code":"200","msg":"ok","data":&#123;"title":"德国","placehold":"的最佳旅行地是","icon":"https://cdn.jptj.goodstudydayup.com/cover/201805/1526376399512.jpeg","point":"2,15","desc":"你拥有敢于冒险的勇气，做任何事情都会精细研究，提前做好规划，一步一步完成，所以有计划的旅行更适合你哦！","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">12 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">15 '&#123;"code":"200","msg":"ok","data":&#123;"title":"晴","placehold":"的性格天气是","icon":"https://cdn.jptj.goodstudydayup.com/cover/201805/1526977505571.jpeg","point":"1,2,3","desc":"晴天代表你乐观开朗，内心充满阳光，这样的你，面对工作和生活时，你也能保持不错的精神状态。","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">11 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">22 '&#123;"code":"200","msg":"ok","data":&#123;"title":"竞争对手","placehold":"与爱人的前世关系是","icon":"https://cdn.jptj.goodstudydayup.com/cover/201806/1529996973828.jpeg","point":"2","desc":"前世的你们是互相竞争的对手，今世的你们惺惺相惜，彼此的牵绊会很深，感情也会越来越深厚。","back_small":"https://cdn.jptj.goodstudydayup.com/cover/201806/1529996467162.jpeg"&#125;&#125;'</span><br><span class="line">14 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">20 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">18 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">17 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">0 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">19 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">16 '&#123;"code":"200","msg":"ok","data":&#123;"title":"1","placehold":"1","icon":"https://cdn.jptj.goodstudydayup.com/cover/201805/1527146243892.jpeg","point":"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16","desc":"11","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">8 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">23 '&#123;"code":"200","msg":"ok","data":&#123;"title":"28岁","placehold":"的暴富年龄段是","icon":"https://cdn.jptj.goodstudydayup.com/cover/201807/1530521690641.jpeg","point":"2","desc":"你自身对于金钱很是敏感，知道自己应该投资什么来快速获取利润，所以赚钱相对容易，而且后面会财源不断。","back_small":"https://cdn.jptj.goodstudydayup.com/cover/201807/1530521141284.jpeg"&#125;&#125;'</span><br><span class="line">13 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br><span class="line">24 '&#123;"code":"200","msg":"ok","data":&#123;"title":"宫保鸡丁","placehold":"的个性代表菜是","icon":"https://cdn.jptj.goodstudydayup.com/cover/201807/1531210375761.jpeg","point":"2","desc":"色调鲜艳、香辣味浓，吃起来肉质滑嫩。如你一般，让人满心欢喜，回味悠长。简而言之，你的天生属性就是招人疼。","back_small":"https://cdn.jptj.goodstudydayup.com/cover/201807/1531209184727.jpeg"&#125;&#125;'</span><br><span class="line">25 '&#123;"code":"200","msg":"ok","data":&#123;"title":"林志玲","placehold":"的命运相似明星是","icon":"https://cdn.jptj.goodstudydayup.com/cover/201807/1532503163593.jpeg","point":"2","desc":"你的气质宛若林志玲一般充满大家闺秀的气息，而你的命运也似乎和她一样，只要你和她一样有颗坚韧的心，成功指日可待。","back_small":"https://cdn.jptj.goodstudydayup.com/cover/201807/1532502774491.jpeg"&#125;&#125;'</span><br><span class="line">26 '&#123;"code":"200","msg":"ok","data":&#123;"title":"雅典娜","placehold":"的守护神是","icon":"https://cdn.jptj.goodstudydayup.com/cover/201808/1533635829116.jpeg","point":"2","desc":"你像智慧女神一样，是最聪明的女神，是智慧和力量的完美结合，你代表着女性的力量，眼神明亮，性格开朗。","back_small":"https://cdn.jptj.goodstudydayup.com/cover/201808/1533634370304.jpeg"&#125;&#125;'</span><br><span class="line">29 '&#123;"code":"200","msg":"ok","data":&#123;"title":"锦觅","placehold":"的角色是","icon":"https://cdn.jptj.goodstudydayup.com/cover/201808/1535441155154.jpeg","point":"1,2","desc":"你向来是一个天真烂漫的人，为朋友可以两肋插刀，不管对待生活还是感情都有一腔赤诚，哪怕受伤都在所不惜。","back_small":"https://cdn.jptj.goodstudydayup.com/cover/201808/1535440988818.jpeg"&#125;&#125;'</span><br><span class="line">27 '&#123;"code":"200","msg":"ok","data":&#123;"title":"纯妃","placehold":"的角色是","icon":"https://cdn.jptj.goodstudydayup.com/cover/201808/1534230311231.jpeg","point":"2,10","desc":"你在生活中言不由衷，喜欢带着面具的人，对于生活中你所需要的东西，你会竭尽全力的去做并得到它。","back_small":"https://cdn.jptj.goodstudydayup.com/cover/201808/1534227874391.jpeg"&#125;&#125;'</span><br><span class="line">21 '&#123;"code":"200","msg":"ok","data":&#123;"title":"偏财运欠佳","placehold":"的下半年","icon":"https://cdn.jptj.goodstudydayup.com/cover/201806/1528267891823.jpeg","point":"2","desc":"你下半年偏财运也不大好哦，所以还是把精力用在正财上面吧，好好工作，才会有满意的回报！","back_small":"https://cdn.jptj.goodstudydayup.com/cover/201806/1528267523938.jpeg"&#125;&#125;'</span><br><span class="line">28 '&#123;"code":"200","msg":"ok","data":&#123;"icon":"https://cdn.jptj.goodstudydayup.com/cover/","back_small":"https://cdn.jptj.goodstudydayup.com/cover/"&#125;&#125;'</span><br></pre></td></tr></table></figure><blockquote><p>分析数据,我们很容易发现并不是所有的tid都能获得有效数据。tid为9的结果数据有效。 [有效数据].data.title 会有值。通过代码找到有效的tid.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000</span>),(val,index)=&gt;index).forEach(<span class="keyword">async</span>(v,k) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> tid = v;</span><br><span class="line">            <span class="keyword">let</span> name = <span class="string">'测试'</span>;</span><br><span class="line">            <span class="keyword">let</span> op = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> reptileUrl = <span class="string">`https://www.goodstudydayup.com:1443/wnl/H5Test/nameresult?tid=<span class="subst">$&#123;tid&#125;</span>&amp;name=<span class="subst">$&#123;name&#125;</span>&amp;op=<span class="subst">$&#123;op&#125;</span>`</span>;</span><br><span class="line">            <span class="keyword">let</span> res = <span class="keyword">await</span> superagent.get(reptileUrl);</span><br><span class="line">            res = <span class="built_in">JSON</span>.parse(res.text);</span><br><span class="line">            <span class="keyword">if</span>(res.data.title) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(tid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//获取到的有效值如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">16</span><br><span class="line">22</span><br><span class="line">24</span><br><span class="line">10</span><br><span class="line">25</span><br><span class="line">27</span><br><span class="line">9</span><br><span class="line">29</span><br><span class="line">21</span><br><span class="line">23</span><br><span class="line">26</span><br><span class="line">15</span><br></pre></td></tr></table></figure></p><blockquote><p>到此我们三个参数我们全部我们全部明白了。</p></blockquote><ul><li>tid: [9,10, 15, 16,21,22,23,24,25,26,27, 29]</li><li>op: [0,1]</li><li>name: *</li></ul><h3 id="经过如上的分析，我们可以正式开始为所欲为的爬数据了。"><a href="#经过如上的分析，我们可以正式开始为所欲为的爬数据了。" class="headerlink" title="经过如上的分析，我们可以正式开始为所欲为的爬数据了。"></a>经过如上的分析，我们可以正式开始为所欲为的爬数据了。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'子义'</span>;</span><br><span class="line">    <span class="keyword">let</span> tids = [<span class="number">9</span>,<span class="number">10</span>, <span class="number">15</span>, <span class="number">16</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>, <span class="number">29</span>];</span><br><span class="line">    tids.forEach(<span class="keyword">async</span> (tid) =&gt; &#123;</span><br><span class="line">        [<span class="number">0</span>,<span class="number">1</span>].forEach(<span class="keyword">async</span> (op) =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> reptileUrl = <span class="string">`https://www.goodstudydayup.com:1443/wnl/H5Test/nameresult?tid=<span class="subst">$&#123;tid&#125;</span>&amp;name=<span class="subst">$&#123;name&#125;</span>&amp;op=<span class="subst">$&#123;op&#125;</span>`</span>;</span><br><span class="line">                <span class="keyword">let</span> r1 = <span class="keyword">await</span> superagent.get(reptileUrl);</span><br><span class="line">                <span class="keyword">let</span> o1 = <span class="built_in">JSON</span>.parse(r1.text);</span><br><span class="line">                <span class="keyword">if</span> (o1.data.title) &#123;</span><br><span class="line">                    <span class="comment">//let flag = await db.Wnl.find(&#123; 'data.title': o1.data.title &#125;);                    </span></span><br><span class="line">                    <span class="comment">//if ( flag.length === 0 ) &#123;</span></span><br><span class="line">                        o1.data.tid = tid;</span><br><span class="line">                        o1.data.op = op;</span><br><span class="line">                        o1.data.name = name;</span><br><span class="line">                        db.Wnl.create(o1);</span><br><span class="line">                        <span class="keyword">let</span> names = [</span><br><span class="line">                            <span class="string">'梦琪'</span>, <span class="string">'之桃'</span>, <span class="string">'慕青'</span>, <span class="string">'尔岚'</span>, <span class="string">'初夏'</span>, <span class="string">'沛菡'</span>, <span class="string">'傲珊'</span>, <span class="string">'曼文'</span>, <span class="string">'乐菱'</span>, <span class="string">'惜文'</span>, <span class="string">'香寒'</span>, <span class="string">'新柔'</span>, <span class="string">'语蓉'</span>, <span class="string">'海安'</span>, <span class="string">'夜蓉'</span>, <span class="string">'涵柏'</span>, <span class="string">'水桃'</span>, <span class="string">'醉蓝'</span>, <span class="string">'语琴'</span>, <span class="string">'从彤'</span>, <span class="string">'傲晴'</span>, <span class="string">'语兰'</span>, <span class="string">'又菱'</span>, <span class="string">'碧彤'</span>, <span class="string">'元霜'</span>, <span class="string">'怜梦'</span>, <span class="string">'紫寒'</span>, <span class="string">'妙彤'</span>, <span class="string">'曼易'</span>, <span class="string">'南莲'</span>, <span class="string">'紫翠'</span>, <span class="string">'雨寒'</span>, <span class="string">'易烟'</span>, <span class="string">'如萱'</span>, <span class="string">'若南'</span>, <span class="string">'寻真'</span>, <span class="string">'晓亦'</span>, <span class="string">'向珊'</span>, <span class="string">'慕灵'</span>, <span class="string">'以蕊'</span>, <span class="string">'映易'</span>, <span class="string">'雪柳'</span>, <span class="string">'海云'</span>, <span class="string">'凝天'</span>, <span class="string">'沛珊'</span>, <span class="string">'寒云'</span>, <span class="string">'冰旋'</span>, <span class="string">'宛儿'</span>, <span class="string">'绿真'</span>, <span class="string">'晓霜'</span>, <span class="string">'碧凡'</span>, <span class="string">'夏菡'</span>, <span class="string">'曼香'</span>, <span class="string">'若烟'</span>, <span class="string">'半梦'</span>, <span class="string">'雅绿'</span>, <span class="string">'冰蓝'</span>, <span class="string">'灵槐'</span>, <span class="string">'平安'</span>, <span class="string">'书翠'</span>, <span class="string">'翠风'</span>, <span class="string">'代云'</span>, <span class="string">'梦曼'</span>, <span class="string">'幼翠'</span>, <span class="string">'听寒'</span>, <span class="string">'梦柏'</span>, <span class="string">'醉易'</span>, <span class="string">'访旋'</span>, <span class="string">'亦玉'</span>, <span class="string">'凌萱'</span>, <span class="string">'访卉'</span>, <span class="string">'怀亦'</span>, <span class="string">'笑蓝'</span>, <span class="string">'靖柏'</span>, <span class="string">'夜蕾'</span>, <span class="string">'冰夏'</span>, <span class="string">'梦松'</span>, <span class="string">'书雪'</span>, <span class="string">'乐枫'</span>, <span class="string">'念薇'</span>, <span class="string">'靖雁'</span>, <span class="string">'从寒'</span>, <span class="string">'觅波'</span>, <span class="string">'静曼'</span>, <span class="string">'凡旋'</span>, <span class="string">'以亦'</span>, <span class="string">'念露'</span>, <span class="string">'芷蕾'</span>, <span class="string">'千兰'</span>, <span class="string">'新波'</span>, <span class="string">'代真'</span>, <span class="string">'新蕾'</span>, <span class="string">'雁玉'</span>, <span class="string">'冷卉'</span>, <span class="string">'紫山'</span>, <span class="string">'千琴'</span>, <span class="string">'傲芙'</span>, <span class="string">'盼山'</span>, <span class="string">'怀蝶'</span>, <span class="string">'冰兰'</span>, <span class="string">'山柏'</span>, <span class="string">'翠萱'</span>, <span class="string">'问旋'</span>, <span class="string">'白易'</span>, <span class="string">'问筠'</span>, <span class="string">'如霜'</span>, <span class="string">'半芹'</span>, <span class="string">'丹珍'</span>, <span class="string">'冰彤'</span>, <span class="string">'亦寒'</span>, <span class="string">'之瑶'</span>, <span class="string">'冰露'</span>, <span class="string">'尔珍'</span>, <span class="string">'谷雪'</span>, <span class="string">'乐萱'</span>, <span class="string">'涵菡'</span>, <span class="string">'海莲'</span>, <span class="string">'傲蕾'</span>, <span class="string">'青槐'</span>, <span class="string">'易梦'</span>, <span class="string">'惜雪'</span>, <span class="string">'宛海'</span>, <span class="string">'之柔'</span>, <span class="string">'夏青'</span>, <span class="string">'亦瑶'</span>, <span class="string">'妙菡'</span>, <span class="string">'紫蓝'</span>, <span class="string">'幻柏'</span>, <span class="string">'元风'</span>, <span class="string">'冰枫'</span>, <span class="string">'访蕊'</span>, <span class="string">'芷蕊'</span>, <span class="string">'凡蕾'</span>, <span class="string">'凡柔'</span>, <span class="string">'安蕾'</span>, <span class="string">'天荷'</span>, <span class="string">'含玉'</span>, <span class="string">'书兰'</span>, <span class="string">'雅琴'</span>, <span class="string">'书瑶'</span>, <span class="string">'从安'</span>, <span class="string">'夏槐'</span>, <span class="string">'念芹'</span>, <span class="string">'代曼'</span>, <span class="string">'幻珊'</span>, <span class="string">'谷丝'</span>, <span class="string">'秋翠'</span>, <span class="string">'白晴'</span>, <span class="string">'海露'</span>, <span class="string">'代荷'</span>, <span class="string">'含玉'</span>, <span class="string">'书蕾'</span>, <span class="string">'听白'</span>, <span class="string">'灵雁'</span>, <span class="string">'雪青'</span>, <span class="string">'乐瑶'</span>, <span class="string">'含烟'</span>, <span class="string">'涵双'</span>, <span class="string">'平蝶'</span>, <span class="string">'雅蕊'</span>, <span class="string">'傲之'</span>, <span class="string">'灵薇'</span>, <span class="string">'含蕾'</span>, <span class="string">'从梦'</span>, <span class="string">'从蓉'</span>, <span class="string">'初丹。听兰'</span>, <span class="string">'听蓉'</span>, <span class="string">'语芙'</span>, <span class="string">'夏彤'</span>, <span class="string">'凌瑶'</span>, <span class="string">'忆翠'</span>, <span class="string">'幻灵'</span>, <span class="string">'怜菡'</span>, <span class="string">'紫南'</span>, <span class="string">'依珊'</span>, <span class="string">'妙竹'</span>, <span class="string">'访烟'</span>, <span class="string">'怜蕾'</span>, <span class="string">'映寒'</span>, <span class="string">'友绿'</span>, <span class="string">'冰萍'</span>, <span class="string">'惜霜'</span>, <span class="string">'凌香'</span>, <span class="string">'芷蕾'</span>, <span class="string">'雁卉'</span>, <span class="string">'迎梦'</span>, <span class="string">'元柏'</span>, <span class="string">'代萱'</span>, <span class="string">'紫真'</span>, <span class="string">'千青'</span>, <span class="string">'凌寒'</span>, <span class="string">'紫安'</span>, <span class="string">'寒安'</span>, <span class="string">'怀蕊'</span>, <span class="string">'秋荷'</span>, <span class="string">'涵雁'</span>, <span class="string">'以山'</span>, <span class="string">'凡梅'</span>, <span class="string">'盼曼'</span>, <span class="string">'翠彤'</span>, <span class="string">'谷冬'</span>, <span class="string">'冷安'</span>, <span class="string">'千萍'</span>, <span class="string">'冰烟'</span>, <span class="string">'雅阳'</span>, <span class="string">'友绿'</span>, <span class="string">'南松'</span>, <span class="string">'诗云'</span>, <span class="string">'飞风'</span>, <span class="string">'寄灵'</span>, <span class="string">'书芹'</span>, <span class="string">'幼蓉'</span>, <span class="string">'以蓝'</span>, <span class="string">'笑寒'</span>, <span class="string">'忆寒'</span>, <span class="string">'秋烟'</span>, <span class="string">'芷巧'</span>, <span class="string">'水香'</span>, <span class="string">'映之'</span>, <span class="string">'醉波'</span>, <span class="string">'幻莲'</span>, <span class="string">'夜山'</span>, <span class="string">'芷卉'</span>, <span class="string">'向彤'</span>, <span class="string">'小玉'</span>, <span class="string">'幼南'</span>, <span class="string">'凡梦'</span>, <span class="string">'尔曼'</span>, <span class="string">'念波'</span>, <span class="string">'迎松'</span>, <span class="string">'青寒'</span>, <span class="string">'笑天'</span>, <span class="string">'涵蕾'</span>, <span class="string">'碧菡'</span>, <span class="string">'映秋'</span>, <span class="string">'盼烟'</span>, <span class="string">'忆山'</span>, <span class="string">'以寒'</span>, <span class="string">'寒香'</span>, <span class="string">'小凡'</span>, <span class="string">'代亦'</span>, <span class="string">'梦露'</span>, <span class="string">'映波'</span>, <span class="string">'友蕊'</span>, <span class="string">'寄凡'</span>, <span class="string">'怜蕾'</span>, <span class="string">'雁枫'</span>, <span class="string">'水绿'</span>, <span class="string">'曼荷'</span>, <span class="string">'笑珊'</span>, <span class="string">'寒珊'</span>, <span class="string">'谷南'</span>, <span class="string">'慕儿'</span>, <span class="string">'夏岚'</span>, <span class="string">'友儿'</span>, <span class="string">'小萱'</span>, <span class="string">'紫青'</span>, <span class="string">'妙菱'</span>, <span class="string">'冬寒'</span>, <span class="string">'曼柔'</span>, <span class="string">'语蝶'</span>, <span class="string">'青筠'</span>, <span class="string">'夜安'</span>, <span class="string">'觅海'</span>, <span class="string">'问安'</span>, <span class="string">'晓槐'</span>, <span class="string">'雅山'</span>, <span class="string">'访云'</span>, <span class="string">'翠容'</span>, <span class="string">'寒凡'</span>, <span class="string">'晓绿'</span>, <span class="string">'以菱'</span>, <span class="string">'冬云'</span>, <span class="string">'含玉'</span>, <span class="string">'访枫'</span>, <span class="string">'含卉'</span>, <span class="string">'夜白'</span>, <span class="string">'冷安'</span>, <span class="string">'灵竹'</span>, <span class="string">'醉薇'</span>, <span class="string">'元珊'</span>, <span class="string">'幻波'</span>, <span class="string">'盼夏'</span>, <span class="string">'元瑶'</span>, <span class="string">'迎曼'</span>, <span class="string">'水云'</span>, <span class="string">'访琴'</span>, <span class="string">'谷波'</span>, <span class="string">'笑白'</span>, <span class="string">'妙海'</span>, <span class="string">'紫霜'</span>, <span class="string">'凌旋'</span>, <span class="string">'孤丝'</span>, <span class="string">'怜寒'</span>, <span class="string">'凡松'</span>, <span class="string">'青丝'</span>, <span class="string">'翠安'</span>, <span class="string">'如天'</span>, <span class="string">'凌雪'</span>, <span class="string">'绮菱'</span>, <span class="string">'代云'</span>, <span class="string">'香薇'</span>, <span class="string">'冬灵'</span>, <span class="string">'凌珍'</span>, <span class="string">'沛文'</span>, <span class="string">'紫槐'</span>, <span class="string">'幻柏'</span>, <span class="string">'采文'</span>, <span class="string">'雪旋'</span>, <span class="string">'盼海'</span>, <span class="string">'映梦'</span>, <span class="string">'安雁'</span>, <span class="string">'映容'</span>, <span class="string">'凝阳'</span>, <span class="string">'访风'</span>, <span class="string">'天亦'</span>, <span class="string">'觅风'</span>, <span class="string">'小霜'</span>, <span class="string">'雪萍'</span>, <span class="string">'半雪'</span>, <span class="string">'山柳'</span>, <span class="string">'谷雪'</span>, <span class="string">'靖易'</span>, <span class="string">'白薇'</span>, <span class="string">'梦菡'</span>, <span class="string">'飞绿'</span>, <span class="string">'如波'</span>, <span class="string">'又晴'</span>, <span class="string">'友易'</span>, <span class="string">'香菱'</span>, <span class="string">'冬亦'</span>, <span class="string">'问雁'</span>, <span class="string">'海冬'</span>, <span class="string">'秋灵'</span>, <span class="string">'凝芙'</span>, <span class="string">'念烟'</span>, <span class="string">'白山'</span>, <span class="string">'从灵'</span>, <span class="string">'尔芙'</span>, <span class="string">'迎蓉'</span>, <span class="string">'念寒'</span>, <span class="string">'翠绿'</span>, <span class="string">'翠芙'</span>, <span class="string">'靖儿'</span>, <span class="string">'妙柏'</span>, <span class="string">'千凝'</span>, <span class="string">'小珍'</span>, <span class="string">'妙旋'</span>, <span class="string">'雪枫'</span>, <span class="string">'夏菡'</span>, <span class="string">'绮琴'</span>, <span class="string">'雨双'</span>, <span class="string">'听枫'</span>, <span class="string">'觅荷'</span>, <span class="string">'凡之'</span>, <span class="string">'晓凡'</span>, <span class="string">'雅彤'</span>, <span class="string">'孤风'</span>, <span class="string">'从安'</span>, <span class="string">'绮彤'</span>, <span class="string">'之玉'</span>, <span class="string">'雨珍'</span>, <span class="string">'幻丝'</span>, <span class="string">'代梅'</span>, <span class="string">'青亦'</span>, <span class="string">'元菱'</span>, <span class="string">'海瑶'</span>, <span class="string">'飞槐'</span>, <span class="string">'听露'</span>, <span class="string">'梦岚'</span>, <span class="string">'幻竹'</span>, <span class="string">'谷云'</span>, <span class="string">'忆霜'</span>, <span class="string">'水瑶'</span>, <span class="string">'慕晴'</span>, <span class="string">'秋双'</span>, <span class="string">'雨真'</span>, <span class="string">'觅珍'</span>, <span class="string">'丹雪'</span>, <span class="string">'元枫'</span>, <span class="string">'思天'</span>, <span class="string">'如松'</span>, <span class="string">'妙晴'</span>, <span class="string">'谷秋'</span>, <span class="string">'妙松'</span>, <span class="string">'晓夏'</span>, <span class="string">'宛筠'</span>, <span class="string">'碧琴'</span>, <span class="string">'盼兰'</span>, <span class="string">'小夏'</span>, <span class="string">'安容'</span>, <span class="string">'青曼'</span>, <span class="string">'千儿'</span>, <span class="string">'寻双'</span>, <span class="string">'涵瑶'</span>, <span class="string">'冷梅'</span>, <span class="string">'秋柔'</span>, <span class="string">'思菱'</span>, <span class="string">'醉波'</span>, <span class="string">'醉柳'</span>, <span class="string">'以寒'</span>, <span class="string">'迎夏'</span>, <span class="string">'向雪'</span>, <span class="string">'以丹'</span>, <span class="string">'依凝'</span>, <span class="string">'如柏'</span>, <span class="string">'雁菱'</span>, <span class="string">'凝竹'</span>, <span class="string">'宛白'</span>, <span class="string">'初柔'</span>, <span class="string">'南蕾'</span>, <span class="string">'书萱'</span>, <span class="string">'梦槐'</span>, <span class="string">'南琴'</span>, <span class="string">'绿海'</span>, <span class="string">'沛儿'</span>, <span class="string">'晓瑶'</span>, <span class="string">'凝蝶'</span>, <span class="string">'紫雪'</span>, <span class="string">'念双'</span>, <span class="string">'念真'</span>, <span class="string">'曼寒'</span>, <span class="string">'凡霜'</span>, <span class="string">'飞雪'</span>, <span class="string">'雪兰'</span>, <span class="string">'雅霜'</span>, <span class="string">'从蓉'</span>, <span class="string">'冷雪'</span>, <span class="string">'靖巧'</span>, <span class="string">'翠丝'</span>, <span class="string">'觅翠'</span>, <span class="string">'凡白'</span>, <span class="string">'乐蓉'</span>, <span class="string">'迎波'</span>, <span class="string">'丹烟'</span>, <span class="string">'梦旋'</span>, <span class="string">'书双'</span>, <span class="string">'念桃'</span>, <span class="string">'夜天'</span>, <span class="string">'安筠'</span>, <span class="string">'觅柔'</span>, <span class="string">'初南'</span>, <span class="string">'秋蝶'</span>, <span class="string">'千易'</span>, <span class="string">'安露'</span>, <span class="string">'诗蕊'</span>, <span class="string">'山雁'</span>, <span class="string">'友菱'</span>, <span class="string">'香露'</span>, <span class="string">'晓兰'</span>, <span class="string">'白卉'</span>, <span class="string">'语山'</span>, <span class="string">'冷珍'</span>, <span class="string">'秋翠'</span>, <span class="string">'夏柳'</span>, <span class="string">'如之'</span>, <span class="string">'忆南'</span>, <span class="string">'书易'</span>, <span class="string">'翠桃'</span>, <span class="string">'寄瑶'</span>, <span class="string">'如曼'</span>, <span class="string">'问柳'</span>, <span class="string">'幻桃'</span>, <span class="string">'又菡'</span>, <span class="string">'醉蝶'</span>, <span class="string">'亦绿'</span>, <span class="string">'诗珊'</span>, <span class="string">'听芹'</span>, <span class="string">'新之'</span>, <span class="string">'易巧'</span>, <span class="string">'念云'</span>, <span class="string">'晓灵'</span>, <span class="string">'静枫'</span>, <span class="string">'夏蓉'</span>, <span class="string">'如南'</span>, <span class="string">'幼丝'</span>, <span class="string">'秋白'</span>, <span class="string">'冰安'</span>, <span class="string">'秋白'</span>, <span class="string">'南风'</span>, <span class="string">'醉山'</span>, <span class="string">'初彤'</span>, <span class="string">'凝海'</span>, <span class="string">'紫文'</span>, <span class="string">'凌晴'</span>, <span class="string">'雅琴'</span>, <span class="string">'傲安'</span>, <span class="string">'傲之'</span>, <span class="string">'初蝶'</span>, <span class="string">'代芹'</span>, <span class="string">'诗霜'</span>, <span class="string">'碧灵'</span>, <span class="string">'诗柳'</span>, <span class="string">'夏柳'</span>, <span class="string">'采白'</span>, <span class="string">'慕梅'</span>, <span class="string">'乐安'</span>, <span class="string">'冬菱'</span>, <span class="string">'紫安'</span>, <span class="string">'宛凝'</span>, <span class="string">'雨雪'</span>, <span class="string">'易真'</span>, <span class="string">'安荷'</span>, <span class="string">'静竹'</span>, <span class="string">'代柔'</span>, <span class="string">'丹秋'</span>, <span class="string">'绮梅'</span>, <span class="string">'依白'</span>, <span class="string">'凝荷'</span>, <span class="string">'幼珊'</span>, <span class="string">'忆彤'</span>, <span class="string">'凌青'</span>, <span class="string">'之桃'</span>, <span class="string">'芷荷'</span>, <span class="string">'听荷'</span>, <span class="string">'代玉'</span>, <span class="string">'念珍'</span>, <span class="string">'梦菲'</span>, <span class="string">'夜春'</span>, <span class="string">'千秋'</span>, <span class="string">'白秋'</span>, <span class="string">'谷菱'</span>, <span class="string">'飞松'</span>, <span class="string">'初瑶'</span>, <span class="string">'惜灵'</span>, <span class="string">'梦易'</span>, <span class="string">'新瑶'</span>, <span class="string">'曼梅'</span>, <span class="string">'碧曼'</span>, <span class="string">'友瑶'</span>, <span class="string">'雨兰'</span>, <span class="string">'夜柳'</span>, <span class="string">'芷珍'</span>, <span class="string">'含芙'</span>, <span class="string">'夜云'</span>, <span class="string">'依萱'</span>, <span class="string">'凝雁'</span>, <span class="string">'以莲'</span>, <span class="string">'安南'</span>, <span class="string">'幼晴'</span>, <span class="string">'尔琴'</span>, <span class="string">'飞阳'</span>, <span class="string">'白凡'</span>, <span class="string">'沛萍'</span>, <span class="string">'雪瑶'</span>, <span class="string">'向卉'</span>, <span class="string">'采文'</span>, <span class="string">'乐珍'</span>, <span class="string">'寒荷'</span>, <span class="string">'觅双'</span>, <span class="string">'白桃'</span>, <span class="string">'安卉'</span>, <span class="string">'迎曼'</span>, <span class="string">'盼雁'</span>, <span class="string">'乐松'</span>, <span class="string">'涵山'</span>, <span class="string">'问枫'</span>, <span class="string">'以柳'</span>, <span class="string">'含海'</span>, <span class="string">'翠曼'</span>, <span class="string">'忆梅'</span>, <span class="string">'涵柳'</span>, <span class="string">'海蓝'</span>, <span class="string">'晓曼'</span>, <span class="string">'代珊'</span>, <span class="string">'忆丹'</span>, <span class="string">'静芙'</span>, <span class="string">'绮兰'</span>, <span class="string">'梦安'</span>, <span class="string">'紫丝'</span>, <span class="string">'千雁'</span>, <span class="string">'凝珍'</span>, <span class="string">'香萱'</span>, <span class="string">'梦容'</span>, <span class="string">'冷雁'</span>, <span class="string">'飞柏'</span>, <span class="string">'天真'</span>, <span class="string">'翠琴'</span>, <span class="string">'寄真'</span>, <span class="string">'秋荷'</span>, <span class="string">'代珊'</span>, <span class="string">'初雪'</span>, <span class="string">'雅柏'</span>, <span class="string">'怜容'</span>, <span class="string">'如风'</span>, <span class="string">'南露'</span>, <span class="string">'紫易'</span>, <span class="string">'冰凡'</span>, <span class="string">'海雪'</span>, <span class="string">'语蓉'</span>, <span class="string">'碧玉'</span>, <span class="string">'语风'</span>, <span class="string">'凝梦'</span>, <span class="string">'从雪'</span>, <span class="string">'白枫'</span>, <span class="string">'傲云'</span>, <span class="string">'白梅'</span>, <span class="string">'念露'</span>, <span class="string">'慕凝'</span>, <span class="string">'雅柔'</span>, <span class="string">'盼柳'</span>, <span class="string">'半青'</span>, <span class="string">'从霜'</span>, <span class="string">'怀柔'</span>, <span class="string">'怜晴'</span>, <span class="string">'夜蓉'</span>, <span class="string">'代双'</span>, <span class="string">'以南'</span>, <span class="string">'若菱'</span>, <span class="string">'芷文'</span>, <span class="string">'南晴'</span>, <span class="string">'梦寒'</span>, <span class="string">'初翠'</span>, <span class="string">'灵波'</span>, <span class="string">'问夏'</span>, <span class="string">'惜海'</span>, <span class="string">'亦旋'</span>, <span class="string">'沛芹'</span>, <span class="string">'幼萱'</span>, <span class="string">'白凝'</span>, <span class="string">'初露'</span>, <span class="string">'迎海'</span>, <span class="string">'绮玉'</span>, <span class="string">'凌香'</span>, <span class="string">'寻芹'</span>, <span class="string">'秋柳'</span>, <span class="string">'尔白'</span>, <span class="string">'映真'</span>, <span class="string">'含雁'</span>, <span class="string">'寒松'</span>, <span class="string">'寻雪'</span>, <span class="string">'青烟'</span>, <span class="string">'问蕊'</span>, <span class="string">'灵阳'</span>, <span class="string">'雪巧'</span>, <span class="string">'丹萱'</span>, <span class="string">'凡双'</span>, <span class="string">'孤萍'</span>, <span class="string">'紫菱'</span>, <span class="string">'寻凝'</span>, <span class="string">'傲柏'</span>, <span class="string">'傲儿'</span>, <span class="string">'友容'</span>, <span class="string">'灵枫'</span>, <span class="string">'尔丝'</span>, <span class="string">'曼凝'</span>, <span class="string">'若蕊'</span>, <span class="string">'问丝'</span>, <span class="string">'思枫'</span>, <span class="string">'水卉'</span>, <span class="string">'问梅'</span>, <span class="string">'念寒'</span>, <span class="string">'诗双'</span>, <span class="string">'翠霜'</span>, <span class="string">'夜香'</span>, <span class="string">'寒蕾'</span>, <span class="string">'凡阳'</span>, <span class="string">'冷玉'</span>, <span class="string">'平彤'</span>, <span class="string">'语薇'</span>, <span class="string">'幻珊'</span>, <span class="string">'紫夏'</span>, <span class="string">'凌波'</span>, <span class="string">'芷蝶'</span>, <span class="string">'丹南'</span>, <span class="string">'之双'</span>, <span class="string">'凡波'</span>, <span class="string">'思雁'</span>, <span class="string">'白莲'</span>, <span class="string">'从菡'</span>, <span class="string">'如容'</span>, <span class="string">'采柳'</span>, <span class="string">'沛岚'</span>, <span class="string">'惜儿'</span>, <span class="string">'夜玉'</span>, <span class="string">'水儿'</span>, <span class="string">'半凡'</span>, <span class="string">'语海'</span>, <span class="string">'听莲'</span>, <span class="string">'幻枫'</span>, <span class="string">'念柏'</span>, <span class="string">'冰珍'</span>, <span class="string">'思山'</span>, <span class="string">'凝蕊'</span>, <span class="string">'天玉'</span>, <span class="string">'思萱'</span>, <span class="string">'向梦'</span>, <span class="string">'笑南'</span>, <span class="string">'夏旋'</span>, <span class="string">'之槐'</span>, <span class="string">'元灵'</span>, <span class="string">'以彤'</span>, <span class="string">'采萱'</span>, <span class="string">'巧曼'</span>, <span class="string">'绿兰'</span>, <span class="string">'平蓝'</span>, <span class="string">'问萍'</span>, <span class="string">'绿蓉'</span>, <span class="string">'靖柏。迎蕾'</span>, <span class="string">'碧曼'</span>, <span class="string">'思卉'</span>, <span class="string">'白柏'</span>, <span class="string">'妙菡'</span>, <span class="string">'怜阳'</span>, <span class="string">'雨柏'</span>, <span class="string">'雁菡'</span>, <span class="string">'梦之'</span>, <span class="string">'又莲'</span>, <span class="string">'乐荷'</span>, <span class="string">'寒天'</span>, <span class="string">'凝琴'</span>, <span class="string">'书南'</span>, <span class="string">'映天'</span>, <span class="string">'白梦'</span>, <span class="string">'初瑶'</span>, <span class="string">'平露'</span>, <span class="string">'含巧'</span>, <span class="string">'慕蕊'</span>, <span class="string">'半莲'</span>, <span class="string">'醉卉'</span>, <span class="string">'天菱'</span>, <span class="string">'青雪'</span>, <span class="string">'雅旋'</span>, <span class="string">'巧荷'</span>, <span class="string">'飞丹'</span>, <span class="string">'若灵'</span>, <span class="string">'尔云'</span>, <span class="string">'幻天'</span>, <span class="string">'诗兰'</span>, <span class="string">'青梦'</span>, <span class="string">'海菡'</span>, <span class="string">'灵槐'</span>, <span class="string">'忆秋'</span>, <span class="string">'寒凝'</span>, <span class="string">'凝芙'</span>, <span class="string">'绮山'</span>, <span class="string">'静白'</span>, <span class="string">'尔蓉'</span>, <span class="string">'尔冬'</span>, <span class="string">'映萱'</span>, <span class="string">'白筠'</span>, <span class="string">'冰双'</span>, <span class="string">'访彤'</span>, <span class="string">'绿柏'</span>, <span class="string">'夏云'</span>, <span class="string">'笑翠'</span>, <span class="string">'晓灵'</span>, <span class="string">'含双'</span>, <span class="string">'盼波'</span>, <span class="string">'以云'</span>, <span class="string">'怜翠'</span>, <span class="string">'雁风'</span>, <span class="string">'之卉'</span>, <span class="string">'平松'</span>, <span class="string">'问儿'</span>, <span class="string">'绿柳'</span>, <span class="string">'如蓉'</span>, <span class="string">'曼容'</span>, <span class="string">'天晴'</span>, <span class="string">'丹琴'</span>, <span class="string">'惜天'</span>, <span class="string">'寻琴'</span>, <span class="string">'依瑶'</span>, <span class="string">'涵易'</span>, <span class="string">'忆灵'</span>, <span class="string">'从波'</span>, <span class="string">'依柔'</span>, <span class="string">'问兰'</span>, <span class="string">'山晴'</span>, <span class="string">'怜珊'</span>, <span class="string">'之云'</span>, <span class="string">'飞双'</span>, <span class="string">'傲白'</span>, <span class="string">'沛春'</span>, <span class="string">'雨南'</span>, <span class="string">'梦之'</span>, <span class="string">'笑阳'</span>, <span class="string">'代容'</span>, <span class="string">'友琴'</span>, <span class="string">'雁梅'</span>, <span class="string">'友桃'</span>, <span class="string">'从露'</span>, <span class="string">'语柔'</span>, <span class="string">'傲玉'</span>, <span class="string">'觅夏'</span>, <span class="string">'晓蓝'</span>, <span class="string">'新晴'</span>, <span class="string">'雨莲'</span>, <span class="string">'凝旋'</span>, <span class="string">'绿旋'</span>, <span class="string">'幻香'</span>, <span class="string">'觅双'</span>, <span class="string">'冷亦'</span>, <span class="string">'忆雪'</span>, <span class="string">'友卉'</span>, <span class="string">'幻翠'</span>, <span class="string">'靖柔'</span>, <span class="string">'寻菱'</span>, <span class="string">'丹翠'</span>, <span class="string">'安阳'</span>, <span class="string">'雅寒'</span>, <span class="string">'惜筠'</span>, <span class="string">'尔安'</span>, <span class="string">'雁易'</span>, <span class="string">'飞瑶'</span>, <span class="string">'夏兰'</span>, <span class="string">'沛蓝'</span>, <span class="string">'静丹'</span>, <span class="string">'山芙'</span>, <span class="string">'笑晴'</span>, <span class="string">'新烟'</span>, <span class="string">'笑旋'</span>, <span class="string">'雁兰'</span>, <span class="string">'凌翠'</span>, <span class="string">'秋莲'</span>, <span class="string">'书桃'</span>, <span class="string">'傲松'</span>, <span class="string">'语儿'</span>, <span class="string">'映菡'</span>, <span class="string">'初曼'</span>, <span class="string">'听云'</span>, <span class="string">'初夏'</span>, <span class="string">'雅香'</span>, <span class="string">'语雪'</span>, <span class="string">'初珍'</span>, <span class="string">'白安'</span>, <span class="string">'冰薇'</span>, <span class="string">'诗槐'</span>, <span class="string">'冷玉'</span>, <span class="string">'冰巧'</span>, <span class="string">'之槐'</span>, <span class="string">'夏寒'</span>, <span class="string">'诗筠'</span>, <span class="string">'新梅'</span>, <span class="string">'白曼'</span>, <span class="string">'安波'</span>, <span class="string">'从阳'</span>, <span class="string">'含桃'</span>, <span class="string">'曼卉'</span>, <span class="string">'笑萍'</span>, <span class="string">'晓露'</span>, <span class="string">'寻菡'</span>, <span class="string">'沛白'</span>, <span class="string">'平灵'</span>, <span class="string">'水彤'</span>, <span class="string">'安彤'</span>, <span class="string">'涵易'</span>, <span class="string">'乐巧'</span>, <span class="string">'依风'</span>, <span class="string">'紫南'</span>, <span class="string">'亦丝'</span>, <span class="string">'易蓉'</span>, <span class="string">'紫萍'</span>, <span class="string">'惜萱'</span>, <span class="string">'诗蕾'</span>, <span class="string">'寻绿'</span>, <span class="string">'诗双'</span>, <span class="string">'寻云'</span>, <span class="string">'孤丹'</span>, <span class="string">'谷蓝'</span>, <span class="string">'山灵'</span>, <span class="string">'幻丝'</span>, <span class="string">'友梅'</span>, <span class="string">'从云'</span>, <span class="string">'雁丝'</span>, <span class="string">'盼旋'</span>, <span class="string">'幼旋'</span>, <span class="string">'尔蓝'</span>, <span class="string">'沛山'</span>, <span class="string">'代丝'</span>, <span class="string">'觅松'</span>, <span class="string">'冰香'</span>, <span class="string">'依玉'</span>, <span class="string">'冰之'</span>, <span class="string">'妙梦'</span>, <span class="string">'以冬'</span>, <span class="string">'曼青'</span>, <span class="string">'冷菱'</span>, <span class="string">'雪曼'</span>, <span class="string">'安白'</span>, <span class="string">'千亦'</span>, <span class="string">'凌蝶'</span>, <span class="string">'又夏'</span>, <span class="string">'南烟。靖易'</span>, <span class="string">'沛凝'</span>, <span class="string">'翠梅'</span>, <span class="string">'书文'</span>, <span class="string">'雪卉'</span>, <span class="string">'乐儿'</span>, <span class="string">'傲丝'</span>, <span class="string">'安青'</span>, <span class="string">'初蝶'</span>, <span class="string">'寄灵'</span>, <span class="string">'惜寒'</span>, <span class="string">'雨竹'</span>, <span class="string">'冬莲'</span>, <span class="string">'绮南'</span>, <span class="string">'翠柏'</span>, <span class="string">'平凡'</span>, <span class="string">'亦玉'</span>, <span class="string">'孤兰'</span>, <span class="string">'秋珊'</span>, <span class="string">'新筠'</span>, <span class="string">'半芹'</span>, <span class="string">'夏瑶'</span>, <span class="string">'念文'</span>, <span class="string">'晓丝'</span>, <span class="string">'涵蕾'</span>, <span class="string">'雁凡'</span>, <span class="string">'谷兰'</span>, <span class="string">'灵凡'</span>, <span class="string">'凝云'</span>, <span class="string">'曼云'</span>, <span class="string">'丹彤'</span>, <span class="string">'南霜'</span>, <span class="string">'夜梦'</span>, <span class="string">'从筠'</span>, <span class="string">'雁芙'</span>, <span class="string">'语蝶'</span>, <span class="string">'依波'</span>, <span class="string">'晓旋'</span>, <span class="string">'念之'</span>, <span class="string">'盼芙'</span>, <span class="string">'曼安'</span>, <span class="string">'采珊'</span>, <span class="string">'初柳'</span>, <span class="string">'迎天'</span>, <span class="string">'曼安'</span>, <span class="string">'南珍'</span>, <span class="string">'妙芙'</span>, <span class="string">'语柳'</span>, <span class="string">'含莲'</span>, <span class="string">'晓筠'</span>, <span class="string">'夏山'</span>, <span class="string">'尔容'</span>, <span class="string">'念梦'</span>, <span class="string">'傲南'</span>, <span class="string">'问薇'</span>, <span class="string">'雨灵'</span>, <span class="string">'凝安'</span>, <span class="string">'冰海'</span>, <span class="string">'初珍'</span>, <span class="string">'宛菡'</span>, <span class="string">'冬卉'</span>, <span class="string">'盼晴'</span>, <span class="string">'冷荷'</span>, <span class="string">'寄翠'</span>, <span class="string">'幻梅'</span>, <span class="string">'如凡'</span>, <span class="string">'语梦'</span>, <span class="string">'易梦'</span>, <span class="string">'千柔'</span>, <span class="string">'向露'</span>, <span class="string">'梦玉'</span>, <span class="string">'傲霜'</span>, <span class="string">'依霜'</span>, <span class="string">'灵松'</span>, <span class="string">'诗桃'</span>, <span class="string">'书蝶'</span>, <span class="string">'冰蝶'</span>, <span class="string">'山槐'</span>, <span class="string">'以晴'</span>, <span class="string">'友易'</span>, <span class="string">'梦桃'</span>, <span class="string">'香菱'</span>, <span class="string">'孤云'</span>, <span class="string">'水蓉'</span>, <span class="string">'雅容'</span>, <span class="string">'飞烟'</span>, <span class="string">'雁荷'</span>, <span class="string">'代芙'</span>, <span class="string">'醉易'</span>, <span class="string">'夏烟'</span>, <span class="string">'依秋'</span>, <span class="string">'依波'</span>, <span class="string">'紫萱'</span>, <span class="string">'涵易'</span>, <span class="string">'忆之'</span>, <span class="string">'幻巧'</span>, <span class="string">'水风'</span>, <span class="string">'安寒'</span>, <span class="string">'白亦'</span>, <span class="string">'怜雪'</span>, <span class="string">'听南'</span>, <span class="string">'念蕾'</span>, <span class="string">'梦竹'</span>, <span class="string">'千凡'</span>, <span class="string">'寄琴'</span>, <span class="string">'采波'</span>, <span class="string">'元冬'</span>, <span class="string">'思菱'</span>, <span class="string">'平卉'</span>, <span class="string">'笑柳'</span>, <span class="string">'雪卉'</span>, <span class="string">'谷梦'</span>, <span class="string">'绿蝶'</span>, <span class="string">'飞荷'</span>, <span class="string">'平安'</span>, <span class="string">'孤晴'</span>, <span class="string">'芷荷'</span>, <span class="string">'曼冬'</span>, <span class="string">'尔槐'</span>, <span class="string">'以旋'</span>, <span class="string">'绿蕊'</span>, <span class="string">'初夏'</span>, <span class="string">'依丝'</span>, <span class="string">'怜南'</span>, <span class="string">'千山'</span>, <span class="string">'雨安'</span>, <span class="string">'水风'</span>, <span class="string">'寄柔'</span>, <span class="string">'幼枫'</span>, <span class="string">'凡桃'</span>, <span class="string">'新儿'</span>, <span class="string">'夏波'</span>, <span class="string">'雨琴'</span>, <span class="string">'静槐'</span>, <span class="string">'元槐'</span>, <span class="string">'映阳'</span>, <span class="string">'飞薇'</span>, <span class="string">'小凝'</span>, <span class="string">'映寒'</span>, <span class="string">'傲菡'</span>, <span class="string">'谷蕊'</span>, <span class="string">'笑槐'</span>, <span class="string">'飞兰'</span>, <span class="string">'笑卉'</span>, <span class="string">'迎荷'</span>, <span class="string">'元冬'</span>, <span class="string">'书竹'</span>, <span class="string">'半烟'</span>, <span class="string">'绮波'</span>, <span class="string">'小之'</span>, <span class="string">'觅露'</span>, <span class="string">'夜雪'</span>, <span class="string">'寒梦'</span>, <span class="string">'尔风'</span>, <span class="string">'白梅'</span>, <span class="string">'雨旋'</span>, <span class="string">'芷珊'</span>, <span class="string">'山彤'</span>, <span class="string">'尔柳'</span>, <span class="string">'沛柔'</span>, <span class="string">'灵萱'</span>, <span class="string">'沛凝'</span>, <span class="string">'白容'</span>, <span class="string">'乐蓉'</span>, <span class="string">'映安'</span>, <span class="string">'依云'</span>, <span class="string">'映冬'</span>, <span class="string">'凡雁'</span>, <span class="string">'梦秋'</span>, <span class="string">'醉柳'</span>, <span class="string">'梦凡'</span>, <span class="string">'若云'</span>, <span class="string">'元容'</span>, <span class="string">'怀蕾'</span>, <span class="string">'灵寒'</span>, <span class="string">'天薇'</span>, <span class="string">'白风'</span>, <span class="string">'访波'</span>, <span class="string">'亦凝'</span>, <span class="string">'易绿'</span>, <span class="string">'夜南'</span>, <span class="string">'曼凡'</span>, <span class="string">'亦巧'</span>, <span class="string">'青易。冰真'</span>, <span class="string">'白萱'</span>, <span class="string">'友安'</span>, <span class="string">'诗翠'</span>, <span class="string">'雪珍'</span>, <span class="string">'海之'</span>, <span class="string">'小蕊'</span>, <span class="string">'又琴'</span>, <span class="string">'香彤'</span>, <span class="string">'语梦'</span>, <span class="string">'惜蕊'</span>, <span class="string">'迎彤'</span>, <span class="string">'沛白'</span>, <span class="string">'雁山'</span>, <span class="string">'易蓉'</span>, <span class="string">'雪晴'</span>, <span class="string">'诗珊'</span>, <span class="string">'冰绿'</span>, <span class="string">'半梅'</span>, <span class="string">'笑容'</span>, <span class="string">'沛凝'</span>, <span class="string">'念瑶'</span>, <span class="string">'如冬'</span>, <span class="string">'向真'</span>, <span class="string">'从蓉'</span>, <span class="string">'亦云'</span>, <span class="string">'向雁'</span>, <span class="string">'尔蝶'</span>, <span class="string">'冬易'</span>, <span class="string">'丹亦'</span>, <span class="string">'夏山'</span>, <span class="string">'醉香'</span>, <span class="string">'盼夏'</span>, <span class="string">'孤菱'</span>, <span class="string">'安莲'</span>, <span class="string">'问凝'</span>, <span class="string">'冬萱'</span>, <span class="string">'晓山'</span>, <span class="string">'雁蓉'</span>, <span class="string">'梦蕊'</span>, <span class="string">'山菡'</span>, <span class="string">'南莲'</span>, <span class="string">'飞双'</span>, <span class="string">'凝丝'</span>, <span class="string">'思萱'</span>, <span class="string">'怀梦'</span>, <span class="string">'雨梅'</span>, <span class="string">'冷霜'</span>, <span class="string">'向松'</span>, <span class="string">'迎丝'</span>, <span class="string">'迎梅'</span>, <span class="string">'听双'</span>, <span class="string">'山蝶'</span>, <span class="string">'夜梅'</span>, <span class="string">'醉冬'</span>, <span class="string">'雨筠'</span>, <span class="string">'平文'</span>, <span class="string">'青文'</span>, <span class="string">'半蕾'</span>, <span class="string">'幼菱'</span>, <span class="string">'寻梅'</span>, <span class="string">'含之'</span>, <span class="string">'香之'</span>, <span class="string">'含蕊'</span>, <span class="string">'亦玉'</span>, <span class="string">'靖荷'</span>, <span class="string">'碧萱'</span>, <span class="string">'寒云'</span>, <span class="string">'向南'</span>, <span class="string">'书雁'</span>, <span class="string">'怀薇'</span>, <span class="string">'思菱'</span>, <span class="string">'忆文'</span>, <span class="string">'若山'</span>, <span class="string">'向秋'</span>, <span class="string">'凡白'</span>, <span class="string">'绮烟'</span>, <span class="string">'从蕾'</span>, <span class="string">'天曼'</span>, <span class="string">'又亦'</span>, <span class="string">'依琴'</span>, <span class="string">'曼彤'</span>, <span class="string">'沛槐'</span>, <span class="string">'又槐'</span>, <span class="string">'元绿'</span>, <span class="string">'安珊'</span>, <span class="string">'夏之'</span>, <span class="string">'易槐'</span>, <span class="string">'宛亦'</span>, <span class="string">'白翠'</span>, <span class="string">'丹云'</span>, <span class="string">'问寒'</span>, <span class="string">'易文'</span>, <span class="string">'傲易'</span>, <span class="string">'青旋'</span>, <span class="string">'思真'</span>, <span class="string">'妙之'</span>, <span class="string">'半双'</span>, <span class="string">'若翠'</span>, <span class="string">'初兰'</span>, <span class="string">'怀曼'</span>, <span class="string">'惜萍'</span>, <span class="string">'初之'</span>, <span class="string">'宛丝'</span>, <span class="string">'幻儿'</span>, <span class="string">'千风'</span>, <span class="string">'天蓉'</span>, <span class="string">'雅青'</span>, <span class="string">'寄文'</span>, <span class="string">'代天'</span>, <span class="string">'惜珊'</span>, <span class="string">'向薇'</span>, <span class="string">'冬灵'</span>, <span class="string">'惜芹'</span>, <span class="string">'凌青'</span>, <span class="string">'谷芹'</span>, <span class="string">'雁桃'</span>, <span class="string">'映雁'</span>, <span class="string">'书兰'</span>, <span class="string">'寄风'</span>, <span class="string">'访烟'</span>, <span class="string">'绮晴'</span>, <span class="string">'傲柔'</span>, <span class="string">'寄容'</span>, <span class="string">'以珊'</span>, <span class="string">'紫雪'</span>, <span class="string">'芷容'</span>, <span class="string">'书琴'</span>, <span class="string">'寻桃'</span>, <span class="string">'涵阳'</span>, <span class="string">'怀寒'</span>, <span class="string">'易云'</span>, <span class="string">'采蓝'</span>, <span class="string">'代秋'</span>, <span class="string">'惜梦'</span>, <span class="string">'尔烟'</span>, <span class="string">'谷槐'</span>, <span class="string">'怀莲'</span>, <span class="string">'涵菱'</span>, <span class="string">'水蓝'</span>, <span class="string">'访冬'</span>, <span class="string">'半兰'</span>, <span class="string">'又柔'</span>, <span class="string">'冬卉'</span>, <span class="string">'安双'</span>, <span class="string">'冰岚'</span>, <span class="string">'香薇'</span>, <span class="string">'语芹'</span>, <span class="string">'静珊'</span>, <span class="string">'幻露'</span>, <span class="string">'访天'</span>, <span class="string">'静柏'</span>, <span class="string">'凌丝'</span>, <span class="string">'小翠'</span>, <span class="string">'雁卉'</span>, <span class="string">'访文'</span>, <span class="string">'凌文'</span>, <span class="string">'芷云'</span>, <span class="string">'思柔'</span>, <span class="string">'巧凡'</span>, <span class="string">'慕山'</span>, <span class="string">'依云'</span>, <span class="string">'千柳'</span>, <span class="string">'从凝'</span>, <span class="string">'安梦'</span>, <span class="string">'香旋'</span>, <span class="string">'映天'</span>, <span class="string">'安柏'</span>, <span class="string">'平萱'</span>, <span class="string">'以筠'</span>, <span class="string">'忆曼'</span>, <span class="string">'新竹'</span>, <span class="string">'绮露'</span>, <span class="string">'觅儿'</span>, <span class="string">'碧蓉'</span>, <span class="string">'白竹'</span>, <span class="string">'飞兰'</span>, <span class="string">'曼雁'</span>, <span class="string">'雁露'</span>, <span class="string">'凝冬'</span>, <span class="string">'含灵'</span>, <span class="string">'初阳'</span>, <span class="string">'海秋'</span>, <span class="string">'冰双'</span>, <span class="string">'绿兰'</span>, <span class="string">'盼易'</span>, <span class="string">'思松'</span>, <span class="string">'梦山'</span>, <span class="string">'友灵'</span>, <span class="string">'绿竹'</span>, <span class="string">'灵安'</span>, <span class="string">'凌柏'</span>, <span class="string">'秋柔'</span>, <span class="string">'又蓝'</span>, <span class="string">'尔竹'</span>, <span class="string">'天蓝'</span>, <span class="string">'青枫'</span>, <span class="string">'问芙'</span>, <span class="string">'语海'</span>, <span class="string">'灵珊'</span>, <span class="string">'凝丹'</span>, <span class="string">'小蕾'</span>, <span class="string">'迎夏'</span>, <span class="string">'水之'</span>, <span class="string">'飞珍'</span>, <span class="string">'冰夏'</span>, <span class="string">'亦竹'</span>, <span class="string">'飞莲'</span>, <span class="string">'海白'</span>, <span class="string">'元蝶'</span>, <span class="string">'芷天'</span>, <span class="string">'怀绿'</span>, <span class="string">'尔容'</span>, <span class="string">'元芹'</span>, <span class="string">'若云'</span>, <span class="string">'寒烟'</span>, <span class="string">'听筠'</span>, <span class="string">'采梦'</span>, <span class="string">'凝莲'</span>, <span class="string">'元彤'</span>, <span class="string">'觅山'</span>, <span class="string">'代桃'</span>, <span class="string">'冷之'</span>, <span class="string">'盼秋'</span>, <span class="string">'秋寒'</span>, <span class="string">'慕蕊'</span>, <span class="string">'海亦'</span>, <span class="string">'初晴'</span>, <span class="string">'巧蕊'</span>, <span class="string">'听安'</span>, <span class="string">'芷雪'</span>, <span class="string">'以松'</span>, <span class="string">'梦槐'</span>, <span class="string">'寒梅'</span>, <span class="string">'香岚'</span>, <span class="string">'寄柔'</span>, <span class="string">'映冬'</span>, <span class="string">'孤容'</span>, <span class="string">'晓蕾'</span>, <span class="string">'安萱'</span>, <span class="string">'听枫'</span>, <span class="string">'夜绿'</span>, <span class="string">'雪莲'</span>, <span class="string">'从丹'</span>, <span class="string">'碧蓉'</span>, <span class="string">'绮琴'</span>, <span class="string">'雨文'</span>, <span class="string">'幼荷'</span>, <span class="string">'青柏'</span>, <span class="string">'初蓝'</span>, <span class="string">'忆安'</span>, <span class="string">'盼晴'</span>, <span class="string">'寻冬'</span>, <span class="string">'雪珊'</span>, <span class="string">'梦寒'</span>, <span class="string">'迎南'</span>, <span class="string">'如彤'</span>, <span class="string">'采枫'</span>, <span class="string">'若雁'</span>, <span class="string">'翠阳'</span>, <span class="string">'沛容'</span>, <span class="string">'幻翠'</span>, <span class="string">'山兰'</span>, <span class="string">'芷波'</span>, <span class="string">'雪瑶'</span>, <span class="string">'寄云'</span>, <span class="string">'慕卉'</span>, <span class="string">'冷松'</span>, <span class="string">'涵梅'</span>, <span class="string">'书白'</span>, <span class="string">'乐天'</span>, <span class="string">'雁卉'</span>, <span class="string">'宛秋'</span>, <span class="string">'傲旋'</span>, <span class="string">'新之'</span>, <span class="string">'凡儿'</span>, <span class="string">'夏真'</span>, <span class="string">'静枫'</span>, <span class="string">'乐双'</span>, <span class="string">'白玉'</span>, <span class="string">'问玉'</span>, <span class="string">'寄松'</span>, <span class="string">'丹蝶'</span>, <span class="string">'元瑶'</span>, <span class="string">'冰蝶'</span>, <span class="string">'访曼'</span>, <span class="string">'代灵'</span>, <span class="string">'芷烟'</span>, <span class="string">'白易'</span>, <span class="string">'尔阳'</span>, <span class="string">'怜烟'</span>, <span class="string">'平卉'</span>, <span class="string">'丹寒'</span>, <span class="string">'访梦'</span>, <span class="string">'绿凝'</span>, <span class="string">'冰菱'</span>, <span class="string">'语蕊'</span>, <span class="string">'思烟'</span>, <span class="string">'忆枫'</span>, <span class="string">'映菱'</span>, <span class="string">'凌兰'</span>, <span class="string">'曼岚'</span>, <span class="string">'若枫'</span>, <span class="string">'傲薇'</span>, <span class="string">'凡灵'</span>, <span class="string">'乐蕊'</span>, <span class="string">'秋灵'</span>, <span class="string">'谷槐'</span>, <span class="string">'觅云'</span>,</span><br><span class="line">                            <span class="string">'振海'</span>, <span class="string">'振国'</span>, <span class="string">'正德'</span>, <span class="string">'正浩'</span>, <span class="string">'伟博'</span>, <span class="string">'伟毅'</span>, <span class="string">'伟才'</span>, <span class="string">'伟诚'</span>, <span class="string">'伟茂'</span>, <span class="string">'伟懋'</span>, <span class="string">'伟祺'</span>, <span class="string">'伟彦'</span>, <span class="string">'伟晔'</span>, <span class="string">'荣轩'</span>, <span class="string">'锐泽'</span>, <span class="string">'锐真'</span>, <span class="string">'锐志'</span>, <span class="string">'锐智'</span>, <span class="string">'睿博'</span>, <span class="string">'睿才'</span>, <span class="string">'睿诚'</span>, <span class="string">'睿慈'</span>, <span class="string">'锐达'</span>, <span class="string">'锐锋'</span>, <span class="string">'锐翰'</span>, <span class="string">'锐进'</span>, <span class="string">'锐精'</span>, <span class="string">'锐立'</span>, <span class="string">'锐利'</span>, <span class="string">'锐思'</span>, <span class="string">'锐逸'</span>, <span class="string">'锐意'</span>, <span class="string">'齐骐'</span>, <span class="string">'齐骥'</span>, <span class="string">'天骐'</span>, <span class="string">'天骥'</span>, <span class="string">'乐山'</span>, <span class="string">'乐水'</span>, <span class="string">'立家'</span>, <span class="string">'立业'</span>, <span class="string">'保国'</span>, <span class="string">'卫国'</span>, <span class="string">'建功'</span>, <span class="string">'建业'</span>, <span class="string">'安道'</span>, <span class="string">'乐道'</span>, <span class="string">'卓群'</span>, <span class="string">'超群'</span>, <span class="string">'俊雄'</span>, <span class="string">'俊雅'</span>, <span class="string">'俊彦'</span>, <span class="string">'俊逸'</span>, <span class="string">'成仁'</span>, <span class="string">'成双'</span>, <span class="string">'成天'</span>, <span class="string">'成文'</span>, <span class="string">'成业'</span>, <span class="string">'成益'</span>, <span class="string">'嘉澍'</span>, <span class="string">'嘉熙'</span>, <span class="string">'嘉禧'</span>, <span class="string">'嘉祥'</span>, <span class="string">'嘉歆'</span>, <span class="string">'嘉许'</span>, <span class="string">'俊悟'</span>, <span class="string">'俊晤'</span>, <span class="string">'俊侠'</span>, <span class="string">'俊贤'</span>, <span class="string">'嘉年'</span>, <span class="string">'嘉平'</span>, <span class="string">'嘉庆'</span>, <span class="string">'嘉荣'</span>, <span class="string">'嘉容'</span>, <span class="string">'嘉瑞'</span>, <span class="string">'承福'</span>, <span class="string">'承基'</span>, <span class="string">'承教'</span>, <span class="string">'承平'</span>, <span class="string">'成化'</span>, <span class="string">'成济'</span>, <span class="string">'成礼'</span>, <span class="string">'成龙'</span>,</span><br><span class="line">                            <span class="string">'知国'</span>, <span class="string">'君宇'</span>, <span class="string">'泽城'</span>, <span class="string">'温谨'</span>, <span class="string">'风宇'</span>, <span class="string">'君冠'</span>, <span class="string">'文德'</span>, <span class="string">'棋苑'</span>, <span class="string">'轩峻'</span>, <span class="string">'知彰'</span>, <span class="string">'泽韶'</span>, <span class="string">'尚兴'</span>, <span class="string">'远辰 辉轩'</span>, <span class="string">'荣茂'</span>, <span class="string">'圣瀚'</span>, <span class="string">'世翰'</span>, <span class="string">'彬逸'</span>, <span class="string">'鸿颜'</span>, <span class="string">'泽雷'</span>, <span class="string">'宇哲'</span>, <span class="string">'展信'</span>, <span class="string">'晋茂'</span>, <span class="string">'远熙'</span>, <span class="string">'弘瑞'</span>, <span class="string">'弘霖 圣江'</span>, <span class="string">'棋泽'</span>, <span class="string">'弘德'</span>, <span class="string">'轩诚'</span>, <span class="string">'博羽'</span>, <span class="string">'晋刚'</span>, <span class="string">'晋城'</span>, <span class="string">'杰邦'</span>, <span class="string">'启明'</span>, <span class="string">'博恒'</span>, <span class="string">'泽胜'</span>, <span class="string">'昌裕'</span>, <span class="string">'杰玮 德鸿'</span>, <span class="string">'智旭'</span>, <span class="string">'哲城'</span>, <span class="string">'博浩'</span>, <span class="string">'依平'</span>, <span class="string">'泽拓'</span>, <span class="string">'泰耀'</span>, <span class="string">'德桦'</span>, <span class="string">'鸿灿'</span>, <span class="string">'伟耀'</span>, <span class="string">'浩善'</span>, <span class="string">'伯灿'</span>, <span class="string">'月硕 卓耀'</span>, <span class="string">'秀方'</span>, <span class="string">'鸿祺'</span>, <span class="string">'尚林'</span>, <span class="string">'建琛'</span>, <span class="string">'锐翔'</span>, <span class="string">'远志'</span>, <span class="string">'彬琪'</span>, <span class="string">'靖元'</span>, <span class="string">'森晖'</span>, <span class="string">'景宸'</span>, <span class="string">'朋宸'</span>, <span class="string">'淇方 峻浩'</span>, <span class="string">'祉鑫'</span>, <span class="string">'超耿'</span>, <span class="string">'灿轩'</span>, <span class="string">'柯昊'</span>, <span class="string">'志天'</span>, <span class="string">'文崇'</span>, <span class="string">'瑾方'</span>, <span class="string">'楠睿'</span>, <span class="string">'琪硕'</span></span><br><span class="line">                        ];</span><br><span class="line">                        names.forEach(<span class="keyword">async</span> (name) =&gt; &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    <span class="keyword">let</span> reptileUrl = <span class="string">`https://www.goodstudydayup.com:1443/wnl/H5Test/nameresult?tid=<span class="subst">$&#123;tid&#125;</span>&amp;name=<span class="subst">$&#123;name&#125;</span>&amp;op=<span class="subst">$&#123;op&#125;</span>`</span>;</span><br><span class="line">                                    <span class="keyword">let</span> r1 = <span class="keyword">await</span> superagent.get(reptileUrl);</span><br><span class="line">                                    <span class="keyword">let</span> o1 = <span class="built_in">JSON</span>.parse(r1.text);</span><br><span class="line">                                    <span class="keyword">if</span> (o1.data.title) &#123;                                        </span><br><span class="line">                                        <span class="comment">//let flag = await db.Wnl.find(&#123; 'data.title': o1.data.title &#125;);</span></span><br><span class="line">                                        <span class="comment">//if ( flag.length === 0 ) &#123;</span></span><br><span class="line">                                            o1.data.tid = tid;</span><br><span class="line">                                            o1.data.op = op;</span><br><span class="line">                                            o1.data.name = name;    <span class="built_in">console</span>.log(o1);</span><br><span class="line">                                            db.Wnl.create(o1);</span><br><span class="line">                                        <span class="comment">//&#125;</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">                        &#125;);                        </span><br><span class="line">                <span class="comment">//    &#125;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>运行完上面的代码，经过我的测试总计会拿到大概一万条左右的数据。<br>然而这里面却又很多重复的数据。重复的数据会对我们分析来说没有价值。这里就要考虑如何清洗我们的数据。 所以这里先要对数据做持久化处理。 不然我们怎么清洗数据呢？ 持久化数据我们一般会选择写文件或存数据库。 这里根据我们的数据结构(json数据)我们选择MongoDB数据库。</p></blockquote><h3 id="接下来我们开始清洗数据"><a href="#接下来我们开始清洗数据" class="headerlink" title="接下来我们开始清洗数据"></a>接下来我们开始清洗数据</h3><h4 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">if(false) &#123;    console.log(&apos;数据去重&apos;);</span><br><span class="line">    (async () =&gt; &#123;</span><br><span class="line">        let data = await db.Wnl.aggregate([</span><br><span class="line">            &#123;</span><br><span class="line">                $group: &#123;</span><br><span class="line">                    _id: &apos;$data.title&apos;,</span><br><span class="line">                    count: &#123;</span><br><span class="line">                        $sum: 1</span><br><span class="line">                    &#125;,</span><br><span class="line">                    dups: &#123; $addToSet: &apos;$_id&apos; &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                $match: &#123; count: &#123; $gt: 1 &#125; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]);</span><br><span class="line">    </span><br><span class="line">        data.forEach((it) =&gt; &#123;</span><br><span class="line">            it.dups.shift();</span><br><span class="line">            db.Wnl.remove(&#123; _id: &#123; $in: it.dups &#125; &#125;);</span><br><span class="line">            db.Wnl.deleteMany(&#123;</span><br><span class="line">                _id: &#123; $in: it.dups &#125;</span><br><span class="line">            &#125;, (err, res) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>去玩重结果只剩下几十条数据</p></blockquote><h4 id="数据归档"><a href="#数据归档" class="headerlink" title="数据归档"></a>数据归档</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if(true) &#123;</span><br><span class="line">    let tids = [9,10, 15, 16,21,22,23,24,25,26,27, 29];</span><br><span class="line">    tids.forEach(async (tid) =&gt; &#123;</span><br><span class="line">        </span><br><span class="line">        let data = await db.Wnl.find(&#123;</span><br><span class="line">            &apos;data.tid&apos;: tid</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        util.writeData(data[0].data.tid, data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最终成功归档</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tid10.json tid16.json tid22.json tid24.json tid26.json tid29.json</span><br><span class="line">tid15.json tid21.json tid23.json tid25.json tid27.json tid9.json</span><br></pre></td></tr></table></figure><h3 id="最后我们可以单纯的用拿到的数据，单纯的做点其他事了。"><a href="#最后我们可以单纯的用拿到的数据，单纯的做点其他事了。" class="headerlink" title="最后我们可以单纯的用拿到的数据，单纯的做点其他事了。"></a>最后我们可以单纯的用拿到的数据，单纯的做点其他事了。</h3><blockquote><p>未完待续…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;爬虫实战一例&quot;&gt;&lt;a href=&quot;#爬虫实战一例&quot; class=&quot;headerlink&quot; title=&quot;爬虫实战一例&quot;&gt;&lt;/a&gt;爬虫实战一例&lt;/h1&gt;&lt;h3 id=&quot;爬虫需求由来&quot;&gt;&lt;a href=&quot;#爬虫需求由来&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mongodb query要点</title>
    <link href="https://ryansuen.github.io/2018/08/30/mongodb-query%E8%A6%81%E7%82%B9/"/>
    <id>https://ryansuen.github.io/2018/08/30/mongodb-query要点/</id>
    <published>2018-08-30T01:03:36.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.customer.findOne()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;57636c8e35defe029962107e&quot;),</span><br><span class="line">    &quot;_class&quot; : &quot;com.bu2trip.ticket.model.Customer&quot;,</span><br><span class="line">    &quot;name&quot; : &quot;wang&quot;,</span><br><span class="line">    &quot;phone&quot; : &quot;18408221624&quot;,</span><br><span class="line">    &quot;gender&quot; : 1,</span><br><span class="line">    &quot;birthday&quot; : &quot;1995-7-9&quot;,</span><br><span class="line">    &quot;passport&quot; : &quot;620524&quot;,</span><br><span class="line">    &quot;login_user&quot; : &#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;5760e593086659036b77c124&quot;),</span><br><span class="line">        &quot;email&quot; : &quot;test@bu2trip.com&quot;,</span><br><span class="line">        &quot;phone&quot; : &quot;110&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询整个内嵌文档"><a href="#查询整个内嵌文档" class="headerlink" title="查询整个内嵌文档"></a>查询整个内嵌文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.customer.find(&#123;&quot;login_user&quot; : &#123;&quot;_id&quot;:ObjectId(&quot;5760e593086659036b77c124&quot;), &quot;email&quot; : &quot;test@bu2trip.com&quot;,&quot;phone&quot; : &quot;110&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="只针对内嵌文档的特定键值进行查询如下："><a href="#只针对内嵌文档的特定键值进行查询如下：" class="headerlink" title="只针对内嵌文档的特定键值进行查询如下："></a>只针对内嵌文档的特定键值进行查询如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.customer.findOne(&#123;&quot;login_user.phone&quot;:&quot;110&quot;&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>ps: 嵌套查询并非直接传入嵌套对象，而是出入具体属性的应用路径。</p></blockquote><hr><h3 id="mongodb中没有像mysql中直接去重的指令。如下是找到的去重方法的小小改良版。"><a href="#mongodb中没有像mysql中直接去重的指令。如下是找到的去重方法的小小改良版。" class="headerlink" title="mongodb中没有像mysql中直接去重的指令。如下是找到的去重方法的小小改良版。"></a>mongodb中没有像mysql中直接去重的指令。如下是找到的去重方法的小小改良版。</h3><p>去重用处就很明显了可用于数据清洗。直接上实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> db.Wnl.aggregate([</span><br><span class="line">        &#123;</span><br><span class="line">            $group: &#123;</span><br><span class="line">                _id: <span class="string">'$data.title'</span>,</span><br><span class="line">                count: &#123;</span><br><span class="line">                    $sum: <span class="number">1</span></span><br><span class="line">                &#125;,</span><br><span class="line">                dups: &#123; <span class="attr">$addToSet</span>: <span class="string">'$_id'</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            $match: &#123; <span class="attr">count</span>: &#123; <span class="attr">$gt</span>: <span class="number">1</span> &#125; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    data.forEach(<span class="function">(<span class="params">it</span>) =&gt;</span> &#123;</span><br><span class="line">        it.dups.shift();</span><br><span class="line">        db.Wnl.remove(&#123; <span class="attr">_id</span>: &#123; <span class="attr">$in</span>: it.dups &#125; &#125;);</span><br><span class="line">        db.Wnl.deleteMany(&#123;</span><br><span class="line">            _id: &#123; <span class="attr">$in</span>: it.dups &#125;</span><br><span class="line">        &#125;, (err, res) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="下面来解析："><a href="#下面来解析：" class="headerlink" title="下面来解析："></a>下面来解析：</h3><ol><li>使用aggregate聚合查询重复数据</li></ol><ul><li>$group中是查询条件，根据content、endTime、startTime字段来聚合相同的数据；</li><li>$count用来统计重复出现的次数,$match来过滤没有重复的数据；</li><li>$addToSet将聚合的数据id放入到dups数组中方便后面使用；</li></ul><ol start="2"><li>查询结果使用forEach进行迭代id来删除数据</li></ol><ul><li>shift()作用是剔除队列中第一条id，避免删掉所有的数据；<blockquote><p>PS:注意函数的大小写，mongoDB是严格区分大小写的！！！</p></blockquote></li></ul><blockquote><p>未完待续…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;普通查询&quot;&gt;&lt;a href=&quot;#普通查询&quot; class=&quot;headerlink&quot; title=&quot;普通查询&quot;&gt;&lt;/a&gt;普通查询&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mongodb设置使用密码才能连接</title>
    <link href="https://ryansuen.github.io/2018/08/28/mongodb%E8%AE%BE%E7%BD%AE%E4%BD%BF%E7%94%A8%E5%AF%86%E7%A0%81%E6%89%8D%E8%83%BD%E8%BF%9E%E6%8E%A5/"/>
    <id>https://ryansuen.github.io/2018/08/28/mongodb设置使用密码才能连接/</id>
    <published>2018-08-28T00:42:03.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>mongodb密码和传统数据如mysql等有些区别：</p></blockquote><h3 id="mongodb的用户名和密码是基于特定数据库的，而不是基于整个系统的。所有所有数据库db都需要设置密码"><a href="#mongodb的用户名和密码是基于特定数据库的，而不是基于整个系统的。所有所有数据库db都需要设置密码" class="headerlink" title="mongodb的用户名和密码是基于特定数据库的，而不是基于整个系统的。所有所有数据库db都需要设置密码"></a>mongodb的用户名和密码是基于特定数据库的，而不是基于整个系统的。所有所有数据库db都需要设置密码</h3><h3 id="mongodb要先设置管理用户和密码："><a href="#mongodb要先设置管理用户和密码：" class="headerlink" title="mongodb要先设置管理用户和密码："></a>mongodb要先设置管理用户和密码：</h3><ol start="0"><li><code>mongod</code>开启服务，   <code>mongo</code>连接服务。</li><li><code>&gt; show dbs</code></li><li><code>use admin</code></li><li><p>创建管理员账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这里的db是admin</span><br><span class="line">db.createUser(&#123;user:&apos;admin&apos;,pwd:&apos;yourpassword&apos;,roles:[&#123;role:&apos;root&apos;,db:&apos;admin&apos;&#125;], mechanisms:[&quot;SCRAM-SHA-1&quot;]&#125;)</span><br></pre></td></tr></table></figure></li><li><p>验证第3步用户添加是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.auth(<span class="string">"admin"</span>, <span class="string">"yourpassword"</span>) 如果返回1，则表示成功。</span><br><span class="line"><span class="built_in">exit</span>退出系统</span><br><span class="line">//db.auth()方法理解为 用户的验证功能</span><br></pre></td></tr></table></figure></li><li><p>开启mongodb密码验证。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//新建mongdb配置文件</span><br><span class="line">sudo vi /usr/local/mongodb/mongodb.conf</span><br><span class="line"></span><br><span class="line">//添加配置</span><br><span class="line">#端口号</span><br><span class="line">port = 27017</span><br><span class="line">#数据目录</span><br><span class="line">dbpath = /data/db</span><br><span class="line">#日志目录</span><br><span class="line">logpath = /data/logs/mongodb.log</span><br><span class="line">#设置后台运行</span><br><span class="line">#fork = true</span><br><span class="line">#日志输出方式</span><br><span class="line">logappend = true</span><br><span class="line">#开启密码认证</span><br><span class="line">auth = true</span><br></pre></td></tr></table></figure></li><li><p>重启mongodb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --config /usr/local/mongodb/mongodb.conf</span><br></pre></td></tr></table></figure></li><li><p><code>mongo</code>重新连接服务，用第3步的 管理员账户登录，然后才能用该账户创建其他数据库管理员账号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.auth(&quot;admin&quot;, &quot;yourpassword&quot;)</span><br></pre></td></tr></table></figure></li><li><p>登录管理员账户后，再新建你需要管理的mongodb 数据库的账号密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use spider    //yourdatabase</span><br><span class="line"></span><br><span class="line">//dbOwner 代表数据库所有者角色，拥有最高该数据库最高权限。比如新建索引等</span><br><span class="line">db.createUser(&#123; user: &quot;ryan&quot;, pwd: &quot;yourpassword&quot;, roles: [&#123; role: &quot;dbOwner&quot;, db: &quot;spider&quot; &#125;], mechanisms:[&quot;SCRAM-SHA-1&quot;]&#125;)</span><br><span class="line"></span><br><span class="line">//readWrite该用户只拥有读写权限。</span><br><span class="line">db.createUser(&#123; user: &quot;ryansuen&quot;, pwd: &quot;yourpassword&quot;, roles: [&#123; role: &quot;readWrite&quot;, db: &quot;spider&quot; &#125;], mechanisms:[&quot;SCRAM-SHA-1&quot;]&#125;)</span><br></pre></td></tr></table></figure></li><li><p>现在数据库的用户名和密码就建好了。<br>可以使用：<code>mongodb://youruser2:yourpassword2@localhost/yourdatabase</code>来链接</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;mongodb密码和传统数据如mysql等有些区别：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;mongodb的用户名和密码是基于特定数据库的，而不是基于整个系统的。所有所有数据库db都需要设置密码&quot;&gt;&lt;a href=&quot;#mongodb的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式命令模式</title>
    <link href="https://ryansuen.github.io/2018/07/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://ryansuen.github.io/2018/07/21/设计模式命令模式/</id>
    <published>2018-07-21T00:12:50.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><h3 id="比喻定义"><a href="#比喻定义" class="headerlink" title="比喻定义"></a>比喻定义</h3><blockquote><p>某位客人点餐或着打电话定餐后,服务员把他的需求定在订清单上，然后交给后厨，客人不用关心是哪个厨师帮他炒菜。客人可以要求延迟炒菜，或取消订单，只要订单在厨师便不会忘记。点餐人过多，厨师还可以按单餐的顺序炒菜.</p><p><strong>记录订餐信息的清单，便是命令模式中的命令对象</strong></p></blockquote><blockquote><p>命令模式中的指令指的是一个执行某些特定事情的指令</p></blockquote><h3 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a>常见应用场景</h3><blockquote><p>有时候需求向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。希望用一种松耦合的方式来设计 程序 ，使得请求发者和请求接收者能够消除彼此之间的耦合关系。</p></blockquote><h3 id="Javascript中的命令模式"><a href="#Javascript中的命令模式" class="headerlink" title="Javascript中的命令模式"></a>Javascript中的命令模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindClick = <span class="function"><span class="keyword">function</span>(<span class="params"> button, func </span>) </span>&#123;</span><br><span class="line">button.addEventListener(<span class="string">'click'</span>, func, <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">refresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'refresh menu!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> SubMenu = &#123;</span><br><span class="line">add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'add sub menu!'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">del: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'del sub menu!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bindClick( button1, MenuBar.refresh );</span><br><span class="line">bindClick( button2, SubMenu.add );</span><br><span class="line">bindClick( button3, SubMenu.del );</span><br></pre></td></tr></table></figure><h3 id="upgrade"><a href="#upgrade" class="headerlink" title="upgrade"></a>upgrade</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> button, func </span>) </span>&#123;</span><br><span class="line">button.addEventListener(<span class="string">'click'</span>, func, <span class="literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">refresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'refresh menu!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> receiver </span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">receiver.refresh();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = RefreshMenuBarCommnad( MenuBar );</span><br><span class="line">setCommand( button1, refreshMenuBarCommand );</span><br><span class="line"><span class="comment">// upgrade more</span></span><br><span class="line"><span class="keyword">var</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> receiver </span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">receiver.refresh();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> button, command </span>) </span>&#123;</span><br><span class="line">button.addEventListener( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">command.execute();</span><br><span class="line">&#125;, <span class="literal">false</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="撤销命令"><a href="#撤销命令" class="headerlink" title="撤销命令"></a>撤销命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">'ball'</span>);</span><br><span class="line"><span class="keyword">var</span> pos = <span class="built_in">document</span>.getElementById(<span class="string">'pos'</span>);</span><br><span class="line"><span class="keyword">var</span> moveBtn = <span class="built_in">document</span>.getElementById(<span class="string">'moveBtn'</span>);</span><br><span class="line"><span class="keyword">var</span> cancleBtn = docuemnt.getElementById(<span class="string">'cancleBtn'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MoveCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> receiver, pos </span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.reciver = receiver;</span><br><span class="line"><span class="keyword">this</span>.pos = pos;</span><br><span class="line"><span class="keyword">this</span>.oldPos = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MoveCommnad.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.receiver.start(‘left’, <span class="keyword">this</span>.pos, <span class="number">1000</span>, <span class="string">'strongEaseOut'</span>);</span><br><span class="line"><span class="keyword">this</span>.oldPos = <span class="keyword">this</span>.receiver.dom.getBoundingClientRect()[<span class="keyword">this</span>.receiver.propertyName];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MoveCommand.prototype.undo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.receiver.start(<span class="string">'left'</span>, <span class="keyword">this</span>.oldPos, <span class="number">1000</span>, <span class="string">'strongEaseOut'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> moveCommand;</span><br><span class="line">moveBtn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> animae = <span class="keyword">new</span> Animate(<span class="string">'ball'</span>);</span><br><span class="line">moveCommand = <span class="keyword">new</span> MoveCommand( animate, pos.value);</span><br><span class="line">moveCommand.execute();</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">cancleBtn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">moveCommand.undo();</span><br><span class="line">&#125;， <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="撤销和重做"><a href="#撤销和重做" class="headerlink" title="撤销和重做"></a>撤销和重做</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Ryu = &#123;</span><br><span class="line">attack: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'攻击'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">defense: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'防御'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">jump: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'跳跃'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">crouch: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'蹲下'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> makeCommand = <span class="function"><span class="keyword">function</span>(<span class="params"> receiver, state </span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">receiver[state]();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> commands = &#123;</span><br><span class="line"><span class="string">'119'</span>: <span class="string">'jump'</span>,</span><br><span class="line"><span class="string">'115'</span>: <span class="string">'crouch'</span>,</span><br><span class="line"><span class="string">'97'</span>: <span class="string">'defense'</span>,</span><br><span class="line"><span class="string">'100'</span>: <span class="string">'attack'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> commandStack = [];</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keypress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> keyCode = ev.keyCode,</span><br><span class="line">command = makeCommand( Ryu, commands[ keyCode ] );</span><br><span class="line"><span class="keyword">if</span>(command) &#123;</span><br><span class="line">command();</span><br><span class="line">commandStack.push( command );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'replay'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> command;</span><br><span class="line"><span class="keyword">while</span>(command = commandStack.shift()) &#123;</span><br><span class="line">command();</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="宏命令"><a href="#宏命令" class="headerlink" title="宏命令"></a>宏命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</span><br><span class="line">execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'colse door!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openPcCommand = &#123;</span><br><span class="line">execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'open pc!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openQQCommand = &#123;</span><br><span class="line">execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'login QQ!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MacroCommand = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">commandList: [],</span><br><span class="line">add: <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.commandList.push(command);</span><br><span class="line">&#125;,</span><br><span class="line">execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.commandList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">command</span>)</span>&#123;</span><br><span class="line">command.execute();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> macroCommand = MacroCommand();</span><br><span class="line">macroCommand.add( colseDoorCommand );</span><br><span class="line">macroCommand.add( openPcCommand );</span><br><span class="line">macroCommand.add( openQqCommand );</span><br><span class="line">macroCommand.execute();</span><br></pre></td></tr></table></figure><h3 id="智能命令与傻瓜命令"><a href="#智能命令与傻瓜命令" class="headerlink" title="智能命令与傻瓜命令"></a>智能命令与傻瓜命令</h3><p><strong><em>closeDoorCommand</em></strong>中没有包含任何recevier，包含recevier的叫傻瓜命令，能更好的解藕；<br>不包含的叫智能命令。</p><h3 id="拓展：对比一下，函数的传参与不传参。"><a href="#拓展：对比一下，函数的传参与不传参。" class="headerlink" title="拓展：对比一下，函数的传参与不传参。"></a>拓展：对比一下，函数的传参与不传参。</h3><h3 id="拓展：什么东西叫纯函数？"><a href="#拓展：什么东西叫纯函数？" class="headerlink" title="拓展：什么东西叫纯函数？"></a>拓展：什么东西叫纯函数？</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命令模式&lt;/h1&gt;&lt;h3 id=&quot;比喻定义&quot;&gt;&lt;a href=&quot;#比喻定义&quot; class=&quot;headerlink&quot; title=&quot;比喻定义&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端学习nginx之理解nginx配置</title>
    <link href="https://ryansuen.github.io/2018/06/17/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0nginx%E4%B9%8B%E7%90%86%E8%A7%A3nginx%E9%85%8D%E7%BD%AE/"/>
    <id>https://ryansuen.github.io/2018/06/17/前端学习nginx之理解nginx配置/</id>
    <published>2018-06-17T07:00:31.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先看看nginx-conf-default这个文件"><a href="#先看看nginx-conf-default这个文件" class="headerlink" title="先看看nginx.conf.default这个文件"></a>先看看nginx.conf.default这个文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">             root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    include servers/*;</span><br></pre></td></tr></table></figure><h3 id="location块配置理解"><a href="#location块配置理解" class="headerlink" title="location块配置理解"></a>location块配置理解</h3><p>location 语法结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location [ = | ~ | ~* | ~^ ] uri &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中uri是待匹配的请求字符串，也就是待匹配的请求。可以是不含正则表达的字符串，如/index.html（“标准uri”）。 也可以是正则表达式，如.php$ 匹配以点php结尾的请求。</p><p>中括号的内容可选，当没有中括号的内容。nginx 首先在server的多个location块中搜索是否有标准uri与请求字符串相匹配的，如果有多个可以匹配，就记录匹配度最高的一个，注意这里只是先记录下来。然后服务器再用location中的正则uri与请求字符串匹配，当第一个uri匹配成功，结束搜索，并用这个location块处理请求，如果正则全部匹配失败，则使用刚才那个记录匹配度最的location块处理请求。</p><p>可先参数的含义</p><ul><li>= 表示请求字符串要与uri严格匹配。</li><li>~ 表示uri包含正则表达式，并且区分大小写。（实际验证未区分大小写）</li><li>~* 表示uri包含正则表达式，并且不区分大小写。</li><li>^~ 用于标准uri前，要求nginx找到标识uri和请求字符串匹配度最高的location后，立即使用此location处理请求，而不再使用location中的正则uri和请求字符串匹配。</li></ul><h3 id="配置请求的根目录"><a href="#配置请求的根目录" class="headerlink" title="配置请求的根目录"></a>配置请求的根目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /data/ &#123;</span><br><span class="line">    root path_to_root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更改location的uri"><a href="#更改location的uri" class="headerlink" title="更改location的uri"></a>更改location的uri</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~ ^/data/(.+\.(htm|html))$ &#123;</span><br><span class="line">    alias /locationtest1/other/$1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置网站的错误页面"><a href="#设置网站的错误页面" class="headerlink" title="设置网站的错误页面"></a>设置网站的错误页面</h3><p>语法：error_page code [=[response]] uri</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">error_page 404 /404.html;</span><br><span class="line">error_page 403 http://site.com/forbidden.html;</span><br><span class="line">error_page 410 =310 /empty.gif;</span><br><span class="line">location /404.html &#123;</span><br><span class="line">    root /server/errorpage/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于ip的访问权限设置"><a href="#基于ip的访问权限设置" class="headerlink" title="基于ip的访问权限设置"></a>基于ip的访问权限设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    deny 192.168.1.1;   #不支持写多个ip，要支持多个重复使用deny</span><br><span class="line">    allow 192.168.1.0/24;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会参生疑问，我们先禁止了192.168.1.1访问，然后又允许了192.168.1.0/24访问。最后又禁止所有访问。哪到底192.168.1.0/24能不能访问?</p><p>如果遇到匹配的配置，则停止向下搜索。</p><h3 id="nginx-gzip"><a href="#nginx-gzip" class="headerlink" title="nginx gzip"></a>nginx gzip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip on;</span><br></pre></td></tr></table></figure><p>默认值为off,即不启用gzip;只有gzip为on是gzip相关的指令才有效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip_buffers number size;</span><br></pre></td></tr></table></figure><p>number nginx向系统申请缓存空间的个数</p><p>size 第个缓存空间的大小。</p><p>nginx在对响应输出的数据进行gzip压缩时需要向系统申请number * size 大小的空间用于存储数据。size的值为系统内存页 一页的大小，一般为4k或8k;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip_comp_level level;</span><br></pre></td></tr></table></figure><p>该指令用于设定gzip的压缩程度，压缩程度从底到高分1~9个等级。1压缩程度最低，压缩效率最高。9压缩程度最高，压缩效率最低，最耗时。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip_disable regex ...;</span><br><span class="line">gzip_disable MSIE [4-6]\.</span><br></pre></td></tr></table></figure><p>对哪些UA不作gzip处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip_min_length length;</span><br><span class="line">gzip_min_length 1024;</span><br></pre></td></tr></table></figure><p>响应超过多少才gzip压缩。如果太小，压缩后可能会变大。建议最小1024，即1kb;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_min_length 1024;</span><br><span class="line">gzip_buffers 4 16k;</span><br><span class="line">gzip_comp_level 2;</span><br><span class="line">gzip_types text/plain application/z-javascript text/css application/xml;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h3><h4 id="Rewrite的Flags"><a href="#Rewrite的Flags" class="headerlink" title="Rewrite的Flags"></a>Rewrite的Flags</h4><ul><li>last – 完成重写指令后，搜索相应的URI和位置。相当于Apache里的[L]标记，表示完成rewrite，不再匹配后面的规则。</li><li>break – 中止Rewirte，不在继续匹配。</li><li>redirect – 返回临时重定向的HTTP状态302。</li><li>permanent – 返回永久重定向的HTTP状态301。</li></ul><h4 id="文件及目录匹配"><a href="#文件及目录匹配" class="headerlink" title="文件及目录匹配"></a>文件及目录匹配</h4><ul><li>-f和!-f用来判断是否存在文件</li><li>-d和!-d用来判断是否存在目录</li><li>-e和!-e用来判断是否存在文件或目录</li><li>-x和!-x用来判断文件是否可执行</li></ul><h4 id="正则表达式全部符号解释"><a href="#正则表达式全部符号解释" class="headerlink" title="正则表达式全部符号解释"></a>正则表达式全部符号解释</h4><ul><li>~ 为区分大小写匹配</li><li>~* 为不区分大小写匹配</li><li>!~和!~* 分别为区分大小写不匹配及不区分大小写不匹配</li><li>(pattern) 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘/(’ 或 ‘/)’。</li><li>^ 匹配输入字符串的开始位置</li><li>$ 匹配输入字符串的结束位置</li></ul><h4 id="域名跳转"><a href="#域名跳转" class="headerlink" title="域名跳转"></a>域名跳转</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#例1</span><br><span class="line">...</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name jump.myweb.name;</span><br><span class="line">    rewrite ^/ http://www.myweb.info/;    #域名跳转</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="多域名跳转"><a href="#多域名跳转" class="headerlink" title="多域名跳转"></a>多域名跳转</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name jump.myweb.name jump.myweb.info;</span><br><span class="line">    if ($host myweb\.info)    #注意正则表达式中对点号“.”要用“\”进行转义</span><br><span class="line">    &#123;</span><br><span class="line">        rewrite ^(.*) http://jump.myweb.name$1 pe rmanent; #多域名跳转</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三级域名跳转"><a href="#三级域名跳转" class="headerlink" title="三级域名跳转"></a>三级域名跳转</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name jump1.myweb.name jump2.myweb.name;</span><br><span class="line">    if ($http_ host ~*  ^(.*) \.myweb.name$)</span><br><span class="line">    &#123;</span><br><span class="line">        rewrite (.*) http://jump.myweb.name$1;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    #监听80端口</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">     # individual nginx logs for this web vhost</span><br><span class="line">    access_log /tmp/access.log;</span><br><span class="line">    error_log  /tmp/error.log ;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://www.baidu.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡 建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。</p><p>负载均衡，英文名称为Load Balance，其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。</p><p>简单说来就是：将负载进行平衡。人话就是将请求分派给其它服务器以及如何分派。</p><h4 id="默认的规则"><a href="#默认的规则" class="headerlink" title="默认的规则"></a>默认的规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line">#要放在http下。 </span><br><span class="line">upstream mt &#123; </span><br><span class="line">    server mt1.com; # 应用服务器1</span><br><span class="line">    server mt2.com; # 应用服务器2</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">#放在server下</span><br><span class="line">location /api &#123;</span><br><span class="line">    proxy_pass http://mt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="权重策略"><a href="#权重策略" class="headerlink" title="权重策略"></a>权重策略</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">upstream  mt &#123; </span><br><span class="line">    server 127.0.0.1:8085 weight=1; # 应用服务器1</span><br><span class="line">    server 127.0.0.1:8086 weight=9; # 应用服务器2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /api &#123;</span><br><span class="line">    proxy_pass http://mt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ip-hash策略"><a href="#ip-hash策略" class="headerlink" title="ip_hash策略"></a>ip_hash策略</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#3、IP绑定 ip_hash</span><br><span class="line">#每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，</span><br><span class="line">#可以解决session的问题;在不考虑引入分布式session的情况下，</span><br><span class="line">#原生HttpSession只对当前servlet容器的上下文环境有效</span><br><span class="line">upstream mt &#123; </span><br><span class="line">    ip_hash; </span><br><span class="line">    server mt1.com:8085; # 应用服务器1</span><br><span class="line">    server mt2.com:8086; # 应用服务器2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /api &#123;</span><br><span class="line">    proxy_pass http://mt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;先看看nginx-conf-default这个文件&quot;&gt;&lt;a href=&quot;#先看看nginx-conf-default这个文件&quot; class=&quot;headerlink&quot; title=&quot;先看看nginx.conf.default这个文件&quot;&gt;&lt;/a&gt;先看看nginx.co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端学习nginx二</title>
    <link href="https://ryansuen.github.io/2018/05/26/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0nginx%E4%BA%8C/"/>
    <id>https://ryansuen.github.io/2018/05/26/前端学习nginx二/</id>
    <published>2018-05-26T14:36:31.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>这一期我们来分享几个nginx容易遇到的问题：</p><h3 id="nginx-emerg-bind-to-0-0-0-0-80-failed-48-Address-already-in-use"><a href="#nginx-emerg-bind-to-0-0-0-0-80-failed-48-Address-already-in-use" class="headerlink" title="nginx: [emerg] bind() to 0.0.0.0:80 failed (48: Address already in use)"></a>nginx: [emerg] bind() to 0.0.0.0:80 failed (48: Address already in use)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ryan:~ ryan$ sudo nginx    //启动nginx</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:80 failed (48: Address already in use)</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:80 failed (48: Address already in use)</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:80 failed (48: Address already in use)</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:80 failed (48: Address already in use)</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:80 failed (48: Address already in use)</span><br><span class="line">nginx: [emerg] still could not bind()</span><br></pre></td></tr></table></figure><p>错误提醒的多明显。”bind() to 0.0.0.0:80  failed “。</p><ol><li>我们可以很容易猜到大概意思就是不能使用80端口。</li><li>再猜一下，80端口可能被占用了。</li><li>我们先验证下80端口有没有被占用。</li><li>如果被占用关闭之前的进程，再启动一次nginx.</li></ol><h4 id="mac-查看端口是否被占用。"><a href="#mac-查看端口是否被占用。" class="headerlink" title="mac 查看端口是否被占用。"></a>mac 查看端口是否被占用。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 查80端口是被什么进程占用</span><br><span class="line">lsof -i tcp:80</span><br><span class="line"></span><br><span class="line">kill -9 pid</span><br></pre></td></tr></table></figure><h4 id="window-查看端口是否被占用。"><a href="#window-查看端口是否被占用。" class="headerlink" title="window 查看端口是否被占用。"></a>window 查看端口是否被占用。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//cmd下运行如下命令</span><br><span class="line">netstat  –ano</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">Proto Local Address</th><th style="text-align:center">Foreign Address</th><th style="text-align:center">State</th><th style="text-align:center">PID</th></tr></thead><tbody><tr><td style="text-align:center">TCP</td><td style="text-align:center">0.0.0.0:80</td><td style="text-align:center">0.0.0.0:0 LISTENING</td><td style="text-align:center">656</td></tr></tbody></table><p>上面找到了占用80的pid,然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;Taskkill /PID 656 /F</span><br></pre></td></tr></table></figure><p>当然也可以能过运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;tasklist   //找到656这个进程所对应的程序名。然后直接通过任务管理器关闭相应的进程就行了。</span><br></pre></td></tr></table></figure></p><h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h5><p>有时候我们可能已经开启了nginx服务。再次开启nginx服务，毫无疑问会报上面的错误。如果是在生产环境，就不要中断服务了。可以如下操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>如果确实想重启nginx。可以如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s stop</span><br><span class="line">sudo nginx</span><br></pre></td></tr></table></figure><h3 id="当我们重新配置一个新的nginx服务访问时出现”403-Forbidden“解决方法"><a href="#当我们重新配置一个新的nginx服务访问时出现”403-Forbidden“解决方法" class="headerlink" title="当我们重新配置一个新的nginx服务访问时出现”403 Forbidden“解决方法"></a>当我们重新配置一个新的nginx服务访问时出现”403 Forbidden“解决方法</h3><p>当我们在访问 <a href="http://localhost" target="_blank" rel="noopener">http://localhost</a> 时屏幕显示”403 Forbidden<br>nginx/1.12.0”。 当然里的前端我们先配置了80端口下的这个服务。<br>现在我们先来猜问题：</p><ol><li>403 forbidden =&gt;  懂点英文的都会知道。被禁止了。</li><li>我们再顺着被禁止了去猜。假如我们被禁止进入某一场所，说明我们是没有权限。</li><li>大概猜到是权限问题。大致会出现两种权限的可能： 我们没有权限访问服务器。我们的服务器没有权限访问网站所对应的文件。</li><li>再稍稍猜一下。自已配置的服务器怎么会不让自己访问。我们就可以排除第一种可能啦。我们先假设可能是服务器不能访问网站所对应的文件去试试。</li></ol><h4 id="修改文件访问权限"><a href="#修改文件访问权限" class="headerlink" title="修改文件访问权限"></a>修改文件访问权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt;chmod-R 755 /usr/local/nginx/html</span><br></pre></td></tr></table></figure><p>重启了下nginx服务器好像真的可以访问。验证了我们的猜想。<br>我自己遇到过一次改了权限，仍不能访问的情况。<br>最终发现是文件组受了限制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//不可访问路径</span><br><span class="line">drwxrwxrwx   4 ryan（用户/属主）  staff(属组)  136  9 26 00:12 nginx</span><br><span class="line"></span><br><span class="line">//可访问路径</span><br><span class="line">drwxr-xr-x  2 ryan  admin      68  9 26 00:11 www</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//改变所属的组</span><br><span class="line">chown -R ryan:admin /Users/ryan/Documents/www/nginx/test/</span><br></pre></td></tr></table></figure><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>按如上的方式修改文件所属的组，细想不是很合理，上面只是说了是权限问题,没有说得足够细，以及为什么要将staff组改成admin组。这里继续补充。</p><h5 id="liunx下的用户和用户组"><a href="#liunx下的用户和用户组" class="headerlink" title="liunx下的用户和用户组"></a>liunx下的用户和用户组</h5><p>linux是多用户和多任务的系统，很可能存在多人同时使用一台liunx主机工作的情况。为了考虑每个人的隐私权，以及每个人的喜欢的工作环境。因此设计了“用户和用户组”这样的“文件所有者”。正因为此所以某一用户在访问其他用户的文件时为存在权限问题。</p><p>上面所讲的内容如何和我们遇到的nginx的问题关联起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//linux 命令行下执行</span><br><span class="line">ps aux | grep nginx</span><br><span class="line">nobody           64601   0.0  0.0  4304288   1224   ??  S     3:07下午   0:00.00 nginx: worker process</span><br><span class="line">root             64600   0.0  0.0  4301984    580   ??  Ss    3:07下午   0:00.00 nginx: master process nginx</span><br><span class="line">// 我们可以看到nginx 的工作进程的用户是nobody，即nobody这个用户运行的nginx的工作进程。 root这个用户运行的nginx的主进程。</span><br><span class="line">//这里就要发问了，为什么主进程是root用户的，工作进程是nobody这个用户的？</span><br><span class="line">//主进程归root用户是因为启动nginx的时候使用的是&quot;sudo nginx&quot;,明白了吧！工作进程归nobody是因为在nginx.conf配置当中我们设置的user是nobody(user设置运行nginx的用户);   user user [group];    </span><br><span class="line"></span><br><span class="line">//这个时候我们去查看网站根目录所属的用户及用户组</span><br><span class="line">ls -l</span><br><span class="line">drwxr-xr-x   6 ryan  staff      192  6  2 00:56 website.root</span><br><span class="line">//我们可以看到用户是ryan 用户组是staff.</span><br><span class="line"></span><br><span class="line">//到这里很清楚了吧。  一个nobody的用户想要去访问ryan的文件。你死不死当然没有权限啦！</span><br><span class="line"></span><br><span class="line">//悟性高的可能已经知道要怎么改了。这里我们先不说怎么改，引了别一个问题。眼尖的同学可能会问了，  staff是什么用户组？</span><br></pre></td></tr></table></figure><h4 id="Linux-中的-wheel-组和-staff-组-及admin组区别。"><a href="#Linux-中的-wheel-组和-staff-组-及admin组区别。" class="headerlink" title="Linux 中的 wheel 组和 staff 组 及admin组区别。"></a>Linux 中的 wheel 组和 staff 组 及admin组区别。</h4><blockquote><p>The wheel group is used to control those people that can su to the root user (though this is made irrelevant by the sudo command).</p></blockquote><blockquote><p>All of the users on your system will be in the staff group, so by changing group ownership of files to staff the group permissions will apply to all users. All of the administrators on your system will be in the wheel group, so by changing group ownership of the files to wheel group permissions will apply to all of the administrators, global permissions will apply to any other users.</p></blockquote><blockquote><p>My advice is that, except for files that you have created, you leave the group ownership and permissions alone. Unix is very particular about file ownership and permissions in certain areas and changing them only leads to trouble.</p></blockquote><p>所有的用户都属于 staff 组，</p><p>只有具有管理员性质的用户位于 wheel 组中。</p><p>wheel 是一个特殊的用户组，该组的用户可以使用 su 切换到 root，而 staff 组是所有普通用户的集合。</p><p>admin组就不用说了，翻译过来就知道了管理员组。</p><p>讲到这里可能不用说如何修改上述403的问题都知道如何修改了。</p><p> 把nginx的启动用户改成root；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user root staff;</span><br><span class="line"></span><br><span class="line">//我试着直接设置，重载nginx的时候报错了。看来限制了root用户必须要带上组。</span><br><span class="line">user root;</span><br><span class="line"></span><br><span class="line">//设置user nobody,并没有报错，说明对nobody并没有此限制，我猜想原因是有nobody用户，也有nobody组，而有root用户而没有root组。</span><br></pre></td></tr></table></figure><p>有兴趣的可以去了解一下”/etc/group和/etc/passwd及/etc/shadow文件”主个文件的内容。</p><blockquote><p>今天的分享先到这里了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这一期我们来分享几个nginx容易遇到的问题：&lt;/p&gt;
&lt;h3 id=&quot;nginx-emerg-bind-to-0-0-0-0-80-failed-48-Address-already-in-use&quot;&gt;&lt;a href=&quot;#nginx-emerg-bind-to-0-0-0-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端学习nginx一</title>
    <link href="https://ryansuen.github.io/2018/05/26/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0nginx%E4%B8%80/"/>
    <id>https://ryansuen.github.io/2018/05/26/前端学习nginx一/</id>
    <published>2018-05-26T12:36:29.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>Nginx是一款轻量级的HTTP服务器（相比于Apache、Lighttpd等），同时是一个高性能的HTTP和反向代理服务器。Nginx主要以事件驱动的方式编写，这让它拥有非常好的性能，同时也能非常高效的实现反向代理和负载均衡。</p><p>nginx的几项基本特征：</p><ul><li>处理静态文件，索引文件以及自动索引；打开文件描述符缓冲</li><li>无缓存的反向代理加速，简单的负载均衡和容错</li><li>FastCGI，简单的负载均衡和容错</li><li>模块化的结构，包括gzipping,byte ranges,chunked responses,以及SSI-filter等filter。</li><li>支持SSL和TLSSNI.</li></ul><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><h4 id="window安装"><a href="#window安装" class="headerlink" title="window安装"></a>window安装</h4><blockquote><p>安装步骤省略，闲麻烦可以安装一个集成环境–phpStudy。 不是嫌弃windows电脑，极想买一台性能很6的window电脑，实在囊中羞涩。</p></blockquote><h4 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update &amp;&amp; brew install nginx</span><br></pre></td></tr></table></figure><p>安装完成后可以用浏览器打开<a href="http://localhost:8080看到Nginx的欢迎信息。" target="_blank" rel="noopener">http://localhost:8080看到Nginx的欢迎信息。</a></p><p>一般情况下mac下nginx的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//安装路径如下：(可执行程序)</span><br><span class="line">/usr/local/Cellar/nginx/1.12.0_1/bin/nginx</span><br><span class="line"></span><br><span class="line">//配置所在路径</span><br><span class="line">/usr/local/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><h3 id="先看看nginx的默认配置，后面再细讲"><a href="#先看看nginx的默认配置，后面再细讲" class="headerlink" title="先看看nginx的默认配置，后面再细讲"></a>先看看nginx的默认配置，后面再细讲</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    include servers/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启，停止，重新启动"><a href="#开启，停止，重新启动" class="headerlink" title="开启，停止，重新启动"></a>开启，停止，重新启动</h3><p>要启动nginx，可以直接运行nginx的可执行文件。也就是刚才说的“/usr/local/Cellar/nginx/1.12.0_1/bin/nginx”这个文件。一但nginx已经开启。可以带上“-s [参数]“执行nginx的可执行文件。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nginx -s signal</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">signal 如下当中的一种：</span><br><span class="line"></span><br><span class="line">- stop 快速关闭</span><br><span class="line">- quit 优雅的关闭</span><br><span class="line">- reload 重新加载配置文件</span><br><span class="line">- reopen 重新打开日志文件。</span><br><span class="line"></span><br><span class="line">看到如上的信号，有小伙伴肯定会问stop 和 quit 都是关闭这两者有什么区别。</span><br></pre></td></tr></table></figure><p>nginx -s quit    //This command should be executed under the same user that started nginx. 官网原话，好懂吧！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>nginx -s reload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">重启命令就更厉害了。先看一段官网原话：</span><br><span class="line">Once the master process receives the signal to reload configuration, it checks the syntax validity of the new configuration file and tries to apply the configuration provided in it. If this is a success, the master process starts new worker processes and sends messages to old worker processes, requesting them to shut down. Otherwise, the master process rolls back the changes and continues to work with the old configuration. Old worker processes, receiving a command to shut down, stop accepting new connections and continue to service current requests until all such requests are serviced. After that, the old worker processes exit.</span><br><span class="line"></span><br><span class="line">我们来大概翻译下：一但nginx主进程接收到reload的信号，会先去验证新配置的语法是否正确。如果成功也就是语法正确，nginx的主进程会开一个新的进程，发信息给旧的主进程请求关闭。如不reload不成功，主进程会继续使用旧的主进程，使用旧的配置。 旧的主进程接上到关闭命令会停止接收新的链接并继续服务已接收的链接直到服务完成。这之后才会关闭。</span><br><span class="line"></span><br><span class="line">我们用人话来说翻译下上面的内容：  nginx能够不中断服务启用新的配置，不知道大家如何看，反正我觉得很吊。</span><br><span class="line"></span><br><span class="line">#### 其它优雅的结束方式:</span><br></pre></td></tr></table></figure></p><p>kill -s QUIT NGINX-PID<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">主进程的PID（process id）一般会被写入nginx.pid。 这个文件一般在”/usr/local/nginx/logs 或 /var/run“下。</span><br><span class="line"></span><br><span class="line">通过如上的方式如果找不到nginx的进程id可以执行如下命令找到。</span><br></pre></td></tr></table></figure></p><p>ps -ax | grep nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 配置语法检查命令</span><br></pre></td></tr></table></figure></p><p>nginx -t<br><code>`</code></p><p>好啦！今天的分享就先到这里了,下期再见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h3&gt;&lt;p&gt;Nginx是一款轻量级的HTTP服务器（相比于Apache、Lighttpd等），同时是一个高性能的HTTP和反向代理服务器。Nginx主要
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在Mac上使用ssh-key免密码登录服务器</title>
    <link href="https://ryansuen.github.io/2018/04/20/%E5%9C%A8Mac%E4%B8%8A%E4%BD%BF%E7%94%A8ssh-key%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://ryansuen.github.io/2018/04/20/在Mac上使用ssh-key免密码登录服务器/</id>
    <published>2018-04-20T14:26:57.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常来说，我们使用 ssh user@host -p port，再输入密码，才能 ssh 到服务器进行管理。人类与动物的区别在于人会使用工具。所以我们要利用一些工具来简化我们的操作。</p><p>好在 Unix 系的操作系统提供了各种 ssh 支持。我们得以实现偷懒的目的。</p><p>先假设我们有一台服务器，主机名 testhost，ip 为 8.8.8.8，账号为 foo，密码为 bar，ssh 端口为 2222。一般的连接方式是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh foo@8.8.8.8 -p 2222</span><br><span class="line">password: bar</span><br></pre></td></tr></table></figure><p>不仅很麻烦，还要记忆 IP 和端口，当我们有很多台服务器的时候，一定会疯掉！现在，我们来简化操作。</p><h3 id="一、普通方式：-bash-profile"><a href="#一、普通方式：-bash-profile" class="headerlink" title="一、普通方式：~/.bash_profile"></a>一、普通方式：~/.bash_profile</h3><p>Alias 相当于一种快捷方式或别名，让我们能把一长串命令简化成一个简短的命令。比如 Mac OSX 下没有直接的 ‘ll’ 命令，可以用 ‘ls -alF’ 实现 ‘ll’ 命令的效果。Alias 可以在主目录的 .bash_profile 文件中配置，此文件为隐藏文件，需要 ‘ls -alF’ 才能看到，如果 ‘ls -alF’ 还是看不到，可以自行创建此文件。在这个文件中，我们添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias testhost=&apos;ssh foo@8.8.8.8 -p 2222&apos;</span><br></pre></td></tr></table></figure><p>保存后，就可以像这样登录服务器了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ testhost</span><br><span class="line">password: bar</span><br></pre></td></tr></table></figure><h3 id="二、初级偷懒方式：-ssh-config"><a href="#二、初级偷懒方式：-ssh-config" class="headerlink" title="二、初级偷懒方式：~/.ssh/config"></a>二、初级偷懒方式：~/.ssh/config</h3><p>在第一种方式中，实际我们没有利用到 ssh 的功能，只是利用了 bash 来简化，不太优雅。ssh 的问题应该由 ssh 来解决。所以，我们有了第二种方式。</p><p>ssh 有自己的配置文件，位置在 ~/.ssh/config 中，可以使用以下命令来编辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.ssh/config</span><br></pre></td></tr></table></figure><p>ssh 配置文件可以将服务器地址，端口，用户配置成一个别名。我们的范例服务器可配置为为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host testhost</span><br><span class="line">  HostName 8.8.8.8</span><br><span class="line">  Port 2222</span><br><span class="line">  User foo</span><br></pre></td></tr></table></figure><p>保存后，可以使用以下方式登录服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh testhost</span><br><span class="line">password: bar</span><br></pre></td></tr></table></figure><h3 id="三、高级偷懒方式：SSH-Key"><a href="#三、高级偷懒方式：SSH-Key" class="headerlink" title="三、高级偷懒方式：SSH Key"></a>三、高级偷懒方式：SSH Key</h3><p>在上面的两种方式中，我们都需要手工输入密码。能减掉这个步骤吗？当然可以！ssh 除了密码登录，还有更简单且更安全的登录方式，那就是 ssh key 登录。</p><p>先生成公钥和私钥，在 Mac OSX 终端（或 iTerm 2 等）中进入 ~/.ssh 目录，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>会询问一些问题，直接全部回车，即可在 ~/.ssh 目录中生成 id_rsa（私钥） 和 id_rsa.pub（公钥）文件。我们需要将公钥上传到 testhost 服务器的 ~/.ssh 目录下面，因为第二种方式中我们已经配置了 testhost 服务器，scp 也能识别这个服务器，所以，可以使用如下命令将文件传输到 testhost 服务器中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp ~/.ssh/id_rsa.pub testhost:~/.ssh/</span><br></pre></td></tr></table></figure><p>接下来，用第二种方式登录到 testhost 服务器中，在 ~/.ssh 目录中使用以下命令将 id_rsa.pub 更名为 authorized_keys：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo@testhost: $ mv id_rsa.pub authorized_keys</span><br></pre></td></tr></table></figure><p>最后确保下文件权限正常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo@testhost: $ chmod 700 ~/.ssh/</span><br><span class="line">foo@testhost: $ chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>现在，我们可以在 Mac OSX 的终端中使用 ssh testhost 登录到 testhost 服务器了，无需输入密码，更无需记忆服务器参数。</p><p>如果无法连接，请在服务器的 /etc/ssh/sshd_config 文件中查看 PubkeyAuthentication 的值是否为 yes，如果不是，请修改为 yes ，并使用以下命令重启 ssh 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo@testhost: $ /etc/init.d/ssh restart</span><br><span class="line"></span><br><span class="line">//or </span><br><span class="line"></span><br><span class="line">sudo service sshd restart   可以用这个   ssh服务是用yum来安装的  都可以统一用service命令来控制</span><br></pre></td></tr></table></figure><p>如果需要禁止密码登录，同样可以编辑 /etc/ssh/sshd_config 文件中 PasswordAuthentication 的值为 no 并重启 ssh 服务。</p><h3 id="当有多Mac-设备-要登录同一台服务器时的解决方案："><a href="#当有多Mac-设备-要登录同一台服务器时的解决方案：" class="headerlink" title="当有多Mac(设备)要登录同一台服务器时的解决方案："></a>当有多Mac(设备)要登录同一台服务器时的解决方案：</h3><ol><li>先把新mac(设备)的id__rsa.pub都scp到目标服务器上，文件名后面统一加一个后缀, 如：id_rsa.pub.host1</li><li>再执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub.hostX &gt;&gt; .ssh/authorized_keys</span><br></pre></td></tr></table></figure></li></ol><p>每个文件执行一回,hostX要改成相应的文件名后缀。 将新的key 追加到authorized_keys当中。<br>再把生成的authorized_keys给各主机SCP过去，就完事了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通常来说，我们使用 ssh user@host -p port，再输入密码，才能 ssh 到服务器进行管理。人类与动物的区别在于人会使用工具。所以我们要利用一些工具来简化我们的操作。&lt;/p&gt;
&lt;p&gt;好在 Unix 系的操作系统提供了各种 ssh 支持。我们得以实现偷懒的目的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node.js fs</title>
    <link href="https://ryansuen.github.io/2018/03/12/node-js-fs/"/>
    <id>https://ryansuen.github.io/2018/03/12/node-js-fs/</id>
    <published>2018-03-12T13:52:47.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fs-api-阮老师的api文档"><a href="#fs-api-阮老师的api文档" class="headerlink" title="fs api(阮老师的api文档)"></a>fs api(阮老师的api文档)</h2><p>fs是filesystem的缩写，该模块提供本地文件的读写能力，基本上是POSIX文件操作命令的简单包装。但是，这个模块几乎对所有操作提供异步和同步两种操作方式，供开发者选择。</p><blockquote><p>fs模块是唯一一个同时提供同步和异步API的模块。</p></blockquote><h3 id="readFile-，readFileSync"><a href="#readFile-，readFileSync" class="headerlink" title="readFile()，readFileSync()"></a>readFile()，readFileSync()</h3><p>readFile方法用于异步读取数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(&apos;./image.png&apos;, function (err, buffer) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  process(buffer);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>readFile方法的第一个参数是文件的路径，可以是绝对路径，也可以是相对路径。注意，如果是相对路径，是相对于当前进程所在的路径（process.cwd()），而不是相对于当前脚本所在的路径。</p><p>readFile方法的第二个参数是读取完成后的回调函数。该函数的第一个参数是发生错误时的错误对象，第二个参数是代表文件内容的Buffer实例。</p><p>readFileSync方法用于同步读取文件，返回一个字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var text = fs.readFileSync(fileName, &apos;utf8&apos;);</span><br><span class="line"></span><br><span class="line">// 将文件按行拆成数组</span><br><span class="line">text.split(/\r?\n/).forEach(function (line) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>readFileSync方法的第一个参数是文件路径，第二个参数可以是一个表示配置的对象，也可以是一个表示文本文件编码的字符串。默认的配置对象是{ encoding: null, flag: ‘r’ }，即文件编码默认为null，读取模式默认为r（只读）。如果第二个参数不指定编码（encoding），readFileSync方法返回一个Buffer实例，否则返回的是一个字符串。</p><p>不同系统的行结尾字符不同，可以用下面的方法判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 方法一，查询现有的行结尾字符</span><br><span class="line">var EOL =</span><br><span class="line">  fileContents.indexOf(&apos;\r\n&apos;) &gt;= 0 ? &apos;\r\n&apos; : &apos;\n&apos;;</span><br><span class="line"></span><br><span class="line">// 方法二，根据当前系统处理</span><br><span class="line">var EOL =</span><br><span class="line">  (process.platform === &apos;win32&apos; ? &apos;\r\n&apos; : &apos;\n&apos;);</span><br></pre></td></tr></table></figure><h3 id="writeFile-，writeFileSync"><a href="#writeFile-，writeFileSync" class="headerlink" title="writeFile()，writeFileSync()"></a>writeFile()，writeFileSync()</h3><p>writeFile方法用于异步写入文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(&apos;message.txt&apos;, &apos;Hello Node.js&apos;, (err) =&gt; &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  console.log(&apos;It\&apos;s saved!&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，writeFile方法的第一个参数是写入的文件名，第二个参数是写入的字符串，第三个参数是回调函数。</p><p>回调函数前面，还可以再加一个参数，表示写入字符串的编码（默认是utf8）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(&apos;message.txt&apos;, &apos;Hello Node.js&apos;, &apos;utf8&apos;, callback);</span><br></pre></td></tr></table></figure><p>writeFileSync方法用于同步写入文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFileSync(fileName, str, &apos;utf8&apos;);</span><br></pre></td></tr></table></figure><p>它的第一个参数是文件路径，第二个参数是写入文件的字符串，第三个参数是文件编码，默认为utf8。</p><h3 id="exists-path-callback"><a href="#exists-path-callback" class="headerlink" title="exists(path, callback)"></a>exists(path, callback)</h3><p>exists方法用来判断给定路径是否存在，然后不管结果如何，都会调用回调函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.exists(&apos;/path/to/file&apos;, function (exists) &#123;</span><br><span class="line">  util.debug(exists ? &quot;it&apos;s there&quot; : &quot;no file!&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码表明，回调函数的参数是一个表示文件是否存在的布尔值。</p><p>需要注意的是，不要在open方法之前调用exists方法，open方法本身就能检查文件是否存在。</p><p>下面的例子是如果给定目录存在，就删除它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (fs.existsSync(outputFolder)) &#123;</span><br><span class="line">  console.log(&apos;Removing &apos; + outputFolder);</span><br><span class="line">  fs.rmdirSync(outputFolder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mkdir-，writeFile-，readFile"><a href="#mkdir-，writeFile-，readFile" class="headerlink" title="mkdir()，writeFile()，readFile()"></a>mkdir()，writeFile()，readFile()</h3><p>mkdir方法用于新建目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.mkdir(&apos;./helloDir&apos;,0777, function (err) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>mkdir接受三个参数，第一个是目录名，第二个是权限值，第三个是回调函数。</p><p>writeFile方法用于写入文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.writeFile(&apos;./helloDir/message.txt&apos;, &apos;Hello Node&apos;, function (err) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  console.log(&apos;文件写入成功&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>readFile方法用于读取文件内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;./helloDir/message.txt&apos;,&apos;UTF-8&apos; ,function (err, data) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码使用readFile方法读取文件。readFile方法的第一个参数是文件名，第二个参数是文件编码，第三个参数是回调函数。可用的文件编码包括“ascii”、“utf8”和“base64”。如果没有指定文件编码，返回的是原始的缓存二进制数据，这时需要调用buffer对象的toString方法，将其转为字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">fs.readFile(&apos;example_log.txt&apos;, function (err, logData) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  var text = logData.toString();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>readFile方法是异步操作，所以必须小心，不要同时发起多个readFile请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 1; i &lt;= 1000; i++) &#123;</span><br><span class="line">  fs.readFile(&apos;./&apos;+i+&apos;.txt&apos;, function() &#123;</span><br><span class="line">     // do something with the file</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码会同时发起1000个readFile异步请求，很快就会耗尽系统资源。</p><h3 id="mkdirSync-，writeFileSync-，readFileSync"><a href="#mkdirSync-，writeFileSync-，readFileSync" class="headerlink" title="mkdirSync()，writeFileSync()，readFileSync()"></a>mkdirSync()，writeFileSync()，readFileSync()</h3><p>这三个方法是建立目录、写入文件、读取文件的同步版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.mkdirSync(&apos;./helloDirSync&apos;,0777);</span><br><span class="line">fs.writeFileSync(&apos;./helloDirSync/message.txt&apos;, &apos;Hello Node&apos;);</span><br><span class="line">var data = fs.readFileSync(&apos;./helloDirSync/message.txt&apos;,&apos;UTF-8&apos;);</span><br><span class="line">console.log(&apos;file created with contents:&apos;);</span><br><span class="line">console.log(data);</span><br></pre></td></tr></table></figure><p>对于流量较大的服务器，最好还是采用异步操作，因为同步操作时，只有前一个操作结束，才会开始后一个操作，如果某个操作特别耗时（常常发生在读写数据时），会导致整个程序停顿。</p><h3 id="readdir-，readdirSync"><a href="#readdir-，readdirSync" class="headerlink" title="readdir()，readdirSync()"></a>readdir()，readdirSync()</h3><p>readdir方法用于读取目录，返回一个所包含的文件和子目录的数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fs.readdir(process.cwd(), function (err, files) &#123;</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var count = files.length;</span><br><span class="line">  var results = &#123;&#125;;</span><br><span class="line">  files.forEach(function (filename) &#123;</span><br><span class="line">    fs.readFile(filename, function (data) &#123;</span><br><span class="line">      results[filename] = data;</span><br><span class="line">      count--;</span><br><span class="line">      if (count &lt;= 0) &#123;</span><br><span class="line">        // 对所有文件进行处理</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>readdirSync方法是readdir方法的同步版本。下面是同步列出目录内容的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var files = fs.readdirSync(dir);</span><br><span class="line">files.forEach(function (filename) &#123;</span><br><span class="line">  var fullname = path.join(dir,filename);</span><br><span class="line">  var stats = fs.statSync(fullname);</span><br><span class="line">  if (stats.isDirectory()) filename += &apos;/&apos;;</span><br><span class="line">  process.stdout.write(filename + &apos;\t&apos; +</span><br><span class="line">    stats.size + &apos;\t&apos; +</span><br><span class="line">    stats.mtime + &apos;\n&apos;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="stat"><a href="#stat" class="headerlink" title="stat()"></a>stat()</h3><p>stat方法的参数是一个文件或目录，它产生一个对象，该对象包含了该文件或目录的具体信息。我们往往通过该方法，判断正在处理的到底是一个文件，还是一个目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readdir(&apos;/etc/&apos;, function (err, files) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line"></span><br><span class="line">  files.forEach( function (file) &#123;</span><br><span class="line">    fs.stat(&apos;/etc/&apos; + file, function (err, stats) &#123;</span><br><span class="line">      if (err) throw err;</span><br><span class="line"></span><br><span class="line">      if (stats.isFile()) &#123;</span><br><span class="line">        console.log(&quot;%s is file&quot;, file);</span><br><span class="line">      &#125;</span><br><span class="line">      else if (stats.isDirectory ()) &#123;</span><br><span class="line">      console.log(&quot;%s is a directory&quot;, file);</span><br><span class="line">      &#125;</span><br><span class="line">    console.log(&apos;stats:  %s&apos;,JSON.stringify(stats));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="watchfile-，unwatchfile"><a href="#watchfile-，unwatchfile" class="headerlink" title="watchfile()，unwatchfile()"></a>watchfile()，unwatchfile()</h3><p>watchfile方法监听一个文件，如果该文件发生变化，就会自动触发回调函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.watchFile(&apos;./testFile.txt&apos;, function (curr, prev) &#123;</span><br><span class="line">  console.log(&apos;the current mtime is: &apos; + curr.mtime);</span><br><span class="line">  console.log(&apos;the previous mtime was: &apos; + prev.mtime);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.writeFile(&apos;./testFile.txt&apos;, &quot;changed&quot;, function (err) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line"></span><br><span class="line">  console.log(&quot;file write complete&quot;);   </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>unwatchfile方法用于解除对文件的监听。</p><h3 id="createReadStream"><a href="#createReadStream" class="headerlink" title="createReadStream()"></a>createReadStream()</h3><p>createReadStream方法往往用于打开大型的文本文件，创建一个读取操作的数据流。所谓大型文本文件，指的是文本文件的体积很大，读取操作的缓存装不下，只能分成几次发送，每次发送会触发一个data事件，发送结束会触发end事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">function readLines(input, func) &#123;</span><br><span class="line">  var remaining = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">  input.on(&apos;data&apos;, function(data) &#123;</span><br><span class="line">    remaining += data;</span><br><span class="line">    var index = remaining.indexOf(&apos;\n&apos;);</span><br><span class="line">    var last  = 0;</span><br><span class="line">    while (index &gt; -1) &#123;</span><br><span class="line">      var line = remaining.substring(last, index);</span><br><span class="line">      last = index + 1;</span><br><span class="line">      func(line);</span><br><span class="line">      index = remaining.indexOf(&apos;\n&apos;, last);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remaining = remaining.substring(last);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  input.on(&apos;end&apos;, function() &#123;</span><br><span class="line">    if (remaining.length &gt; 0) &#123;</span><br><span class="line">      func(remaining);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function func(data) &#123;</span><br><span class="line">  console.log(&apos;Line: &apos; + data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var input = fs.createReadStream(&apos;lines.txt&apos;);</span><br><span class="line">readLines(input, func);</span><br></pre></td></tr></table></figure><h3 id="createWriteStream"><a href="#createWriteStream" class="headerlink" title="createWriteStream()"></a>createWriteStream()</h3><p>createWriteStream方法创建一个写入数据流对象，该对象的write方法用于写入数据，end方法用于结束写入操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var out = fs.createWriteStream(fileName, &#123;</span><br><span class="line">  encoding: &apos;utf8&apos;</span><br><span class="line">&#125;);</span><br><span class="line">out.write(str);</span><br><span class="line">out.end();</span><br><span class="line">createWriteStream方法和createReadStream方法配合，可以实现拷贝大型文件。</span><br><span class="line"></span><br><span class="line">function fileCopy(filename1, filename2, done) &#123;</span><br><span class="line">  var input = fs.createReadStream(filename1);</span><br><span class="line">  var output = fs.createWriteStream(filename2);</span><br><span class="line"></span><br><span class="line">  input.on(&apos;data&apos;, function(d) &#123; output.write(d); &#125;);</span><br><span class="line">  input.on(&apos;error&apos;, function(err) &#123; throw err; &#125;);</span><br><span class="line">  input.on(&apos;end&apos;, function() &#123;</span><br><span class="line">    output.end();</span><br><span class="line">    if (done) done();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="同步还是异步"><a href="#同步还是异步" class="headerlink" title="同步还是异步"></a>同步还是异步</h2><blockquote><p>要在单线种中创建能够处理高并发的高效程序，采用异步，事件驱动的程序是不错的选择。</p></blockquote><h2 id="理解Stream"><a href="#理解Stream" class="headerlink" title="理解Stream"></a>理解Stream</h2><p>node.js console 会输出内容到控制台。事实上，console.log内部做了如下处理：<br>在指定的字符串后面加上\n（换行）字符，并将其写入stdout流中。</p><h3 id="process-全局对象中包含了三个流对象。"><a href="#process-全局对象中包含了三个流对象。" class="headerlink" title="process 全局对象中包含了三个流对象。"></a>process 全局对象中包含了三个流对象。</h3><ul><li>stdin  标准输入</li><li>stdout 标准输出</li><li>stderror 标准错误</li></ul><h3 id="需求场景描述"><a href="#需求场景描述" class="headerlink" title="需求场景描述"></a>需求场景描述</h3><p>fs模块允许我们通过Stream API来对数据进行读写操作。与readFile 及 writeFile方法不同，它对内存的分配不是一次完成的。</p><p>有一个大文件，文件内容由上百万行逗号分割文本组成。要完整的读取该文件进行解析。意味着要一次性分配很大的内存。更好的方式应该是一次只读取一块内容，以行尾结束符（“\n”）来切分，然后再逐块进行解析。</p><p>Node Stream 就是对上述解决方案的完美实现。</p><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><p>fs.createREadStream方法允许为一个文件创建一个可读的Stream对象。方便理解，举例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(&apos;xxx.txt&apos;, function(err, contents) &#123;</span><br><span class="line">    //处理整个文件</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的例子，回调函数必须要等到整个文件读取完毕，载入到RAM，且可用的情况下才会触发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var stream = fs.createReadStream(&apos;xxx.txt&apos;);</span><br><span class="line"></span><br><span class="line">stream.on(&apos;data&apos;, function(chunk) &#123;</span><br><span class="line">    //处理文件的部分内容</span><br><span class="line">&#125;)；</span><br><span class="line"></span><br><span class="line">stream.on(&apos;end&apos;, function() &#123;</span><br><span class="line">    //文件读取完毕。</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>大文件上传</li><li>日志记录（操作系统的打开，关闭文件较低效）</li></ul><h3 id="Stream-继承自EventEmitter"><a href="#Stream-继承自EventEmitter" class="headerlink" title="Stream 继承自EventEmitter"></a>Stream 继承自EventEmitter</h3><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><h3 id="fs初版demo"><a href="#fs初版demo" class="headerlink" title="fs初版demo"></a>fs初版demo</h3><h4 id="初级需求"><a href="#初级需求" class="headerlink" title="初级需求"></a>初级需求</h4><ol><li>程序在命令行运行。通过终端提供交互给用户输入，输出。</li><li>程序启动后，需要显示当前目录下的文件列表。</li><li>选择某个文件时，程序需要显示该文件的内容。</li><li>选择一个目录时，程序需要显示该目录下的信息。</li><li>运行结束后退出程序。</li></ol><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;),</span><br><span class="line">    colors = require(&apos;colors&apos;),</span><br><span class="line">    stdin = process.stdin,</span><br><span class="line">    stdout = process.stdout,</span><br><span class="line">    path = require(&apos;path&apos;),</span><br><span class="line">    stats = [],</span><br><span class="line">    files = fs.readdirSync(process.cwd());</span><br><span class="line"></span><br><span class="line">function file(i) &#123;</span><br><span class="line">    var filename = files[i];</span><br><span class="line">    fs.stat(</span><br><span class="line">        path.resolve(__dirname, filename),</span><br><span class="line">        function (err, stat) &#123;</span><br><span class="line">            stats[i] = stat;</span><br><span class="line">            if (stat.isDirectory()) &#123;</span><br><span class="line">                console.log(`    $&#123;i&#125;    $&#123;filename&#125;/`.blue);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                console.log(`    $&#123;i&#125;    $&#123;filename&#125;`.green);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (++i == files.length) &#123;</span><br><span class="line">                read();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                file(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function read() &#123;</span><br><span class="line">    console.log(``);</span><br><span class="line">    stdout.write(`    Enter your choice: `.yellow);</span><br><span class="line">    stdin.resume();</span><br><span class="line">    stdin.setEncoding(&apos;utf8&apos;);</span><br><span class="line">    stdin.on(&apos;data&apos;, option);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function option(data) &#123;</span><br><span class="line">    var filename = files[Number(data)];</span><br><span class="line">    if (!filename) &#123;</span><br><span class="line">        stdout.write(`    Enter your choice: `.red);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        stdin.pause();</span><br><span class="line">        if (stats[Number(data)].isDirectory()) &#123;</span><br><span class="line">            fs.readdir(</span><br><span class="line">                path.resolve(__dirname, filename),</span><br><span class="line">                function(err, files) &#123;</span><br><span class="line">                    console.log(&apos;&apos;);</span><br><span class="line">                    console.log(`($&#123;files.length&#125; files)`);</span><br><span class="line">                    files.forEach(function(file) &#123;</span><br><span class="line">                        console.log(`    -  $&#123;file&#125;`);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            fs.readFile(</span><br><span class="line">                path.resolve(__dirname, filename),</span><br><span class="line">                &apos;utf8&apos;,</span><br><span class="line">                function (err, data) &#123;</span><br><span class="line">                    console.log(&apos;&apos;);</span><br><span class="line">                    console.log(data.cyan);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file(0);</span><br></pre></td></tr></table></figure><p>### </p><h3 id="fs升级demo"><a href="#fs升级demo" class="headerlink" title="fs升级demo"></a>fs升级demo</h3><h4 id="升级需求"><a href="#升级需求" class="headerlink" title="升级需求"></a>升级需求</h4><ol><li>程序在命令行运行。通过终端提供交互给用户输入，输出。</li><li>程序启动后，需要显示当前目录下的文件列表。</li><li>选择某个文件时，程序需要显示该文件的内容。</li><li>选择一个目录时，程序需要显示该目录下的文件列表，且能一直递归下去</li><li>运行结束后退出程序。</li></ol><h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;),</span><br><span class="line">    colors = require(&apos;colors&apos;),</span><br><span class="line">    stdin = process.stdin,</span><br><span class="line">    stdout = process.stdout,</span><br><span class="line">    path = require(&apos;path&apos;),</span><br><span class="line">    stats = [],</span><br><span class="line">    cwd = process.cwd(),</span><br><span class="line">    files = fs.readdirSync( cwd );</span><br><span class="line"></span><br><span class="line">function file(i) &#123;</span><br><span class="line">    var filename = files[i];</span><br><span class="line">    fs.stat(</span><br><span class="line">        path.resolve(cwd, filename),</span><br><span class="line">        function (err, stat) &#123;</span><br><span class="line">            stats[i] = stat;</span><br><span class="line">            if( stat.isDirectory() ) &#123;</span><br><span class="line">                console.log(`    $&#123;i&#125;    $&#123;filename&#125;/`.blue);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                console.log(`    $&#123;i&#125;    $&#123;filename&#125;`.green);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if( ++i == files.length ) &#123;</span><br><span class="line">                read();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                file(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function read() &#123;</span><br><span class="line">    console.log(``);</span><br><span class="line">    stdout.write(`    Enter your choice: `.yellow);</span><br><span class="line">    stdin.resume();</span><br><span class="line">    stdin.setEncoding(&apos;utf8&apos;);</span><br><span class="line">    stdin.removeListener(&apos;data&apos;, option);</span><br><span class="line">    stdin.on(&apos;data&apos;, option);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function option(data) &#123;</span><br><span class="line">    var filename = files[Number(data)];</span><br><span class="line">    if( !filename ) &#123;</span><br><span class="line">        stdout.write(`    Enter your choice: `.red);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        stdin.pause();</span><br><span class="line">        if( stats[Number(data)].isDirectory() ) &#123;</span><br><span class="line">            cwd = path.resolve(cwd, filename);</span><br><span class="line">            fs.readdir(</span><br><span class="line">                cwd,</span><br><span class="line">                function(err, subFiles) &#123;</span><br><span class="line">                    files = subFiles;</span><br><span class="line">                    file(0, cwd);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            fs.readFile(</span><br><span class="line">                path.resolve(cwd, filename),</span><br><span class="line">                &apos;utf8&apos;,</span><br><span class="line">                function(err, data) &#123;</span><br><span class="line">                    console.log(&apos;&apos;);</span><br><span class="line">                    console.log(data.cyan);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file(0);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;fs-api-阮老师的api文档&quot;&gt;&lt;a href=&quot;#fs-api-阮老师的api文档&quot; class=&quot;headerlink&quot; title=&quot;fs api(阮老师的api文档)&quot;&gt;&lt;/a&gt;fs api(阮老师的api文档)&lt;/h2&gt;&lt;p&gt;fs是filesyste
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>performance</title>
    <link href="https://ryansuen.github.io/2018/01/21/performance/"/>
    <id>https://ryansuen.github.io/2018/01/21/performance/</id>
    <published>2018-01-21T13:24:33.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="performance"><a href="#performance" class="headerlink" title="performance"></a>performance</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Performance接口可以获取到当前页面与性能相关的信息。这个API为测量网站性能，提供以前没有办法做到的精度。</p><p>比如，为了得到脚本运行的准确耗时，需要一个高精度时间戳。传统的做法是使用Date对象的getTime方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var start = new Date().getTime();</span><br><span class="line"></span><br><span class="line">// do something here</span><br><span class="line"></span><br><span class="line">var now = new Date().getTime();</span><br><span class="line">var latency = now - start;</span><br><span class="line">console.log(&quot;任务运行时间：&quot; + latency);</span><br></pre></td></tr></table></figure><p>上面这种做法有两个不足之处。首先，getTime方法（以及Date对象的其他方法）都只能精确到毫秒级别（一秒的千分之一），想要得到更小的时间差别就无能为力了；其次，这种写法只能获取代码运行过程中的时间进度，无法知道一些后台事件的时间进度，比如浏览器用了多少时间从服务器加载网页。</p><p>为了解决这两个不足之处，ECMAScript 5引入“高精度时间戳”这个API，部署在performance对象上。它的精度可以达到1毫秒的千分之一（1秒的百万分之一），这对于衡量的程序的细微差别，提高程序运行速度很有好处，而且还可以获取后台事件的时间进度。</p><p>目前，所有主要浏览器都已经支持performance对象，包括Chrome 20+、Firefox 15+、IE 10+、Opera 15+。</p><h3 id="performance-timing对象"><a href="#performance-timing对象" class="headerlink" title="performance.timing对象"></a>performance.timing对象</h3><p>performance对象的timing属性指向一个对象，它包含了各种与浏览器性能有关的时间数据，提供浏览器处理网页各个阶段的耗时。比如，performance.timing.navigationStart就是浏览器处理当前网页的启动时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date.now() - performance.timing.navigationStart</span><br><span class="line">// 13260687</span><br></pre></td></tr></table></figure><p>上面代码表示距离浏览器开始处理当前网页，已经过了13260687毫秒。</p><p>下面是另一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var t = performance.timing;</span><br><span class="line">var pageloadtime = t.loadEventStart - t.navigationStart;</span><br><span class="line">var dns = t.domainLookupEnd - t.domainLookupStart;</span><br><span class="line">var tcp = t.connectEnd - t.connectStart;</span><br><span class="line">var ttfb = t.responseStart - t.navigationStart;</span><br></pre></td></tr></table></figure><p>上面代码依次得到页面加载的耗时、域名解析的耗时、TCP连接的耗时、读取页面第一个字节之前的耗时。</p><p>performance.timing对象包含以下属性（全部为只读）：</p><ul><li>navigationStart：当前浏览器窗口的前一个网页关闭，发生unload事件时的Unix毫秒时间戳。如果没有前一个网页，则等于fetchStart属性。</li><li>unloadEventStart：如果前一个网页与当前网页属于同一个域名，则返回前一个网页的unload事件发生时的Unix毫秒时间戳。如果没有前一个网页，或者之前的网页跳转不是在同一个域名内，则返回值为0。</li><li>unloadEventEnd：如果前一个网页与当前网页属于同一个域名，则返回前一个网页unload事件的回调函数结束时的Unix毫秒时间戳。如果没有前一个网页，或者之前的网页跳转不是在同一个域名内，则返回值为0。</li><li>redirectStart：返回第一个HTTP跳转开始时的Unix毫秒时间戳。如果没有跳转，或者不是同一个域名内部的跳转，则返回值为0。</li><li>redirectEnd：返回最后一个HTTP跳转结束时（即跳转回应的最后一个字节接受完成时）的Unix毫秒时间戳。如果没有跳转，或者不是同一个域名内部的跳转，则返回值为0。</li><li>fetchStart：返回浏览器准备使用HTTP请求读取文档时的Unix毫秒时间戳。该事件在网页查询本地缓存之前发生。</li><li>domainLookupStart：返回域名查询开始时的Unix毫秒时间戳。如果使用持久连接，或者信息是从本地缓存获取的，则返回值等同于fetchStart属性的值。</li><li>domainLookupEnd：返回域名查询结束时的Unix毫秒时间戳。如果使用持久连接，或者信息是从本地缓存获取的，则返回值等同于fetchStart属性的值。</li><li>connectStart：返回HTTP请求开始向服务器发送时的Unix毫秒时间戳。如果使用持久连接（persistent connection），则返回值等同于fetchStart属性的值。</li><li>connectEnd：返回浏览器与服务器之间的连接建立时的Unix毫秒时间戳。如果建立的是持久连接，则返回值等同于fetchStart属性的值。连接建立指的是所有握手和认证过程全部结束。</li><li>secureConnectionStart：返回浏览器与服务器开始安全链接的握手时的Unix毫秒时间戳。如果当前网页不要求安全连接，则返回0。</li><li>requestStart：返回浏览器向服务器发出HTTP请求时（或开始读取本地缓存时）的Unix毫秒时间戳。</li><li>responseStart：返回浏览器从服务器收到（或从本地缓存读取）第一个字节时的Unix毫秒时间戳。</li><li>responseEnd：返回浏览器从服务器收到（或从本地缓存读取）最后一个字节时（如果在此之前HTTP连接已经关闭，则返回关闭时）的Unix毫秒时间戳。</li><li>domLoading：返回当前网页DOM结构开始解析时（即Document.readyState属性变为“loading”、相应的readystatechange事件触发时）的Unix毫秒时间戳。</li><li>domInteractive：返回当前网页DOM结构结束解析、开始加载内嵌资源时（即Document.readyState属性变为“interactive”、相应的readystatechange事件触发时）的Unix毫秒时间戳。</li><li>domContentLoadedEventStart：返回当前网页DOMContentLoaded事件发生时（即DOM结构解析完毕、所有脚本开始运行时）的Unix毫秒时间戳。</li><li>domContentLoadedEventEnd：返回当前网页所有需要执行的脚本执行完成时的Unix毫秒时间戳。</li><li>domComplete：返回当前网页DOM结构生成时（即Document.readyState属性变为“complete”，以及相应的readystatechange事件发生时）的Unix毫秒时间戳。</li><li>loadEventStart：返回当前网页load事件的回调函数开始时的Unix毫秒时间戳。如果该事件还没有发生，返回0。</li><li>loadEventEnd：返回当前网页load事件的回调函数运行结束时的Unix毫秒时间戳。如果该事件还没有发生，返回0。</li></ul><p>根据上面这些属性，可以计算出网页加载各个阶段的耗时。比如，网页加载整个过程的耗时的计算方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var t = performance.timing; </span><br><span class="line">var pageLoadTime = t.loadEventEnd - t.navigationStart;</span><br></pre></td></tr></table></figure><h3 id="performance-now"><a href="#performance-now" class="headerlink" title="performance.now()"></a>performance.now()</h3><p>performance.now方法返回当前网页自从performance.timing.navigationStart到当前时间之间的微秒数（毫秒的千分之一）。也就是说，它的精度可以达到100万分之一秒。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">performance.now() </span><br><span class="line">// 23493457.476999998</span><br><span class="line"></span><br><span class="line">Date.now() - (performance.timing.navigationStart + performance.now())</span><br><span class="line">// -0.64306640625</span><br></pre></td></tr></table></figure><p>上面代码表示，performance.timing.navigationStart加上performance.now()，近似等于Date.now()，也就是说，Date.now()可以替代performance.now()。但是，前者返回的是毫秒，后者返回的是微秒，所以后者的精度比前者高1000倍。</p><p>通过两次调用performance.now方法，可以得到间隔的准确时间，用来衡量某种操作的耗时。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var start = performance.now();</span><br><span class="line">doTasks();</span><br><span class="line">var end = performance.now();</span><br><span class="line"></span><br><span class="line">console.log(&apos;耗时：&apos; + (end - start) + &apos;微秒。&apos;);</span><br></pre></td></tr></table></figure><h3 id="performance-mark"><a href="#performance-mark" class="headerlink" title="performance.mark()"></a>performance.mark()</h3><p>mark方法用于为相应的视点做标记。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.performance.mark(&apos;mark_fully_loaded&apos;);</span><br></pre></td></tr></table></figure><p>clearMarks方法用于清除标记，如果不加参数，就表示清除所有标记。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.peformance.clearMarks(&apos;mark_fully_loaded&apos;);</span><br><span class="line"></span><br><span class="line">window.performance.clearMarks();</span><br></pre></td></tr></table></figure><h3 id="performance-getEntries"><a href="#performance-getEntries" class="headerlink" title="performance.getEntries()"></a>performance.getEntries()</h3><p>浏览器获取网页时，会对网页中每一个对象（脚本文件、样式表、图片文件等等）发出一个HTTP请求。performance.getEntries方法以数组形式，返回这些请求的时间统计信息，有多少个请求，返回数组就会有多少个成员。</p><p>由于该方法与浏览器处理网页的过程相关，所以只能在浏览器中使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">window.performance.getEntries()[0]</span><br><span class="line"></span><br><span class="line">// PerformanceResourceTiming &#123; </span><br><span class="line">//   responseEnd: 4121.6200000017125, </span><br><span class="line">//   responseStart: 4120.0690000005125, </span><br><span class="line">//   requestStart: 3315.355000002455, </span><br><span class="line">//   ...</span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure><p>上面代码返回第一个HTTP请求（即网页的HTML源码）的时间统计信息。该信息以一个高精度时间戳的对象形式返回，每个属性的单位是微秒（microsecond），即百万分之一秒。</p><h3 id="performance-navigation对象"><a href="#performance-navigation对象" class="headerlink" title="performance.navigation对象"></a>performance.navigation对象</h3><p>除了时间信息，performance还可以提供一些用户行为信息，主要都存放在performance.navigation对象上面。</p><p>它有两个属性：</p><h4 id="performance-navigation-type"><a href="#performance-navigation-type" class="headerlink" title="performance.navigation.type"></a>performance.navigation.type</h4><p>该属性返回一个整数值，表示网页的加载来源，可能有以下4种情况：</p><ul><li>0：网页通过点击链接、地址栏输入、表单提交、脚本操作等方式加载，相当于常数performance.navigation.TYPE_NAVIGATENEXT。</li><li>1：网页通过“重新加载”按钮或者location.reload()方法加载，相当于常数performance.navigation.TYPE_RELOAD。</li><li>2：网页通过“前进”或“后退”按钮加载，相当于常数performance.navigation.TYPE_BACK_FORWARD。</li><li>255：任何其他来源的加载，相当于常数performance.navigation.TYPE_UNDEFINED。</li></ul><h4 id="performance-navigation-redirectCount"><a href="#performance-navigation-redirectCount" class="headerlink" title="performance.navigation.redirectCount"></a>performance.navigation.redirectCount</h4><p>该属性表示当前网页经过了多少次重定向跳转。</p><h2 id="计算一些性能数据"><a href="#计算一些性能数据" class="headerlink" title="计算一些性能数据"></a>计算一些性能数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">//重定向次数：</span><br><span class="line">var redirectCount = navigation &amp;&amp; navigation.redirectCount;</span><br><span class="line"> </span><br><span class="line">//跳转耗时：</span><br><span class="line">var redirect = timing.redirectEnd - timing.redirectStart;</span><br><span class="line"> </span><br><span class="line">//APP CACHE 耗时：</span><br><span class="line">var appcache = Math.max(timing.domainLookupStart - timing.fetchStart, 0);</span><br><span class="line"> </span><br><span class="line">//DNS 解析耗时：</span><br><span class="line">var dns = timing.domainLookupEnd - timing.domainLookupStart;</span><br><span class="line"> </span><br><span class="line">//TCP 链接耗时：</span><br><span class="line">var conn = timing.connectEnd - timing.connectStart;</span><br><span class="line"> </span><br><span class="line">//等待服务器响应耗时（注意是否存在cache）：</span><br><span class="line">var request = timing.responseStart - timing.requestStart;</span><br><span class="line"> </span><br><span class="line">//内容加载耗时（注意是否存在cache）:</span><br><span class="line">var response = timing.responseEnd - timing.responseStart;</span><br><span class="line"> </span><br><span class="line">//总体网络交互耗时，即开始跳转到服务器资源下载完成：</span><br><span class="line">var network = timing.responseEnd - timing.navigationStart;</span><br><span class="line"> </span><br><span class="line">//渲染处理：</span><br><span class="line">var processing = (timing.domComplete || timing.domLoading) - timing.domLoading;</span><br><span class="line"> </span><br><span class="line">//抛出 load 事件：</span><br><span class="line">var load = timing.loadEventEnd - timing.loadEventStart;</span><br><span class="line"> </span><br><span class="line">//总耗时：</span><br><span class="line">var total = (timing.loadEventEnd || timing.loadEventStart || timing.domComplete || timing.domLoading) - timing.navigationStart;</span><br><span class="line"> </span><br><span class="line">//可交互：</span><br><span class="line">var active = timing.domInteractive - timing.navigationStart;</span><br><span class="line"> </span><br><span class="line">//请求响应耗时，即 T0，注意cache：</span><br><span class="line">var t0 = timing.responseStart - timing.navigationStart;</span><br><span class="line"> </span><br><span class="line">//首次出现内容（白屏时间），即 T1：(注意是后端渲染还是由前端渲染)</span><br><span class="line">var t1 = timing.domLoading - timing.navigationStart;</span><br><span class="line"> </span><br><span class="line">//内容加载完毕，即 T3：</span><br><span class="line">var t3 = timing.loadEventEnd - timing.navigationStart;</span><br></pre></td></tr></table></figure><h2 id="理解chrome的Resource-Timing"><a href="#理解chrome的Resource-Timing" class="headerlink" title="理解chrome的Resource Timing"></a>理解chrome的Resource Timing</h2><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><p>请注意：当使用具有跨源资源的 Resource Timing API 时，确保所有资源具有 CORS 标头。</p><p>Resource Timing API 提供了与接收各个资源的时间有关的大量详细信息。请求生命周期的主要阶段包括：</p><ul><li>重定向</li><li>立即开始 startTime。</li><li>如果正在发生重定向，redirectStart 也会开始。</li><li>如果重定向在本阶段末发生，将采集 redirectEnd。</li><li>应用缓存</li><li>如果是应用缓存在实现请求，将采集 fetchStart 时间。</li><li>DNS</li><li>domainLookupStart 时间在 DNS 请求开始时采集。</li><li>domainLookupEnd 时间在 DNS 请求结束时采集。</li><li>TCP</li><li>connectStart 在初始连接到服务器时采集。</li><li>如果正在使用 TLS 或 SSL，secureConnectionStart 将在握手（确保连接安全）开始时开始。</li><li>connectEnd 将在到服务器的连接完成时采集。</li><li>请求</li><li>requestStart 会在对某个资源的请求被发送到服务器后立即采集。</li><li>响应</li><li>responseStart 是服务器初始响应请求的时间。</li><li>responseEnd 是请求结束并且数据完成检索的时间。</li></ul><p><img src="/img/performance/resource-timing-api.png" alt="resource-timing-api"></p><h3 id="在-DevTools-中查看"><a href="#在-DevTools-中查看" class="headerlink" title="在 DevTools 中查看"></a>在 DevTools 中查看</h3><p>要查看 Network 面板中给定条目完整的耗时信息，您有三种选择。</p><ol><li>将鼠标悬停到 Timeline 列下的耗时图表上。这将呈现一个显示完整耗时数据的弹出窗口。</li><li>点击任何条目并打开该条目的 Timing 标签。</li><li>使用 Resource Timing API 从 JavaScript 检索原始数据。</li></ol><p><img src="/img/performance/resource-timing-data.png" alt="resource-timing-data"></p><p>此代码可以在 DevTools 的 Console 中运行。 它将使用 Network Timing API 检索所有资源。 然后，它将通过查找是否存在名称中包含“style.css”的条目对条目进行过滤。 如果找到，将返回相应条目。</p><p><img src="/img/performance/resource-timing-entry.png" alt="resource-timing-entry"></p><h4 id="Queuing"><a href="#Queuing" class="headerlink" title="Queuing"></a>Queuing</h4><p>如果某个请求正在排队，则指示：</p><ul><li>请求已被渲染引擎推迟，因为该请求的优先级被视为低于关键资源（例如脚本/样式）的优先级。 图像经常发生这种情况。</li><li>请求已被暂停，以等待将要释放的不可用 TCP 套接字。</li><li>请求已被暂停，因为在 HTTP 1 上，浏览器仅允许每个源拥有六个 TCP 连接。</li><li>生成磁盘缓存条目所用的时间（通常非常迅速）</li></ul><h4 id="Stalled-Blocking"><a href="#Stalled-Blocking" class="headerlink" title="Stalled/Blocking"></a>Stalled/Blocking</h4><p>请求等待发送所用的时间。 可以是等待 Queueing 中介绍的任何一个原因。 此外，此时间包含代理协商所用的任何时间。</p><h4 id="Proxy-Negotiation"><a href="#Proxy-Negotiation" class="headerlink" title="Proxy Negotiation"></a>Proxy Negotiation</h4><p>与代理服务器连接协商所用的时间。</p><h4 id="DNS-Lookup"><a href="#DNS-Lookup" class="headerlink" title="DNS Lookup"></a>DNS Lookup</h4><p>执行 DNS 查询所用的时间。 页面上的每一个新域都需要完整的往返才能执行 DNS 查询。</p><h4 id="Initial-Connection-Connecting"><a href="#Initial-Connection-Connecting" class="headerlink" title="Initial Connection / Connecting"></a>Initial Connection / Connecting</h4><p>建立连接所用的时间，包括 TCP 握手/重试和协商 SSL 的时间。</p><h4 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h4><p>完成 SSL 握手所用的时间。</p><h4 id="Request-Sent-Sending"><a href="#Request-Sent-Sending" class="headerlink" title="Request Sent / Sending"></a>Request Sent / Sending</h4><p>发出网络请求所用的时间。 通常不到一毫秒。</p><h4 id="Waiting-TTFB"><a href="#Waiting-TTFB" class="headerlink" title="Waiting (TTFB)"></a>Waiting (TTFB)</h4><p>等待初始响应所用的时间，也称为至第一字节的时间。 此时间将捕捉到服务器往返的延迟时间，以及等待服务器传送响应所用的时间。</p><h4 id="Content-Download-Downloading"><a href="#Content-Download-Downloading" class="headerlink" title="Content Download / Downloading"></a>Content Download / Downloading</h4><p>接收响应数据所用的时间。</p><h3 id="诊断网络问题"><a href="#诊断网络问题" class="headerlink" title="诊断网络问题"></a>诊断网络问题</h3><p>通过 Network 面板可以发现大量可能的问题。查找这些问题需要很好地了解客户端与服务器如何通信，以及协议施加的限制。</p><h4 id="已被加入队列或已被停止的系列"><a href="#已被加入队列或已被停止的系列" class="headerlink" title="已被加入队列或已被停止的系列"></a>已被加入队列或已被停止的系列</h4><p>最常见问题是一系列已被加入队列或已被停止的条目。这表明正在从单个网域检索太多的资源。在 HTTP 1.0/1.1 连接上，Chrome 会将每个主机强制设置为最多六个 TCP 连接。如果您一次请求十二个条目，前六个将开始，而后六个将被加入队列。最初的一半完成后，队列中的第一个条目将开始其请求流程。</p><p><img src="/img/performance/stalled-request-series.png" alt="stalled-request-series"></p><p>要为传统的 HTTP 1 流量解决此问题，您需要实现域分片。也就是在您的应用上设置多个子域，以便提供资源。然后，在子域之间平均分配正在提供的资源。</p><p>HTTP 1 连接的修复结果不会应用到 HTTP 2 连接上。事实上，前者的结果会影响后者。 如果您部署了 HTTP 2，请不要对您的资源进行域分片，因为它与 HTTP 2 的操作方式相反。在 HTTP 2 中，到服务器的单个 TCP 连接作为多路复用连接。这消除了 HTTP 1 中的六个连接限制，并且可以通过单个连接同时传输多个资源。</p><h4 id="至第一字节的漫长时间"><a href="#至第一字节的漫长时间" class="headerlink" title="至第一字节的漫长时间"></a>至第一字节的漫长时间</h4><p>又称：大片绿色</p><p><img src="/img/performance/indicator-of-high-ttfb.png" alt="indicator-of-high-ttfb"></p><p>等待时间长表示至第一字节的时间 (TTFB) 漫长。建议将此值控制在 200 毫秒以下。长 TTFB 会揭示两个主要问题之一。</p><p>请执行以下任一操作：</p><ol><li>客户端与服务器之间的网络条件较差，或者</li><li>服务器应用的响应慢</li></ol><p>要解决长 TTFB，首先请尽可能缩减网络。理想的情况是将应用托管在本地，然后查看 TTFB 是否仍然很长。如果仍然很长，则需要优化应用的响应速度。可以是优化数据库查询、为特定部分的内容实现缓存，或者修改您的网络服务器配置。很多原因都可能导致后端缓慢。您需要调查您的软件并找出未满足您的性能预算的内容。</p><p>如果本地托管后 TTFB 仍然漫长，那么问题出在您的客户端与服务器之间的网络上。很多事情都可以阻止网络遍历。客户端与服务器之间有许多点，每个点都有其自己的连接限制并可能引发问题。测试时间是否缩短的最简单方法是将您的应用置于其他主机上，并查看 TTFB 是否有所改善。</p><h4 id="达到吞吐量能力"><a href="#达到吞吐量能力" class="headerlink" title="达到吞吐量能力"></a>达到吞吐量能力</h4><p>又称：大片蓝色</p><p><img src="/img/performance/indicator-of-large-content.png" alt="indicator-of-large-content"></p><p>如果您看到 Content Download 阶段花费了大量时间，则提高服务器响应或串联不会有任何帮助。首要的解决办法是减少发送的字节数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;performance&quot;&gt;&lt;a href=&quot;#performance&quot; class=&quot;headerlink&quot; title=&quot;performance&quot;&gt;&lt;/a&gt;performance&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="https://ryansuen.github.io/2017/12/21/JSON/"/>
    <id>https://ryansuen.github.io/2017/12/21/JSON/</id>
    <published>2017-12-20T22:11:34.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSON-JavaScript-Object-Notation-简介"><a href="#JSON-JavaScript-Object-Notation-简介" class="headerlink" title="JSON(JavaScript Object Notation)简介"></a>JSON(JavaScript Object Notation)简介</h3><p>JSON是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。 它基于JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。 这些特性使JSON成为理想的数据交换语言。</p><p>JSON 数据格式与语言无关，脱胎于 JavaScript，但目前很多编程语言都支持 JSON 格式数据的生成和解析。JSON 的官方 MIME 类型是 application/json，文件扩展名是 .json。</p><p>JSON出现之前，XML一直是互联网传输结构化数据的标准。然而业界不少人认为XML过于烦琐，冗长。为了解决些问题JSON应机而生。</p><p>JSON与XML最大的不同在于XML是一个完整的标记语言，而JSON不是。这使得XML在程序判读上需要比较多的功夫。主要的原因在于XML的设计理念与JSON不同。XML利用标记语言的特性提供了绝佳的延展性（如XPath），在数据存储，扩展及高级检索方面具备对JSON的优势，而JSON则由于比XML更加小巧，以及浏览器的内建快速解析支持，使得其更适用于网络数据传输领域。</p><p>关于JSON，最重要的是理解它是一种数据格式，不是一种编程语言。虽然JSON与Javascript有几乎完全相似的语法形式，但JSON并不从属于Javascript。并非只有Javascript才使用JSON，很多语言都有针对JSON的解析器和序列化器。</p><p>它基于 JavaScript 语法，但与之不同：一些JavaScript不是JSON，一些JSON不是JavaScript。参考 JSON：<a href="http://timelessrepo.com/json-isnt-a-javascript-subset" target="_blank" rel="noopener">不是JavaScript 的子集</a>。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>JSON语法可以表示以下三种类型的值：</p><ul><li>简单值：使用与Javascript相同的语法，可以在JSON中表示字符串，数值，布尔值和null。注意JSON不支持Javascript中的特殊对象undefined.</li><li>对象：一个对象包含一系列无序的名称／值对(pair)，一个对象以{开始，并以}结束。每个名称／值对之间使用,分区。</li><li>一个数组是一个值(value)的集合，一个数组以[，并已]结束。值之间使用,分区。</li></ul><h4 id="简单值"><a href="#简单值" class="headerlink" title="简单值"></a>简单值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//数据值</span><br><span class="line">666</span><br><span class="line"></span><br><span class="line">//字符串</span><br><span class="line">“testing”</span><br></pre></td></tr></table></figure><p>JSON字符串与Javascript字符串最大的区别在于，JSON字符串必须使用双引号（单引号会导致语法错误）。</p><p>布尔值与null也是JSON的有效形式。实际应该用它们只是复杂的数据结构当中的一部分。</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//Javascript</span><br><span class="line">var person = &#123;</span><br><span class="line">    name: &apos;ryan&apos;,</span><br><span class="line">    age: 6</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var person = &#123;</span><br><span class="line">    &quot;name&quot;: &quot;ryan&quot;,</span><br><span class="line">    &quot;age&quot;: 6</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//JSON</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;ryan&quot;,</span><br><span class="line">    &quot;age&quot;: 6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JSON中的对象要求给属性加双引号（不加或单引号都会导致语法错误）。</li><li>JSON当中没有变量的概念。</li><li>JSON没有末尾的分号。</li><li>JSON对象最后一个属性不可以有逗号。（对象中嵌套的对象也一样）</li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// javascript</span><br><span class="line">var array = [25, &quot;hello&quot;, &quot;world&quot;];</span><br><span class="line"></span><br><span class="line">//JSON</span><br><span class="line">[25, &quot;hello&quot;, &quot;world&quot;]</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        “name”: &quot;name1&quot;,</span><br><span class="line">        &quot;age&quot;: 1,</span><br><span class="line">        &quot;detail&quot;: &#123;</span><br><span class="line">            &quot;aaa&quot;: &quot;aaa&quot;,</span><br><span class="line">            &quot;bbb&quot;: &quot;bbb&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        “name”: &quot;name2&quot;,</span><br><span class="line">        &quot;age&quot;: 2,</span><br><span class="line">        &quot;detail&quot;: &#123;</span><br><span class="line">            &quot;aaa&quot;: &quot;aaa&quot;,</span><br><span class="line">            &quot;bbb&quot;: &quot;bbb&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        “name”: &quot;name3&quot;,</span><br><span class="line">        &quot;age&quot;: 3,</span><br><span class="line">        &quot;detail&quot;: &#123;</span><br><span class="line">            &quot;aaa&quot;: &quot;aaa&quot;,</span><br><span class="line">            &quot;bbb&quot;: &quot;bbb&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        “name”: &quot;name4&quot;,</span><br><span class="line">        &quot;age&quot;: 4,</span><br><span class="line">        &quot;detail&quot;: &#123;</span><br><span class="line">            &quot;aaa&quot;: &quot;aaa&quot;,</span><br><span class="line">            &quot;bbb&quot;: &quot;bbb&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>数据也没有变量的概念</li><li>同样也没有分号</li></ul><h3 id="解析与序列化-javascript中的JSON对象"><a href="#解析与序列化-javascript中的JSON对象" class="headerlink" title="解析与序列化(javascript中的JSON对象)"></a>解析与序列化(javascript中的JSON对象)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//JSON使用</span><br><span class="line">books[2].title</span><br><span class="line"></span><br><span class="line">//XML</span><br><span class="line">doc.getElementsByTagName(&quot;book&quot;)[2].getAtrribute(&quot;title&quot;)</span><br></pre></td></tr></table></figure><p>从上也不难理解为什么JSON受开发人员欢迎。</p><h4 id="Javascript早期解析JSON"><a href="#Javascript早期解析JSON" class="headerlink" title="Javascript早期解析JSON"></a>Javascript早期解析JSON</h4><p>直接使用eval()对JSON数据进行中值。这样会存在风险，因可能会执行一些恶意代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//前端老人可能还用过如下方式：</span><br><span class="line">var json= eval(&quot;&#123;message:(function ()&#123; window.location=&apos;http://zh.wikipedia.org/wiki/JSON#.E5.AE.89.E5.85.A8.E6.80.A7.E5.95.8F.E9.A1.8C&apos;; &#125;)()&#125;&quot;);</span><br><span class="line"></span><br><span class="line">var json= eval(&quot;(&quot; + &quot;&#123;message:(function ()&#123; window.location=&apos;http://zh.wikipedia.org/wiki/JSON#.E5.AE.89.E5.85.A8.E6.80.A7.E5.95.8F.E9.A1.8C&apos;; &#125;)()&#125;&quot; + &quot;)&quot;);</span><br><span class="line"></span><br><span class="line">//上面解析的内容就非标准的JSON，存在恶意代码。</span><br></pre></td></tr></table></figure></p><h4 id="javascript中的JSON对象"><a href="#javascript中的JSON对象" class="headerlink" title="javascript中的JSON对象"></a>javascript中的JSON对象</h4><h5 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h5><ul><li>作用：解析一个JSON字符串，可选地转换生成的值及其属性，并返回值。</li><li><p>语法</p><ul><li>JSON.parse(text[, reviver])</li><li>参数<ul><li>text:要被解析成JavaScript值的字符串，查看 JSON 对象学习的JSON 语法的说明。</li><li>reviver [可选] 如果是一个函数，则规定了原始值如何被解析改造，在被返回之前。</li></ul></li><li>返回值: Object对应给定的JSON文本。</li><li>异常: 若被解析的 JSON 字符串是非法的，则会抛出 一个语法错误 异常。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse(&apos;&#123;&#125;&apos;);              // &#123;&#125;</span><br><span class="line">JSON.parse(&apos;true&apos;);            // true</span><br><span class="line">JSON.parse(&apos;&quot;foo&quot;&apos;);           // &quot;foo&quot;</span><br><span class="line">JSON.parse(&apos;[1, 5, &quot;false&quot;]&apos;); // [1, 5, &quot;false&quot;]</span><br><span class="line">JSON.parse(&apos;null&apos;);            // null</span><br><span class="line">JSON.parse(&apos;1&apos;);               //  1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用 reviver 函数<br>如果指定了 reviver 函数，则解析出的 JavaScript 值（解析值）会经过一次转换后才将被最终返回（返回值）。更具体点讲就是：解析值本身以及它所包含的所有属性，会按照一定的顺序（从最最里层的属性开始，一级级往外，最终到达顶层，也就是解析值本身）分别的去调用 reviver 函数，在调用过程中，当前属性所属的对象会作为 this 值，当前属性名和属性值会分别作为第一个和第二个参数传入 reviver 中。如果 reviver 返回 undefined，则当前属性会从所属对象中删除，如果返回了其他值，则返回的值会成为当前属性新的属性值。</p></li></ul><p>当遍历到最顶层的值（解析值）时，传入 reviver 函数的参数会是空字符串 “”（因为此时已经没有真正的属性）和当前的解析值（有可能已经被修改过了），当前的 this 值会是 {“”: 修改过的解析值}，在编写 reviver 函数时，要注意到这个特例。（这个函数的遍历顺序依照：从最内层开始，按照层级顺序，依次向外遍历）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">JSON.parse(&apos;&#123;&quot;p&quot;: 5&#125;&apos;, function (k, v) &#123;</span><br><span class="line">    if(k === &apos;&apos;) return v;     // 如果到了最顶层，则直接返回属性值，</span><br><span class="line">    return v * 2;              // 否则将属性值变为原来的 2 倍。</span><br><span class="line">&#125;);                            // &#123; p: 10 &#125;</span><br><span class="line"></span><br><span class="line">JSON.parse(&apos;&#123;&quot;1&quot;: 1, &quot;2&quot;: 2,&quot;3&quot;: &#123;&quot;4&quot;: 4, &quot;5&quot;: &#123;&quot;6&quot;: 6&#125;&#125;&#125;&apos;, function (k, v) &#123;</span><br><span class="line">    console.log(k); // 输出当前的属性名，从而得知遍历顺序是从内向外的，</span><br><span class="line">                    // 最后一个属性名会是个空字符串。</span><br><span class="line">    return v;       // 返回原始属性值，相当于没有传递 reviver 参数。</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// 4</span><br><span class="line">// 6</span><br><span class="line">// 5</span><br><span class="line">// 3 </span><br><span class="line">// &quot;&quot;</span><br></pre></td></tr></table></figure><ul><li>JSON.parse() 不允许用逗号作为结尾<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// both will throw a SyntaxError</span><br><span class="line">JSON.parse(&quot;[1, 2, 3, 4, ]&quot;);</span><br><span class="line">JSON.parse(&apos;&#123;&quot;foo&quot; : 1, &#125;&apos;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h5><ul><li><p>作用：返回与指定值相对应的一个JSON字符串，可选地仅包含某些属性或以用户定义的方式替换属性值。</p></li><li><p>语法：JSON.stringify(value[, replacer [, space]])</p></li><li>参数<ul><li>value： 将要序列化成 一个JSON 字符串的值。</li><li>replacer 【可选】：如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为null或者未提供，则对象所有的属性都会被序列化；关于该参数更详细的解释和示例，请参考使用原生的 JSON 对象一文。</li><li>space 【可选】：指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串(字符串的前十个字母)，该字符串将被作为空格；如果该参数没有提供（或者为null）将没有空格。</li></ul></li><li><p>返回值： 一个表示给定值的JSON字符串。</p></li><li><p>关于序列化，有下面五点注意事项：</p><ul><li>非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。</li><li>布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。</li><li>undefined、任意的函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 null（出现在数组中时）。</li><li>所有以 symbol 为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。</li><li>不可枚举的属性会被忽略<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">JSON.stringify(&#123;&#125;);                        // &apos;&#123;&#125;&apos;</span><br><span class="line">JSON.stringify(true);                      // &apos;true&apos;</span><br><span class="line">JSON.stringify(&quot;foo&quot;);                     // &apos;&quot;foo&quot;&apos;</span><br><span class="line">JSON.stringify([1, &quot;false&quot;, false]);       // &apos;[1,&quot;false&quot;,false]&apos;</span><br><span class="line">JSON.stringify(&#123; x: 5 &#125;);                  // &apos;&#123;&quot;x&quot;:5&#125;&apos;</span><br><span class="line"></span><br><span class="line">JSON.stringify(&#123;x: 5, y: 6&#125;);              </span><br><span class="line">// &quot;&#123;&quot;x&quot;:5,&quot;y&quot;:6&#125;&quot;</span><br><span class="line"></span><br><span class="line">JSON.stringify([new Number(1), new String(&quot;false&quot;), new Boolean(false)]); </span><br><span class="line">// &apos;[1,&quot;false&quot;,false]&apos;</span><br><span class="line"></span><br><span class="line">JSON.stringify(&#123;x: undefined, y: Object, z: Symbol(&quot;&quot;)&#125;); </span><br><span class="line">// &apos;&#123;&#125;&apos;</span><br><span class="line"></span><br><span class="line">JSON.stringify([undefined, Object, Symbol(&quot;&quot;)]);          </span><br><span class="line">// &apos;[null,null,null]&apos; </span><br><span class="line"></span><br><span class="line">JSON.stringify(&#123;[Symbol(&quot;foo&quot;)]: &quot;foo&quot;&#125;);                 </span><br><span class="line">// &apos;&#123;&#125;&apos;</span><br><span class="line"></span><br><span class="line">JSON.stringify(&#123;[Symbol.for(&quot;foo&quot;)]: &quot;foo&quot;&#125;, [Symbol.for(&quot;foo&quot;)]);</span><br><span class="line">// &apos;&#123;&#125;&apos;</span><br><span class="line"></span><br><span class="line">JSON.stringify(</span><br><span class="line">    &#123;[Symbol.for(&quot;foo&quot;)]: &quot;foo&quot;&#125;, </span><br><span class="line">    function (k, v) &#123;</span><br><span class="line">        if (typeof k === &quot;symbol&quot;)&#123;</span><br><span class="line">            return &quot;a symbol&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// undefined </span><br><span class="line"></span><br><span class="line">// 不可枚举的属性默认会被忽略：</span><br><span class="line">JSON.stringify( </span><br><span class="line">    Object.create(</span><br><span class="line">        null, </span><br><span class="line">        &#123; </span><br><span class="line">            x: &#123; value: &apos;x&apos;, enumerable: false &#125;, </span><br><span class="line">            y: &#123; value: &apos;y&apos;, enumerable: true &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// &quot;&#123;&quot;y&quot;:&quot;y&quot;&#125;&quot;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>replacer参数</p></li></ul><p>eplacer参数可以是一个函数或者一个数组。作为函数，它有两个参数，键(key)值(value)都会被序列化。</p><pre><code>1. 如果返回一个 Number, 转换成相应的字符串被添加入JSON字符串。2. 如果返回一个 String, 该字符串作为属性值被添加入JSON。3. 如果返回一个 Boolean, &quot;true&quot; 或者 &quot;false&quot;被作为属性值被添加入JSON字符串。4. 如果返回任何其他对象，该对象递归地序列化成JSON字符串，对每个属性调用replaceer方法。除非该对象是一个函数，这种情况将不会被序列化成JSON字符串。5. 如果返回undefined，该属性值不会在JSON字符串中输出。</code></pre><p>注意: 不能用replacer方法，从数组中移除值(values)，如若返回undefined或者一个函数，将会被null取代。</p><h6 id="例子-function"><a href="#例子-function" class="headerlink" title="例子(function)"></a>例子(function)</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function replacer(key, value) &#123;</span><br><span class="line">  if (typeof value === &quot;string&quot;) &#123;</span><br><span class="line">    return undefined;</span><br><span class="line">  &#125;</span><br><span class="line">  return value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var foo = &#123;foundation: &quot;Mozilla&quot;, model: &quot;box&quot;, week: 45, transport: &quot;car&quot;, month: 7&#125;;</span><br><span class="line">var jsonString = JSON.stringify(foo, replacer);</span><br><span class="line">//JSON序列化结果为 &#123;&quot;week&quot;:45,&quot;month&quot;:7&#125;.</span><br></pre></td></tr></table></figure><h6 id="例子-array"><a href="#例子-array" class="headerlink" title="例子(array)"></a>例子(array)</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//如果replacer是一个数组，数组的值代表将被序列化成JSON字符串的属性名。</span><br><span class="line">JSON.stringify(foo, [&apos;week&apos;, &apos;month&apos;]);  </span><br><span class="line">// &apos;&#123;&quot;week&quot;:45,&quot;month&quot;:7&#125;&apos;, 只保留“week”和“month”属性值。</span><br></pre></td></tr></table></figure><h6 id="space-参数"><a href="#space-参数" class="headerlink" title="space 参数"></a>space 参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//space 参数用来控制结果字符串里面的间距。如果是一个数字, 则在字符串化时每一级别会比上一级别缩进多这个数字值的空格（最多10个空格）；如果是一个字符串，则每一级别会比上一级别多缩进用该字符串（或该字符串的前十个字符）。</span><br><span class="line">JSON.stringify(&#123; a: 2 &#125;, null, &quot; &quot;);   // &apos;&#123;\n &quot;a&quot;: 2\n&#125;&apos;</span><br><span class="line"></span><br><span class="line">//使用制表符（\t）来缩进：</span><br><span class="line">JSON.stringify(&#123; uno: 1, dos : 2 &#125;, null, &apos;\t&apos;)</span><br><span class="line">// &apos;&#123;            \</span><br><span class="line">//     &quot;uno&quot;: 1, \</span><br><span class="line">//     &quot;dos&quot;: 2  \</span><br><span class="line">// &#125;&apos;</span><br></pre></td></tr></table></figure><h6 id="toJSON-方法"><a href="#toJSON-方法" class="headerlink" title="toJSON 方法"></a>toJSON 方法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//如果一个被序列化的对象拥有 toJSON 方法，那么该 toJSON 方法就会覆盖该对象默认的序列化行为：不是那个对象被序列化，而是调用 toJSON 方法后的返回值会被序列化，例如：</span><br><span class="line">var obj = &#123;</span><br><span class="line">  foo: &apos;foo&apos;,</span><br><span class="line">  toJSON: function () &#123;</span><br><span class="line">    return &apos;bar&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">JSON.stringify(obj);      // &apos;&quot;bar&quot;&apos;</span><br><span class="line">JSON.stringify(&#123;x: obj&#125;); // &apos;&#123;&quot;x&quot;:&quot;bar&quot;&#125;&apos;</span><br></pre></td></tr></table></figure><h6 id="JSON-stringify用作-JavaScript"><a href="#JSON-stringify用作-JavaScript" class="headerlink" title="JSON.stringify用作 JavaScript"></a>JSON.stringify用作 JavaScript</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//注意JSON不是javascript严格意义上的子集，在JSON中不需要省略两条终线(Line separator和Paragraph separator)但在JavaScript中需要被省略。因此，如果JSON被用作JSONP时，下面方法可以使用：</span><br><span class="line">function jsFriendlyJSONStringify (s) &#123;</span><br><span class="line">    return JSON.stringify(s).</span><br><span class="line">        replace(/\u2028/g, &apos;\\u2028&apos;).</span><br><span class="line">        replace(/\u2029/g, &apos;\\u2029&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var s = &#123;</span><br><span class="line">    a: String.fromCharCode(0x2028),</span><br><span class="line">    b: String.fromCharCode(0x2029)</span><br><span class="line">&#125;;</span><br><span class="line">try &#123;</span><br><span class="line">    eval(&apos;(&apos; + JSON.stringify(s) + &apos;)&apos;);</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">    console.log(e); // &quot;SyntaxError: unterminated string literal&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// No need for a catch</span><br><span class="line">eval(&apos;(&apos; + jsFriendlyJSONStringify(s) + &apos;)&apos;);</span><br><span class="line"></span><br><span class="line">// console.log in Firefox unescapes the Unicode if</span><br><span class="line">//   logged to console, so we use alert</span><br><span class="line">alert(jsFriendlyJSONStringify(s)); // &#123;&quot;a&quot;:&quot;\u2028&quot;,&quot;b&quot;:&quot;\u2029&quot;&#125;</span><br></pre></td></tr></table></figure><h6 id="使用-JSON-stringify-结合-localStorage-的例子"><a href="#使用-JSON-stringify-结合-localStorage-的例子" class="headerlink" title="使用 JSON.stringify 结合 localStorage 的例子"></a>使用 JSON.stringify 结合 localStorage 的例子</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//一些时候，你想存储用户创建的一个对象，并且，即使在浏览器被关闭后仍能恢复该对象。下面的例子是 JSON.stringify 适用于这种情形的一个样板：</span><br><span class="line">// 创建一个示例数据</span><br><span class="line">var session = &#123;</span><br><span class="line">    &apos;screens&apos; : [],</span><br><span class="line">    &apos;state&apos; : true</span><br><span class="line">&#125;;</span><br><span class="line">session.screens.push(&#123;&quot;name&quot;:&quot;screenA&quot;, &quot;width&quot;:450, &quot;height&quot;:250&#125;);</span><br><span class="line">session.screens.push(&#123;&quot;name&quot;:&quot;screenB&quot;, &quot;width&quot;:650, &quot;height&quot;:350&#125;);</span><br><span class="line">session.screens.push(&#123;&quot;name&quot;:&quot;screenC&quot;, &quot;width&quot;:750, &quot;height&quot;:120&#125;);</span><br><span class="line">session.screens.push(&#123;&quot;name&quot;:&quot;screenD&quot;, &quot;width&quot;:250, &quot;height&quot;:60&#125;);</span><br><span class="line">session.screens.push(&#123;&quot;name&quot;:&quot;screenE&quot;, &quot;width&quot;:390, &quot;height&quot;:120&#125;);</span><br><span class="line">session.screens.push(&#123;&quot;name&quot;:&quot;screenF&quot;, &quot;width&quot;:1240, &quot;height&quot;:650&#125;);</span><br><span class="line"></span><br><span class="line">// 使用 JSON.stringify 转换为 JSON 字符串</span><br><span class="line">// 然后使用 localStorage 保存在 session 名称里</span><br><span class="line">localStorage.setItem(&apos;session&apos;, JSON.stringify(session));</span><br><span class="line"></span><br><span class="line">// 然后是如何转换通过 JSON.stringify 生成的字符串，该字符串以 JSON 格式保存在 localStorage 里</span><br><span class="line">var restoredSession = JSON.parse(localStorage.getItem(&apos;session&apos;));</span><br><span class="line"></span><br><span class="line">// 现在 restoredSession 包含了保存在 localStorage 里的对象</span><br><span class="line">console.log(restoredSession);</span><br></pre></td></tr></table></figure><h6 id="复制对象"><a href="#复制对象" class="headerlink" title="复制对象"></a>复制对象</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;a: 123, b: 234&#125;;</span><br><span class="line">var b = JSON.parse(JSON.stringify(a));</span><br><span class="line">console.log(a === b);   //false</span><br></pre></td></tr></table></figure><h4 id="Polyfill"><a href="#Polyfill" class="headerlink" title="Polyfill"></a>Polyfill</h4><p>JSON对象不被旧版本浏览器支持。你可以把下面代码放到脚本的开始位置，这样就可以在那些没有原生支持 JSON 对象的浏览器（如IE6）中使用 JSON对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">if (!window.JSON) &#123;</span><br><span class="line">  window.JSON = &#123;</span><br><span class="line">    parse: function(sJSON) &#123; return eval(&apos;(&apos; + sJSON + &apos;)&apos;); &#125;,</span><br><span class="line">    stringify: (function () &#123;</span><br><span class="line">      var toString = Object.prototype.toString;</span><br><span class="line">      var isArray = Array.isArray || function (a) &#123; return toString.call(a) === &apos;[object Array]&apos;; &#125;;</span><br><span class="line">      var escMap = &#123;&apos;&quot;&apos;: &apos;\\&quot;&apos;, &apos;\\&apos;: &apos;\\\\&apos;, &apos;\b&apos;: &apos;\\b&apos;, &apos;\f&apos;: &apos;\\f&apos;, &apos;\n&apos;: &apos;\\n&apos;, &apos;\r&apos;: &apos;\\r&apos;, &apos;\t&apos;: &apos;\\t&apos;&#125;;</span><br><span class="line">      var escFunc = function (m) &#123; return escMap[m] || &apos;\\u&apos; + (m.charCodeAt(0) + 0x10000).toString(16).substr(1); &#125;;</span><br><span class="line">      var escRE = /[\\&quot;\u0000-\u001F\u2028\u2029]/g;</span><br><span class="line">      return function stringify(value) &#123;</span><br><span class="line">        if (value == null) &#123;</span><br><span class="line">          return &apos;null&apos;;</span><br><span class="line">        &#125; else if (typeof value === &apos;number&apos;) &#123;</span><br><span class="line">          return isFinite(value) ? value.toString() : &apos;null&apos;;</span><br><span class="line">        &#125; else if (typeof value === &apos;boolean&apos;) &#123;</span><br><span class="line">          return value.toString();</span><br><span class="line">        &#125; else if (typeof value === &apos;object&apos;) &#123;</span><br><span class="line">          if (typeof value.toJSON === &apos;function&apos;) &#123;</span><br><span class="line">            return stringify(value.toJSON());</span><br><span class="line">          &#125; else if (isArray(value)) &#123;</span><br><span class="line">            var res = &apos;[&apos;;</span><br><span class="line">            for (var i = 0; i &lt; value.length; i++)</span><br><span class="line">              res += (i ? &apos;, &apos; : &apos;&apos;) + stringify(value[i]);</span><br><span class="line">            return res + &apos;]&apos;;</span><br><span class="line">          &#125; else if (toString.call(value) === &apos;[object Object]&apos;) &#123;</span><br><span class="line">            var tmp = [];</span><br><span class="line">            for (var k in value) &#123;</span><br><span class="line">              if (value.hasOwnProperty(k))</span><br><span class="line">                tmp.push(stringify(k) + &apos;: &apos; + stringify(value[k]));</span><br><span class="line">            &#125;</span><br><span class="line">            return &apos;&#123;&apos; + tmp.join(&apos;, &apos;) + &apos;&#125;&apos;;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return &apos;&quot;&apos; + value.toString().replace(escRE, escFunc) + &apos;&quot;&apos;;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)()</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>众所周知，更复杂的JSON对象 polyfills 是[clarinet]<a href="https://github.com/dscape/clarinet()" target="_blank" rel="noopener">https://github.com/dscape/clarinet()</a><br><a href="http://oboejs.com/" target="_blank" rel="noopener">Oboe.js</a> <a href="https://github.com/douglascrockford/JSON-js" target="_blank" rel="noopener">JSON2</a> 和 <a href="https://bestiejs.github.io/json3/" target="_blank" rel="noopener">JSON3</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JSON-JavaScript-Object-Notation-简介&quot;&gt;&lt;a href=&quot;#JSON-JavaScript-Object-Notation-简介&quot; class=&quot;headerlink&quot; title=&quot;JSON(JavaScript Object N
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解javascript事件</title>
    <link href="https://ryansuen.github.io/2017/11/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript%E4%BA%8B%E4%BB%B6/"/>
    <id>https://ryansuen.github.io/2017/11/20/深入理解javascript事件/</id>
    <published>2017-11-20T14:53:22.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件的调度"><a href="#事件的调度" class="headerlink" title="事件的调度"></a>事件的调度</h3><p>如果想让 JavaScript 中的某段代码将来再运行，可以将它放在回调中。<br>回调就是一种普通函数，只不过它是传给像 setTimeout 这样的函<br>数，或者绑定为像 document.onready 这样的属性。运行回调时，我们称已触发某事件（譬如延时结束或页面加载完毕）。 </p><p>当然，可怕的总是那些细节，哪怕是像 setTimeout 这样看起来很简<br>单的东西。对 setTimeout 的描述通常像这样： </p><blockquote><p>给定一个回调及 n 毫秒的延迟，setTimeout 就会在 n 毫秒后运<br>行该回调。</p></blockquote><p>但是，正如我们将在这一节乃至这一章里看到的，以上描述存在严重<br>缺陷。大多数情况下，该描述只能算接近正确，而在其他情况下则完<br>全是谬误。要想真正理解 setTimeout，必须先大体理解 JavaScript<br>事件模型。 </p><h4 id="现在还是将来"><a href="#现在还是将来" class="headerlink" title="现在还是将来"></a>现在还是将来</h4><p>在探究 setTimeout 之前，先来看一个简单的例子。该情形常常会迷<br>惑 JavaScript 新手，特别是那些刚刚从 Java 和 Ruby 等多线程语言迁<br>移过来的新手。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 1; i &lt;= 3; i++) &#123;</span><br><span class="line"> setTimeout(function()&#123; console.log(i); &#125;, 0);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>4<br>4<br>4 </p></blockquote><p>大多数刚接触 JavaScript 语言的人都会认为以上循环会输出 1，2，3，<br>或者重复输出这 3 个数字，因为这里的 3 次延时都抢着要第一个触发<br>（每次暂停都调度为 0 毫秒后到时）。 </p><p>要理解为什么输出是 4，4，4，需要知道以下 3 件事。</p><ul><li>这里只有一个名为 i 的变量，其作用域由声明语句 var i 定义（该<br>声明语句在不经意间让 i 的作用域不是循环内部，而是扩散至蕴含<br>循环的那个最内侧函数）。 </li><li>循环结束后，i===4 一直递增，直到不再满足条件 i&lt;=3 为止。 </li><li><strong>JavaScript 事件处理器在线程空闲之前不会运行。</strong></li></ul><h4 id="线程的阻塞"><a href="#线程的阻塞" class="headerlink" title="线程的阻塞"></a>线程的阻塞</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var start = new Date;</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line"> var end = new Date;</span><br><span class="line"> console.log(&apos;Time elapsed:&apos;, end - start, &apos;ms&apos;);</span><br><span class="line">&#125;, 500);</span><br><span class="line">while (new Date - start &lt; 1000) &#123;&#125;;</span><br></pre></td></tr></table></figure><p>按照多线程的思维定势，我会预计 500 毫秒后计时函数就会运行。不<br>过这要求中断欲持续整整一秒钟的循环。如果运行代码，会得到类似<br>这样的结果： </p><blockquote><p>Time elapsed: 1002ms </p></blockquote><p>大家得到的数字可能会稍有不同，这是因为 setTimeout 和 setInterval一样，其计时精度要比我们的期望值差很多（请参阅1.2.2节）。<br>不过，这个数字肯定至少是 1000，因为 setTimeout 回调在 while<br>循环结束运行之前不可能被触发。</p><p>那么，如果 setTimeout 没有使用另一个线程，那它到底在做什么<br>呢？ </p><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>调用 setTimeout 的时候，会有一个延时事件排入队列。然后<br>setTimeout 调用之后的那行代码运行，接着是再下一行代码，直到<br>再也没有任何代码。这时 JavaScript 虚拟机才会问：“队列里都有谁<br>啊？”</p><p>如果队列中至少有一个事件适合于“触发”（就像 1000 毫秒之前设定<br>好的那个为期 500 毫秒的延时事件），则虚拟机会挑选一个事件，并<br>调用此事件的处理器（譬如传给 setTimeout 的那个函数）。事件处<br>理器返回后，我们又回到队列处。</p><p>输入事件的工作方式完全一样：用户单击一个已附加有单击事件处<br>理器的 DOM（Document Object Model，文档对象模型）元素时，<br>会有一个单击事件排入队列。但是，该单击事件处理器要等到当前<br>所有正在运行的代码均已结束后（可能还要等其他此前已排队的事<br>件也依次结束）才会执行。因此，使用 JavaScript 的那些网页一不<br>小心就会变得毫无反应。</p><p>你可能听过事件循环这个术语，它是用于描述队列工作方式的。所谓<br>事件循环，就像代码从一个循环中不断取出而运行一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">runYourScript();</span><br><span class="line">while (atLeastOneEventIsQueued) &#123;</span><br><span class="line"> fireNextQueuedEvent();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这隐含着一个意思，即触发的每个事件都会位于堆栈轨迹的底部。</p><p>事件的易调度性是 JavaScript 语言最大的特色之一。像 setTimeout<br>这样的异步函数只是简单地做延迟执行，而不是孵化新的线程。<br>JavaScript 代码永远不会被中断，这是因为代码在运行期间只需要排<br>队事件即可，而这些事件在代码运行结束之前不会被触发。 </p><h3 id="异步函数的类型"><a href="#异步函数的类型" class="headerlink" title="异步函数的类型"></a>异步函数的类型</h3><p>每一种 JavaScript 环境都有自己的异步函数集。有些函数，如<br>setTimeout 和 setInterval，是各种 JavaScript 环境普遍都有的。<br>另一些函数则专属于某些浏览器或某几种服务器端框架。JavaScript<br>环境提供的异步函数通常可以分为两大类：I/O 函数和计时函数。如<br>果想在应用中定义复杂的异步行为，就要使用这两类异步函数作为基<br>本的构造块。 </p><h4 id="异步的I-O函数"><a href="#异步的I-O函数" class="headerlink" title="异步的I/O函数"></a>异步的I/O函数</h4><p>创造 Node.js，并不是为了人们能在服务器上运行 JavaScript，仅仅是<br>因为 Ryan Dahl 想要一个建立在某高级语言之上的事件驱动型服务器<br>框架。JavaScript 碰巧就是适合干这个的语言。为什么？因为 JavaScript<br>语言可以完美地实现非阻塞式 I/O。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var ajaxRequest = new XMLHttpRequest;</span><br><span class="line">ajaxRequest.open(&apos;GET&apos;, url);</span><br><span class="line">ajaxRequest.send(null);</span><br><span class="line">while (ajaxRequest.readyState === XMLHttpRequest.UNSENT) &#123;</span><br><span class="line"> // readyState 在循环返回之前不会有更改。</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>相反，我们需要附加一个事件处理器，随即返回事件队列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var ajaxRequest = new XMLHttpRequest;</span><br><span class="line">ajaxRequest.open(&apos;GET&apos;, url);</span><br><span class="line">ajaxRequest.send(null);</span><br><span class="line">ajaxRequest.onreadystatechange = function() &#123;</span><br><span class="line"> // ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>就是这么回事。不论是在等待用户的按键行为，还是在等待远程服务<br>器的批量数据，所需要做的就是定义一个回调，除非 JavaScript 环境<br>提供的某个同步 I/O 函数已经替我们完成了阻塞。</p><p>在浏览器端，Ajax 方法有一个可设置为 false 的 async 选项（但永<br>远、永远别这么做），这会挂起整个浏览器窗格直到收到应答为止。<br>在 Node.js 中，同步的 API 方法在名称上会有明确的标示，譬如<br>fs.readFileSync。编写短小的脚本时，这些同步方法会很方便。但<br>是，如果所编写的应用需要处理并行的多个请求或多项操作，则应该<br>避免使用它们。可在今天，还有哪个应用不是这样的呢？</p><p>有些 I/O 函数既有同步效应，也有异步效应。举例来说，在现代浏览<br>器中操纵 DOM 对象时，从脚本角度看，更改是即时生效的，但从视<br>效角度看，在返回事件队列之前不会渲染这些 DOM 对象更改。这可<br>以防止 DOM 对象被渲染成不一致的状态。关于这点，可访问<br><a href="http://jsfiddle.net/" target="_blank" rel="noopener">http://jsfiddle.net/</a> TrevorBurnham/SNBYV/，查看一个简单的演示。</p><h5 id="console-log是异步的吗？"><a href="#console-log是异步的吗？" class="headerlink" title="console.log是异步的吗？"></a>console.log是异步的吗？</h5><blockquote><p>WebKit的console.log由于表现出异步行为而让很多开发者惊诧<br>不已。在Chrome或Safari中，以下这段代码会在控制台记录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line">console.log(obj);</span><br><span class="line">obj.foo = &apos;bar&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>怎么会这样？WebKit的console.log并没有立即拍摄对象快照，<br>相反，它只存储了一个指向对象的引用，然后在代码返回事件队<br>列时才去拍摄快照。</p></blockquote><blockquote><p>Node的console.log是另一回事，它是严格同步的，因此同样的<br>代码输出的却为{}。</p></blockquote><p>JavaScript 采用了非阻塞式 I/O，这对新手来说是最大的一个障碍，但<br>这同样也是该语言的核心优势之一。有了非阻塞式 I/O，就能自然而<br>然地写出高效的基于事件的代码。 </p><h4 id="异步的计时函数"><a href="#异步的计时函数" class="headerlink" title="异步的计时函数"></a>异步的计时函数</h4><p>我们已经看到，异步函数非常适合用于 I/O 操作，但有些时候，我们<br>仅仅是因为需要异步而想要异步性。换句话说，我们想让一个函数在<br>将来某个时刻再运行——这样的函数可能是为了作动画或模拟。基于<br>时间的事件涉及两个著名的函数，即 setTimeout 与 setInterval。</p><p>遗憾的是，这两个著名的计时器函数都有自己的一些缺陷。其中有个缺陷是无法弥补的：当同一个 JavaScript<br>进程正运行着代码时，任何 JavaScript 计时函数都无法使其他代码运<br>行起来。但是，即便容忍了这一局限性，setTimeout 及 setInterval<br>的不确定性也会令人犯怵。下面是一个示例。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var fireCount = 0;</span><br><span class="line">var start = new Date;</span><br><span class="line">var timer = setInterval(function() &#123;</span><br><span class="line"> if (new Date-start &gt; 1000) &#123;</span><br><span class="line"> clearInterval(timer);</span><br><span class="line"> console.log(fireCount);</span><br><span class="line"> return;</span><br><span class="line"> &#125;</span><br><span class="line"> fireCount++;</span><br><span class="line">&#125;, 0);</span><br></pre></td></tr></table></figure><p>如果使用 setInterval 调度事件且延迟设定为 0 毫秒，则会尽可能<br>频繁地运行此事件，对吗？那么，在运行于高速英特尔 i7 处理器之<br>上的现代浏览器中，此事件的触发频率到底如何呢？</p><p>大约为 200 次/秒。这是 Chrome、Safari 和 Firefox 等浏览器的平均值。<br>在 Node 环境下，此事件的触发频率大约能达到 1000 次/秒。（若使用<br>setTimeout 来调度事件，重复这些实验也会得到类似的结果。）作<br>为对比，如果将setInterval替换成简单的while循环，则在Chrome<br>中此事件的触发频率将达到 400 万次/秒，而在 Node 中会达到 500 万<br>次/秒！ </p><p>这是怎么回事？最后我们发现，setTimeout 和 setInterval 就是<br>想设计成慢吞吞的！事实上，HTML 规范（这是所有主要浏览器都遵<br>守的规范）推行的延时/时隔的最小值就是 4 毫秒！①</p><p>那么，如果需要更细粒度的计时，该怎么办呢？有些运行时环境提供<br>了备选方案。 </p><ul><li>在 Node 中，process.nextTick 允许将事件调度成尽可能快地触<br>发。对于笔者的系统，process.nextTick 事件的触发频率可以超<br>过 10 万次/秒。</li><li>一些现代浏览器（含 IE9+）带有一个 requestAnimationFrame<br>函数。此函数有两个目标：一方面，它允许以 60+帧/秒的速度运行<br>JavaScript 动画；另一方面，它又避免后台选项卡运行这些动画，<br>从而节约 CPU 周期。在最新版的 Chrome 浏览器中，甚至能实现亚<br>毫秒级的精度。</li></ul><p>尽管这些计时函数是异步 JavaScript 混饭吃的家伙什儿，但永远不要<br>忘记，setTimeout 和 setInterval 就是些不精确的计时工具。在<br>Node中，如果只是想产生一个短时延迟，请使用 process.nextTick。<br>在浏览器端，请尝试使用垫片技术（ shim ） ③ ：在支持<br>requestAnimationFrame 的浏览器中，推荐使用<br>requestAnimationFrame；在不支持 requestAnimationFrame 的<br>浏览器中，则退而使用 setTimeout。</p><p>到这里，关于 JavaScript 基本异步函数的简要概览就结束了。但怎样<br>才能知道一个函数到底何时异步呢？下一节中，我们在亲自编写异步<br>函数的同时再思考这个问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;事件的调度&quot;&gt;&lt;a href=&quot;#事件的调度&quot; class=&quot;headerlink&quot; title=&quot;事件的调度&quot;&gt;&lt;/a&gt;事件的调度&lt;/h3&gt;&lt;p&gt;如果想让 JavaScript 中的某段代码将来再运行，可以将它放在回调中。&lt;br&gt;回调就是一种普通函数，只不过它是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从http(s) request router理解web</title>
    <link href="https://ryansuen.github.io/2017/11/10/%E4%BB%8Ehttp-s-request-router%E7%90%86%E8%A7%A3web/"/>
    <id>https://ryansuen.github.io/2017/11/10/从http-s-request-router理解web/</id>
    <published>2017-11-10T05:45:04.000Z</published>
    <updated>2019-03-05T14:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何定义路由（router）"><a href="#如何定义路由（router）" class="headerlink" title="如何定义路由（router）"></a>如何定义路由（router）</h3><h4 id="电讯网络设备路由器（router）"><a href="#电讯网络设备路由器（router）" class="headerlink" title="电讯网络设备路由器（router）"></a>电讯网络设备路由器（router）</h4><p>路由器（英语：Router，又称路径器）是一种电讯网络设备，提供路由与转送两种重要机制，可以决定数据包从来源端到目的端所经过的路由路径（host到host之间的传输路径），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端（在路由器内部进行），这称为转送。路由工作在OSI模型的第三层——即网络层，例如网际协议（IP）。</p><h4 id="http-s-request-router（应用层）"><a href="#http-s-request-router（应用层）" class="headerlink" title="http(s) request router（应用层）"></a>http(s) request router（应用层）</h4><hr><h3 id="URI-vs-URL"><a href="#URI-vs-URL" class="headerlink" title="URI vs URL"></a>URI vs URL</h3><h4 id="网址-链接"><a href="#网址-链接" class="headerlink" title="网址/链接"></a>网址/链接</h4><p>URI(Uniform Resource Identifier/统一资源标识符)，URI用字符串标识某一互关网资源。支持30多种协议方案（http,https,ftp,file,mailto 等等 ）。</p><p>URL(Uniform Resource Locator/统一资源定位符)，URL标识资源的地点。</p><p>URL是URI的子集。</p><h3 id="uri-example"><a href="#uri-example" class="headerlink" title="uri example"></a>uri example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ftp://linghit.com/shunli/lunar.json</span><br><span class="line">http://zxcs.linghit.com/indexpage/index.html</span><br><span class="line">mailto:sunyi@linghit.com</span><br><span class="line">tel:+1-388-888-8888</span><br><span class="line">telnet://192.168.1.123</span><br><span class="line">https://www.eather.com/get?code=1001</span><br><span class="line"></span><br><span class="line">//绝对URI</span><br><span class="line">https://zxcs.linghit.com/query（cgi）</span><br><span class="line"></span><br><span class="line">//绝对URL</span><br><span class="line">https://zxcs.linghit.com/forecast.images/banner.png</span><br><span class="line"></span><br><span class="line">//相对URI</span><br><span class="line">location.href = &apos;/api/v2/order/query&apos;</span><br></pre></td></tr></table></figure><h3 id="URI格式"><a href="#URI格式" class="headerlink" title="URI格式"></a>URI格式</h3><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p>协议名://用户名:密码@服务器地址:端口/带层次的文件路径?查询字符串#文件片段标识符</p><p>如果类比vue-router,react-router的路由配置，带层次的文件路径可以翻译成嵌套关系:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">React.render((</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</span><br><span class="line">      &lt;Route path=&quot;about&quot; component=&#123;About&#125; /&gt;</span><br><span class="line">      &lt;Route path=&quot;inbox&quot; component=&#123;Inbox&#125;&gt;</span><br><span class="line">        &lt;Route path=&quot;messages/:id&quot; component=&#123;Message&#125; /&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">  &lt;/Router&gt;</span><br><span class="line">), document.body)</span><br></pre></td></tr></table></figure></p><p>通过上面的配置，这个应用知道如何渲染下面四个 URL：</p><table><thead><tr><th style="text-align:center">URL</th><th style="text-align:center">组件</th></tr></thead><tbody><tr><td style="text-align:center">/</td><td style="text-align:center">App</td></tr><tr><td style="text-align:center">/about</td><td style="text-align:center">App -&gt; About</td></tr><tr><td style="text-align:center">/inbox</td><td style="text-align:center">App -&gt; Inbox</td></tr><tr><td style="text-align:center">/inbox/messages/:id</td><td style="text-align:center">App -&gt; Inbox -&gt; Message</td></tr></tbody></table><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><a href="https://root:123456@www.zxcs.linghit.com:80/dir1/dir2/index.html?querya=1&amp;queryb=2#name" target="_blank" rel="noopener">https://root:123456@www.zxcs.linghit.com:80/dir1/dir2/index.html?querya=1&amp;queryb=2#name</a></p><p>登录认证信息可选，端口号可先，无就用默认。</p><hr><h3 id="静态网站"><a href="#静态网站" class="headerlink" title="静态网站"></a>静态网站</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>在网站设计中，纯粹HTML格式的网页通常被称为“静态网页”，早期的网站一般都是由静态网页制作的。</p><h4 id="静态网页的网址形式通常为："><a href="#静态网页的网址形式通常为：" class="headerlink" title="静态网页的网址形式通常为："></a>静态网页的网址形式通常为：</h4><p>也就是以.htm、.html、.shtml、.xml等为后后缀的。在HTML格式的网页上，也可以出现各种动态的效果，如.GIF格式的动画、FLASH、滚动字母等，这些“动态效果”只是视觉上的。</p><h3 id="静态网页的特点"><a href="#静态网页的特点" class="headerlink" title="静态网页的特点"></a>静态网页的特点</h3><ul><li>静态网页每个网页都有一个固定的URL，且网页URL以.htm、.html、.shtml等常见形式为后缀，而不含有“？”；</li><li>网页内容一经发布到网站服务器上，无论是否有用户访问，每个静态网页的内容都是保存在网站服务器上的，也就是说，静态网页是实实在在保存在服务器上的文件，每个网页都是一个独立的文件；</li><li>静态网页的内容相对稳定，因此容易被搜索引擎检索；</li><li>静态网页没有数据库的支持，在网站制作和维护方面工作量较大，因此当网站信息量很大时完全依靠静态网页制作方式比较困难；</li><li>静态网页的交互性较差，在功能方面有较大的限制。</li></ul><p>demo: </p><ul><li><a href="https://microbotteam.github.io" target="_blank" rel="noopener">https://microbotteam.github.io(/index.html)</a></li><li><a href="http://demo.static.web.com" target="_blank" rel="noopener">http://demo.static.web.com(/index.html)</a></li></ul><hr><h3 id="动态网站"><a href="#动态网站" class="headerlink" title="动态网站"></a>动态网站</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>动态网站并不是指具有动画功能的网站，而是指网站内容可根据不同情况动态变更的网站，一般情况下动态网站通过数据库进行架构。 动态网站除了要设计网页外，还要通过数据库和编程序来使网站具有更多自动的和高级的功能。动态网站体现在网页一般是以asp，jsp，php，aspx等结束，而静态网页一般是HTML（标准通用标记语言的子集）结尾，动态网站服务器空间配置要比静态的网页要求高，费用也相应的高，不过动态网页利于网站内容的更新，适合企业建站。动态是相对于静态网站而言。</p><h4 id="动态网站的特点"><a href="#动态网站的特点" class="headerlink" title="动态网站的特点"></a>动态网站的特点</h4><ul><li>动态网站可以实现交互功能，如用户注册、信息发布、产品展示、订单管理等等；</li><li>动态网页并不是独立存在于服务器的网页文件，而是浏览器发出请求时才反馈网页；</li><li>动态网页中包含有服务器端脚本，所以页面文件名常以asp、jsp、php等为后缀。但也可以使用URL静态化技术，使网页后缀显示为HTML。所以不能以页面文件的后缀作为判断网站的动态和静态的唯一标准。</li><li>动态网页由于需要数据库处理，所以动态网站的访问速度大大减慢；</li><li>动态网页由于存在特殊代码，所以相比较静态网页，其对搜索引擎的友好程度相对要弱一些。<br>但随着计算机性能的提升以及网络带宽的提升，最后两条已经基本得到解决。</li></ul><h4 id="简单的后端路由代码"><a href="#简单的后端路由代码" class="headerlink" title="简单的后端路由代码"></a>简单的后端路由代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;)</span><br><span class="line">const fs = require(&apos;fs&apos;)</span><br><span class="line">const httpPort = 3000</span><br><span class="line"></span><br><span class="line">function simpleRouter(ctx, url) &#123;</span><br><span class="line">    let res;</span><br><span class="line">    if (/query/i.test(url)) &#123;</span><br><span class="line">        res = `</span><br><span class="line">        &lt;h1&gt;query&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;$&#123;url&#125;&lt;/h2&gt;</span><br><span class="line">        `;</span><br><span class="line">    &#125; else if (/date/i.test(url)) &#123;</span><br><span class="line">        res = `</span><br><span class="line">        &lt;h1&gt;date&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;$&#123;new Date().toString()&#125;&lt;/h2&gt;</span><br><span class="line">        `;</span><br><span class="line">    &#125; else if (&apos;/test.html&apos; === url) &#123;</span><br><span class="line">        res = fs.readFileSync(&apos;test.html&apos;, &apos;utf-8&apos;, (err, content) =&gt; &#123;</span><br><span class="line">            if (err) &#123;</span><br><span class="line">                console.log(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        res = &apos;404&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.createServer((req, res) =&gt; &#123;</span><br><span class="line">    let url = req.url,</span><br><span class="line">        response;</span><br><span class="line"></span><br><span class="line">    res.writeHead(200, &#123;</span><br><span class="line">        &apos;Content-Type&apos;: &apos;text/html; charset=utf-8&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    response = simpleRouter(res, url);</span><br><span class="line">    res.end(response);</span><br><span class="line">&#125;).listen(httpPort, () =&gt; &#123;</span><br><span class="line">    console.log(&apos;Server listening on: http://localhost:%s&apos;, httpPort)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="在线nodejs代理代码"><a href="#在线nodejs代理代码" class="headerlink" title="在线nodejs代理代码"></a>在线nodejs代理代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;);</span><br><span class="line">const serve = require(&apos;koa-static-server&apos;);</span><br><span class="line">const router = require(&apos;koa-router&apos;)();</span><br><span class="line">const app = new Koa();</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const koaBody = require(&apos;koa-body&apos;);</span><br><span class="line">const request = require(&apos;request&apos;);</span><br><span class="line">const rp = require(&apos;request-promise&apos;);</span><br><span class="line"></span><br><span class="line">app.use( router.routes() ).use( router.allowedMethods() );</span><br><span class="line"></span><br><span class="line">router.all(</span><br><span class="line">    &apos;*&apos;,</span><br><span class="line">    koaBody(),</span><br><span class="line">    async function(ctx, next) &#123;</span><br><span class="line">        let url = ctx.request.url,</span><br><span class="line">            proxy = &apos;http://sandbox.zxcs.linghit.com&apos;;</span><br><span class="line">            method = ctx.request.method,</span><br><span class="line">            referer = ctx.request.header.referer,</span><br><span class="line">            api = `$&#123;proxy&#125;$&#123;url&#125;`;</span><br><span class="line">        if( /api/i.test(url) ) &#123;</span><br><span class="line">            </span><br><span class="line">            if( &apos;GET&apos; === method ) &#123;</span><br><span class="line">                let result =   await new Promise( (resolve, reject) =&gt; &#123;</span><br><span class="line">                    request.get(api, (err, res, body) =&gt; &#123;</span><br><span class="line">                        if( err ) &#123;</span><br><span class="line">                            reject(err);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            resolve(body);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; );</span><br><span class="line">                ctx.body = result;</span><br><span class="line">            &#125; else if(&apos;POST&apos; === method) &#123;</span><br><span class="line">                let result =   await new Promise( (resolve, reject) =&gt; &#123;</span><br><span class="line">                    request.post(&#123;</span><br><span class="line">                        url: api,</span><br><span class="line">                        form: ctx.request.body                        </span><br><span class="line">                    &#125;, (err, res, body) =&gt; &#123;</span><br><span class="line">                        if( err ) &#123;</span><br><span class="line">                            reject(err);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            resolve(body);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; );</span><br><span class="line">                ctx.body = result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if( /payment/i.test(url) ) &#123;</span><br><span class="line">                let result =   await new Promise( (resolve, reject) =&gt; &#123;</span><br><span class="line">                    request.get(api, (err, res, body) =&gt; &#123;</span><br><span class="line">                        if( err ) &#123;</span><br><span class="line">                            reject(err);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            resolve(body);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; );</span><br><span class="line">                if(/page-result/img.test(result) ) &#123;</span><br><span class="line">                    let new_referer = referer.substring(0, (referer.lastIndexOf(&apos;/&apos;) + 1 ) ),</span><br><span class="line">                        query = url.substring( url.indexOf(&apos;?&apos;) ),</span><br><span class="line">                        result = /BZJP/i.test(url) ? &apos;resultQt.html&apos; : result.html;</span><br><span class="line">                    ctx.redirect(`$&#123;new_referer&#125;$&#123;result&#125;$&#123;query&#125;`);                   </span><br><span class="line">                &#125;</span><br><span class="line">                ctx.body = result;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                await next();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.use(</span><br><span class="line">    serve(&#123;</span><br><span class="line">        rootDir: path.join(__dirname, &apos;../public/&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">let port = 80;</span><br><span class="line"></span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">    console.log(&apos;&apos;);</span><br><span class="line">    console.log(&apos;--------------------------------&apos;);</span><br><span class="line">    console.log(&apos;&apos;);</span><br><span class="line">    console.log(`proxy start on prot $&#123;port&#125;`);</span><br><span class="line">    console.log(&apos;&apos;);</span><br><span class="line">    console.log(&apos;--------------------------------&apos;);</span><br><span class="line">    console.log(&apos;&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="文件片段标识符-hash"><a href="#文件片段标识符-hash" class="headerlink" title="#文件片段标识符(hash)"></a>#文件片段标识符(hash)</h3><p>了解http协议就会知道，url的组成部分有很多，譬如协议、主机名、资源路径、查询字段等等，其中包含一个称之为片段的部分，以“#”为标识。</p><p>例如： <a href="http://www.gmail.com/text/#123，123便是url中的hash部分。" target="_blank" rel="noopener">http://www.gmail.com/text/#123，123便是url中的hash部分。</a></p><p>打开控制台，输入 location.hash，你可以得到当前url的hash部分（如果当前url不存在hash则返回空字符串）。接下来，输入 location.hash = ‘123’，会发现浏览器地址栏的url变了，末尾增加了’#123’字段，并且，页面没有被重新刷新。很显然，这很符合我们的要求。</p><hr><h3 id="ajax的出现可以异步无刷新改变页面内容"><a href="#ajax的出现可以异步无刷新改变页面内容" class="headerlink" title="ajax的出现可以异步无刷新改变页面内容"></a>ajax的出现可以异步无刷新改变页面内容</h3><p>（太熟悉了， 略过）</p><hr><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//向前和向后跳转</span><br><span class="line">window.history.forward();</span><br><span class="line">window.history.back();</span><br><span class="line"></span><br><span class="line">//跳转到 history 中指定的一个点</span><br><span class="line">window.history.go(-1);    //back()</span><br><span class="line">window.history.go(1);    //forward()</span><br></pre></td></tr></table></figure><h3 id="history-HTML5-api"><a href="#history-HTML5-api" class="headerlink" title="history HTML5 api"></a>history HTML5 api</h3><ul><li>history.pushState()//添加历史记录条目</li><li>history.replaceState()//修改历史记录条目</li><li>window.onpopstate//上面两方法与其配合使用</li></ul><p>使用 history.pushState() 可以改变referrer，它在用户发送 XMLHttpRequest 请求时在HTTP头部使用，改变state后创建的 XMLHttpRequest 对象的referrer都会被改变。因为referrer是标识 /创建XMLHttpRequest对象时/this 所代表的/window对象中document的/URL。</p><h4 id="pushState-方法"><a href="#pushState-方法" class="headerlink" title="pushState() 方法"></a>pushState() 方法</h4><p>pushState() 需要三个参数: 一个状态对象, 一个标题 (目前被忽略), 和 (可选的) 一个URL. 让我们来解释下这三个参数详细内容：</p><ul><li><p>状态对象 -</p><ul><li>状态对象state是一个JavaScript对象，通过pushState () 创建新的历史记录条目。无论什么时候用户导航到新的状态，popstate事件就会被触发，且该事件的state属性包含该历史记录条目状态对象的副本。</li><li>状态对象可以是能被序列化的任何东西。原因在于Firefox将状态对象保存在用户的磁盘上，以便在用户重启浏览器时使用，我们规定了状态对象在序列化表示后有640k的大小限制。如果你给 pushState() 方法传了一个序列化后大于640k的状态对象，该方法会抛出异常。如果你需要更大的空间，建议使用 sessionStorage 以及 localStorage.</li></ul></li><li><p>标题 — Firefox 目前忽略这个参数，但未来可能会用到。传递一个空字符串在这里是安全的，而在将来这是不安全的。二选一的话，你可以为跳转的state传递一个短标题。</p></li><li><p>URL — 该参数定义了新的历史URL记录。注意，调用 pushState() 后浏览器并不会立即加载这个URL，但可能会在稍后某些情况下加载这个URL，比如在用户重新打开浏览器时。新URL不必须为绝对路径。如果新URL是相对路径，那么它将被作为相对于当前URL处理。新URL必须与当前URL同源，否则 pushState() 会抛出一个异常。该参数是可选的，缺省为当前URL。</p></li></ul><p>在某种意义上，调用 pushState() 与 设置 window.location = “#foo” 类似，二者都会在当前页面创建并激活新的历史记录。但 pushState() 具有如下几条优点：</p><ul><li>新的 URL 可以是与当前URL同源的任意URL 。而设置 window.location 仅当你只修改了哈希值时才保持同一个 document。</li><li>如果需要，你可以不必改变URL。而设置 window.location = “#foo”;在当前哈希不是 #foo 的情况下， 仅仅是新建了一个新的历史记录项。</li><li>你可以为新的历史记录项关联任意数据。而基于哈希值的方式，则必须将所有相关数据编码到一个短字符串里。 </li><li>假如 标题 在之后会被浏览器用到，那么这个数据是可以被使用的（哈希则不然）。</li></ul><p>注意 pushState() 绝对不会触发 hashchange 事件，即使新的URL与旧的URL仅哈希不同也是如此。 </p><h4 id="pushState-方法的例子"><a href="#pushState-方法的例子" class="headerlink" title="pushState() 方法的例子"></a>pushState() 方法的例子</h4><p>假设在 <a href="http://mozilla.org/foo.html" target="_blank" rel="noopener">http://mozilla.org/foo.html</a> 中执行了以下 JavaScript 代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var stateObj = &#123; foo: &quot;bar&quot; &#125;;</span><br><span class="line">history.pushState(stateObj, &quot;page 2&quot;, &quot;bar.html&quot;);</span><br></pre></td></tr></table></figure><p>这将使浏览器地址栏显示为 <a href="http://mozilla.org/bar.html，但并不会导致浏览器加载" target="_blank" rel="noopener">http://mozilla.org/bar.html，但并不会导致浏览器加载</a> bar.html ，甚至不会检查bar.html 是否存在。</p><p>假设现在用户又访问了 <a href="http://google.com，然后点击了返回按钮。此时，地址栏将显示" target="_blank" rel="noopener">http://google.com，然后点击了返回按钮。此时，地址栏将显示</a> <a href="http://mozilla.org/bar.html，同时页面会触发" target="_blank" rel="noopener">http://mozilla.org/bar.html，同时页面会触发</a> popstate 事件，事件对象state中包含了 stateObj 的一份拷贝。页面本身与 foo.html 一样，尽管其在 popstate  事件中可能会修改自身的内容。</p><p>如果我们再次点击返回按钮，页面URL会变为<a href="http://mozilla.org/foo.html，文档对象document会触发另外一个" target="_blank" rel="noopener">http://mozilla.org/foo.html，文档对象document会触发另外一个</a> popstate 事件，这一次的事件对象state object为null。 这里也一样，返回并不改变文档的内容，尽管文档在接收 popstate 事件时可能会改变自己的内容，其内容仍与之前的展现一致。</p><h4 id="replaceState-方法"><a href="#replaceState-方法" class="headerlink" title="replaceState() 方法"></a>replaceState() 方法</h4><p>history.replaceState() 的使用与 history.pushState() 非常相似，区别在于  replaceState()  是修改了当前的历史记录项而不是新建一个。 注意这并不会阻止其在全局浏览器历史记录中创建一个新的历史记录项。</p><p>replaceState()的使用场景在于为了响应用户操作，你想要更新状态对象state或者当前历史记录的URL。</p><h4 id="replaceState-方法示例"><a href="#replaceState-方法示例" class="headerlink" title="replaceState() 方法示例"></a>replaceState() 方法示例</h4><p>假设 <a href="http://mozilla.org/foo.html" target="_blank" rel="noopener">http://mozilla.org/foo.html</a> 执行了如下JavaScript代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var stateObj = &#123; foo: &quot;bar&quot; &#125;;</span><br><span class="line">history.pushState(stateObj, &quot;page 2&quot;, &quot;bar.html&quot;);</span><br></pre></td></tr></table></figure></p><p>然后，假设<a href="http://mozilla.org/bar.html执行了如下" target="_blank" rel="noopener">http://mozilla.org/bar.html执行了如下</a> JavaScript：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.replaceState(stateObj, &quot;page 3&quot;, &quot;bar2.html&quot;);</span><br></pre></td></tr></table></figure><p>这将会导致地址栏显示<a href="http://mozilla.org/bar2.html,，但是浏览器并不会去加载bar2.html" target="_blank" rel="noopener">http://mozilla.org/bar2.html,，但是浏览器并不会去加载bar2.html</a> 甚至都不需要检查 bar2.html 是否存在。</p><p>假设现在用户重新导向到了<a href="http://www.microsoft.com，然后点击了回退按按钮。这里，地址栏会显示http://mozilla.org/bar2.html。加入用户再次点击回退按钮，地址栏会显示http://mozilla.org/foo.html，完全跳过了abar.html。" target="_blank" rel="noopener">http://www.microsoft.com，然后点击了回退按按钮。这里，地址栏会显示http://mozilla.org/bar2.html。加入用户再次点击回退按钮，地址栏会显示http://mozilla.org/foo.html，完全跳过了abar.html。</a></p><h3 id="window-onpopstate"><a href="#window-onpopstate" class="headerlink" title="window.onpopstate"></a>window.onpopstate</h3><p>window.onpopstate是popstate事件在window对象上的事件处理程序.</p><p>每当处于激活状态的历史记录条目发生变化时,popstate事件就会在对应window对象上触发. 如果当前处于激活状态的历史记录条目是由history.pushState()方法创建,或者由history.replaceState()方法修改过的, 则popstate事件对象的state属性包含了这个历史记录条目的state对象的一个拷贝.</p><p>调用history.pushState()或者history.replaceState()不会触发popstate事件. popstate事件只会在浏览器某些行为下触发, 比如点击后退、前进按钮(或者在JavaScript中调用history.back()、history.forward()、history.go()方法).</p><p>当网页加载时,各浏览器对popstate事件是否触发有不同的表现,Chrome 和 Safari会触发popstate事件, 而Firefox不会.</p><h4 id="popstate事件示例"><a href="#popstate事件示例" class="headerlink" title="popstate事件示例"></a>popstate事件示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">window.onpopstate = function(event) &#123;</span><br><span class="line">  alert(&quot;location: &quot; + document.location + &quot;, state: &quot; + JSON.stringify(event.state));</span><br><span class="line">&#125;;</span><br><span class="line">//绑定事件处理函数. </span><br><span class="line">history.pushState(&#123;page: 1&#125;, &quot;title 1&quot;, &quot;?page=1&quot;);    //添加并激活一个历史记录条目 http://example.com/example.html?page=1,条目索引为1</span><br><span class="line">history.pushState(&#123;page: 2&#125;, &quot;title 2&quot;, &quot;?page=2&quot;);    //添加并激活一个历史记录条目 http://example.com/example.html?page=2,条目索引为2</span><br><span class="line">history.replaceState(&#123;page: 3&#125;, &quot;title 3&quot;, &quot;?page=3&quot;); //修改当前激活的历史记录条目 http://ex..?page=2 变为 http://ex..?page=3,条目索引为3</span><br><span class="line">history.back(); // 弹出 &quot;location: http://example.com/example.html?page=1, state: &#123;&quot;page&quot;:1&#125;&quot;</span><br><span class="line">history.back(); // 弹出 &quot;location: http://example.com/example.html, state: null</span><br><span class="line">history.go(2);  // 弹出 &quot;location: http://example.com/example.html?page=3, state: &#123;&quot;page&quot;:3&#125;</span><br></pre></td></tr></table></figure><h3 id="history-HTML5-api-实际应用"><a href="#history-HTML5-api-实际应用" class="headerlink" title="history HTML5 api 实际应用"></a>history HTML5 api 实际应用</h3><h3 id="将首次打开的网页返回到我们预期的网页"><a href="#将首次打开的网页返回到我们预期的网页" class="headerlink" title="将首次打开的网页返回到我们预期的网页"></a>将首次打开的网页返回到我们预期的网页</h3><p>易起问的入口为：yd.linghit.com</p><p>易起问的老师页面地址：yd.linghit.com/home/user/index?answer_id=250</p><p>这两个链接都可以直接作为外链让用户点击后进入对应的页面，正常情况下以微信为列，进入页面不跳转至其他页面点击手机的返回键，页面会关闭直接返回到进行页面的地方。老板觉得这样不太好，应该点击返回键后调到首页再退出。。。。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// document.referrer 表示当前文档的来源，即当前文档是从那个文档打开的url，</span><br><span class="line">// 抓包发现从微信直接进来的链接来源referrer是null，从网页内部跳转的是正常的，所以通过判断referrer来判断是否从微信直接跳进来进行处理，对于正常页面跳转不做处理</span><br><span class="line">        if(!document.referrer)&#123;</span><br><span class="line">            if( window.history &amp;&amp;　window.history.pushState )&#123;</span><br><span class="line">                // 压入历史记录状态</span><br><span class="line">                </span><br><span class="line">                history.pushState(&#123;page: 1&#125;, &quot;title 1&quot;, &quot;&quot;);</span><br><span class="line">               </span><br><span class="line">                // 只有使用pushState和replaceState才能监听popstate后退事件</span><br><span class="line">                </span><br><span class="line">                window.addEventListener(&quot;popstate&quot;, function () &#123;</span><br><span class="line">                   </span><br><span class="line">                    // 后退时把当前的历史状态改为你要跳转的页面，防止多次回退又回来的问题</span><br><span class="line">                    history.replaceState(&#123;page: 1&#125;, &quot;title 1&quot;, &quot;/home/index/index&quot;);</span><br><span class="line">                  </span><br><span class="line">                    // 这里就可以处理自己的事情了</span><br><span class="line">                    location.href = &quot;/home/index/index&quot;;</span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h4 id="当用户点击返回的时候作一些挽留操作"><a href="#当用户点击返回的时候作一些挽留操作" class="headerlink" title="当用户点击返回的时候作一些挽留操作"></a>当用户点击返回的时候作一些挽留操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//popstate自动触发的bug（目前暂时发现在iPhone6可以还原这个bug）</span><br><span class="line">(function() &#123;</span><br><span class="line">if(window.history.pushState)&#123;</span><br><span class="line">//初始时如果没有state，先加一个进去，防止popstate不触发</span><br><span class="line">if(!window.history.state)&#123;</span><br><span class="line">window.history.pushState(&apos;init&apos;, &apos;&apos;, &apos;&apos;);</span><br><span class="line">&#125;</span><br><span class="line">//为当前页面history压入一个state</span><br><span class="line">window.history.replaceState(&#123;hasState: true&#125;, &apos;&apos;, &apos;&apos;);</span><br><span class="line">console.log(&apos;push state over&apos;);</span><br><span class="line"></span><br><span class="line">window.addEventListener(&apos;load&apos;, function() &#123;     </span><br><span class="line">            setTimeout(function() &#123;    </span><br><span class="line">            </span><br><span class="line">               //监听页面的popstate事件。此事件一般在用户点击浏览器后退或前进按钮时触发。</span><br><span class="line">        window.addEventListener(&apos;popstate&apos;, function(e) &#123;</span><br><span class="line">        console.log(&apos;popstate trigger.&apos;);</span><br><span class="line">        //侦测是用户触发的操作, 处理自定义逻辑，弹窗或其他</span><br><span class="line">        alert(&apos;浏览器后退！&apos;);</span><br><span class="line">        &#125;, false);  </span><br><span class="line">        </span><br><span class="line">            &#125;, 0);   </span><br><span class="line">         &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><hr><h3 id="pajx-pushState-ajax-开始接近前端路由了"><a href="#pajx-pushState-ajax-开始接近前端路由了" class="headerlink" title="pajx(pushState + ajax) 开始接近前端路由了"></a>pajx(pushState + ajax) 开始接近前端路由了</h3><p><a href="http://demo.static.web.com/pjax.html" target="_blank" rel="noopener">http://demo.static.web.com/pjax.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;pjax&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;pjax page!&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">        &lt;ul id=&quot;nav-box&quot;&gt;</span><br><span class="line">            &lt;li data-index=&quot;part1.html&quot; class=&quot;todo&quot; class=&quot;active&quot;&gt;part1&lt;/li&gt;</span><br><span class="line">            &lt;li data-index=&quot;part2.html&quot;&gt;part2&lt;/li&gt;</span><br><span class="line">            &lt;li data-index=&quot;part3.html&quot;&gt;part3&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;section id=&quot;page-containter&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        (function() &#123;</span><br><span class="line"></span><br><span class="line">            var setContent = function(content) &#123;</span><br><span class="line">                var $container = document.getElementById(&apos;page-containter&apos;);</span><br><span class="line">                $container.innerHTML = content;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            var makeRequest = function makeRequest(options) &#123;</span><br><span class="line">                httpRequest = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">                if (!httpRequest) &#123;</span><br><span class="line">                    console.error(&apos;Giving up :( Cannot create an XMLHTTP instance&apos;);</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">                httpRequest.onreadystatechange = function() &#123;</span><br><span class="line">                    if (httpRequest.readyState === XMLHttpRequest.DONE) &#123;</span><br><span class="line">                        if (httpRequest.status === 200) &#123;</span><br><span class="line">                            options.cb(httpRequest.responseText);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            console.error(&apos;There was a problem with the request.&apos;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;;</span><br><span class="line">                httpRequest.open(&apos;GET&apos;, options.url || &apos;part1.html&apos;);</span><br><span class="line">                httpRequest.send();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //页面初始化</span><br><span class="line">            var init = function() &#123;</span><br><span class="line">                makeRequest(&#123;</span><br><span class="line">                    url: location.search.replace(&apos;?&apos;, &apos;&apos;) || &apos;part1.html&apos;,</span><br><span class="line">                    cb: function(res) &#123;</span><br><span class="line">                        setContent(res);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            init();</span><br><span class="line"></span><br><span class="line">            //导航事件</span><br><span class="line">            (function() &#123;</span><br><span class="line">                var $box = document.getElementById(&apos;nav-box&apos;);</span><br><span class="line">                $box.addEventListener(&apos;click&apos;, function clickCb(e) &#123;</span><br><span class="line">                    var urlIndex = e.target.getAttribute(&apos;data-index&apos;);</span><br><span class="line">                    makeRequest(&#123;</span><br><span class="line">                        url: urlIndex,</span><br><span class="line">                        cb: function(res) &#123;</span><br><span class="line">                            window.history.pushState(&#123;</span><br><span class="line">                                page: urlIndex</span><br><span class="line">                            &#125;, &apos;&apos;, &apos;?&apos; + urlIndex);</span><br><span class="line">                            setContent(res);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                &#125;, false);</span><br><span class="line">            &#125;)();</span><br><span class="line"></span><br><span class="line">            if (window.history.pushState) &#123;</span><br><span class="line"></span><br><span class="line">                //初始时如果没有state，先加一个进去，防止popstate不触发</span><br><span class="line">                if (!window.history.state) &#123;</span><br><span class="line">                    window.history.pushState(&#123;</span><br><span class="line">                        page: &apos;part1.html&apos;</span><br><span class="line">                    &#125;, &apos;&apos;, &apos;?part1.html&apos;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                window.addEventListener(&apos;load&apos;, function() &#123;</span><br><span class="line">                    setTimeout(function() &#123;</span><br><span class="line"></span><br><span class="line">                        //监听页面的popstate事件。此事件一般在用户点击浏览器后退或前进按钮时触发。</span><br><span class="line">                        window.addEventListener(&apos;popstate&apos;, function(e) &#123;</span><br><span class="line">                            e.state &amp;&amp; e.state.page &amp;&amp; makeRequest(&#123;</span><br><span class="line">                                url: e.state.page,</span><br><span class="line">                                cb: function(res) &#123;</span><br><span class="line">                                    setContent(res);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;, false);</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>减轻服务端压力</li></ul><p>按需请求，每次只需加载页面的部分内容，而不用重复加载一些公共的资源文件和不变的页面结构，大大减小了数据请求量，以减轻对服务器的带宽和性能压力，还大大提升了页面的加载速度。</p><ul><li>优化页面跳转体验</li></ul><p>常规页面跳转需要重新加载画面上的内容，会有明显的闪烁，而且往往和跳转前的页面没有连贯性，用户体验不是很好。如果再遇上页面比较庞大、网速又不是很好的情况，用户体验就更加雪上加霜了。使用pjax后，由于只刷新部分页面，切换效果更加流畅，而且可以定制过度动画，在等待页面加载的时候体验就比较舒服了。</p><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li><p>不支持一些低版本的浏览器(如IE系列)</p><p>  pjax使用了pushState来改变地址栏的url，这是html5中history的新特性，在某些旧版浏览器中可能不支持。不过pjax会进行判断，功能不适用的时候会执行默认的页面跳转操作。</p></li><li><p>使服务端处理变得复杂</p><p>  要做到普通请求返回完整页面，而pjax请求只返回部分页面，服务端就需要做一些特殊处理，当然这对于设计良好的后端框架来说，添加一些统一处理还是比较容易的，自然也没太大问题。另外，即使后台不做处理，设置pjax的fragment参数来达到同样的效果。</p></li></ul><p>综合来看，pajx的优点很强势，缺点也几乎可以忽略，还是非常值得推荐的，尤其是类似博客这种大部分情况下只有主体内容变化的网站。关键它使用简单、学习成本小，即时全站只有极个别页面能用得到，尝试下没什么损失。pjax的github主页介绍的已经很详细了，想了解更多可以看下源码。</p><h2 id="https-github-com-welefen-pjax"><a href="#https-github-com-welefen-pjax" class="headerlink" title="https://github.com/welefen/pjax"></a><a href="https://github.com/welefen/pjax" target="_blank" rel="noopener">https://github.com/welefen/pjax</a></h2><h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><h3 id="什么是前端路由"><a href="#什么是前端路由" class="headerlink" title="什么是前端路由"></a>什么是前端路由</h3><p>前端路由，拥有这样一种能力：客户端浏览器可以不依赖服务端，根据不同的URL渲染不同的视图页面。</p><h3 id="前端路由的存在合理性"><a href="#前端路由的存在合理性" class="headerlink" title="前端路由的存在合理性"></a>前端路由的存在合理性</h3><p>在Ajax之剑还未亮出，前端仍处于襁褓之中的时候，路由的工作交给了后端。在进行页面切换的时候，浏览器发送不同的url请求；服务器接收到浏览器的请求时，通过解析不同的url去拼接需要的html或者模板，然后将结果返回给浏览器端进行渲染。</p><p>服务器端路由也是不落俗套的有利亦有弊。它的好处是安全性更高，更严格得控制页面的展现。这在某些场景中是很有用的，譬如下单支付流程，每一步只有在上一步成功执行之后才能抵达。这在服务器端可以为每一步流程添加验证机制，只有验证通过才返回正确的页面。那么前端路由不能实现每一步的验证？自然不是，姑且相信你的代码可以写的很严谨，保证正常情况下流程不会错，但是另一个不得不面对的事实是：前端是毫无安全性可言的。用户可以肆意修改代码来进入不同的流程，你可能会为此添加不少的处理逻辑。相较之下，当然是后端控制页面的进入权限更为安全和简便。</p><p>另一方面，后端路由无疑增加了服务器端的负荷，并且需要reload页面，用户体验其实不佳。</p><p>这样，前端路由就有用武之地了。首先，它的出现无疑减轻了服务器端的压力。特别是对于一个比较复杂的应用来讲，或者更确切的说，对于拥有一个复杂路由系统的应用来说，服务器端需要为每一个不同的url执行一段处理逻辑在高并发的情况下实在有点不堪重负；其次，页面的切换可以不需要刷新整个页面了，没有网络延迟，没有闪烁刷新，提升了用户体验。</p><h3 id="前端路由实现方式"><a href="#前端路由实现方式" class="headerlink" title="前端路由实现方式"></a>前端路由实现方式</h3><ul><li>在页面不刷新的前提下实现url变化</li><li>捕捉到url的变化，以便执行页面替换逻辑</li></ul><h3 id="如何实现更新url并且页面不刷新"><a href="#如何实现更新url并且页面不刷新" class="headerlink" title="如何实现更新url并且页面不刷新"></a>如何实现更新url并且页面不刷新</h3><ol><li>利用url中的hash字段；</li><li>使用html5提供的history API。</li></ol><h3 id="如何跟踪url的变化："><a href="#如何跟踪url的变化：" class="headerlink" title="如何跟踪url的变化："></a>如何跟踪url的变化：</h3><ol><li>hash + window.onhashchange</li><li>history HTML5 api + window.onpopState</li></ol><h4 id="低版本不支持hashchange"><a href="#低版本不支持hashchange" class="headerlink" title="低版本不支持hashchange"></a>低版本不支持hashchange</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(function(window) &#123;</span><br><span class="line"></span><br><span class="line">  // 如果浏览器原生支持该事件,则退出  </span><br><span class="line">if ( &quot;onhashchange&quot; in window.document.body ) &#123; return; &#125;</span><br><span class="line"></span><br><span class="line">  var location = window.location,</span><br><span class="line">    oldURL = location.href,</span><br><span class="line">    oldHash = location.hash;</span><br><span class="line"></span><br><span class="line">  // 每隔100ms检测一下location.hash是否发生变化</span><br><span class="line">  setInterval(function() &#123;</span><br><span class="line">    var newURL = location.href,</span><br><span class="line">      newHash = location.hash;</span><br><span class="line"></span><br><span class="line">    // 如果hash发生了变化,且绑定了处理函数...</span><br><span class="line">    if ( newHash != oldHash &amp;&amp; typeof window.onhashchange === &quot;function&quot; ) &#123;</span><br><span class="line">      // execute the handler</span><br><span class="line">      window.onhashchange(&#123;</span><br><span class="line">        type: &quot;hashchange&quot;,</span><br><span class="line">        oldURL: oldURL,</span><br><span class="line">        newURL: newURL</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      oldURL = newURL;</span><br><span class="line">      oldHash = newHash;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, 100);</span><br><span class="line"></span><br><span class="line">&#125;)(window);</span><br></pre></td></tr></table></figure><h4 id="低版本不支持hisotry-HTML5-api"><a href="#低版本不支持hisotry-HTML5-api" class="headerlink" title="低版本不支持hisotry HTML5 api"></a>低版本不支持hisotry HTML5 api</h4><h2 id="https-github-com-browserstate-history-js"><a href="#https-github-com-browserstate-history-js" class="headerlink" title="https://github.com/browserstate/history.js/"></a><a href="https://github.com/browserstate/history.js/" target="_blank" rel="noopener">https://github.com/browserstate/history.js/</a></h2><h3 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h3><h4 id="Histories"><a href="#Histories" class="headerlink" title="Histories"></a>Histories</h4><p>React Router 是建立在 history 之上的。 简而言之，一个 history 知道如何去监听浏览器地址栏的变化， 并解析这个 URL 转化为 location 对象， 然后 router 使用它匹配到路由，最后正确地渲染对应的组件。</p><p>常用的 history 有三种形式， 但是你也可以使用 React Router 实现自定义的 history。</p><ul><li>browserHistory</li><li>hashHistory</li><li>createMemoryHistory<br>你可以从 React Router 中引入它们：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// JavaScript 模块导入（译者注：ES6 形式）</span><br><span class="line">import &#123; browserHistory &#125; from &apos;react-router&apos;</span><br></pre></td></tr></table></figure><p>然后将它们传递给<router>:</router></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">render(</span><br><span class="line">  &lt;Router history=&#123;browserHistory&#125; routes=&#123;routes&#125; /&gt;,</span><br><span class="line">  document.getElementById(&apos;app&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="browserHistory"><a href="#browserHistory" class="headerlink" title="browserHistory"></a>browserHistory</h5><p>Browser history 是使用 React Router 的应用推荐的 history。它使用浏览器中的 History API 用于处理 URL，创建一个像example.com/some/path这样真实的 URL 。</p><h5 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h5><p>服务器需要做好处理 URL 的准备。处理应用启动最初的 / 这样的请求应该没问题，但当用户来回跳转并在 /accounts/123 刷新时，服务器就会收到来自 /accounts/123 的请求，这时你需要处理这个 URL 并在响应中包含 JavaScript 应用代码。</p><p>一个 express 的应用可能看起来像这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;)</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const port = process.env.PORT || 8080</span><br><span class="line">const app = express()</span><br><span class="line"></span><br><span class="line">// 通常用于加载静态资源</span><br><span class="line">app.use(express.static(__dirname + &apos;/public&apos;))</span><br><span class="line"></span><br><span class="line">// 在你应用 JavaScript 文件中包含了一个 script 标签</span><br><span class="line">// 的 index.html 中处理任何一个 route</span><br><span class="line">app.get(&apos;*&apos;, function (request, response)&#123;</span><br><span class="line">  response.sendFile(path.resolve(__dirname, &apos;public&apos;, &apos;index.html&apos;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port)</span><br><span class="line">console.log(&quot;server started on port &quot; + port)</span><br></pre></td></tr></table></figure><p>如果你的服务器是 nginx，请使用 try_files 指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  ...</span><br><span class="line">  location / &#123;</span><br><span class="line">    try_files $uri /index.html</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当在服务器上找不到其他文件时，这可以让 nginx 服务器提供静态文件服务并指向index.html 文件。</p><p>对于Apache服务器也有类似的方式，创建一个.htaccess文件在你的文件根目录下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RewriteBase /</span><br><span class="line">RewriteRule ^index\.html$ - [L]</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteRule . /index.html [L]</span><br></pre></td></tr></table></figure><h5 id="IE8-IE9-支持情况"><a href="#IE8-IE9-支持情况" class="headerlink" title="IE8, IE9 支持情况"></a>IE8, IE9 支持情况</h5><p>如果我们能使用浏览器自带的 window.history API，那么我们的特性就可以被浏览器所检测到。如果不能，那么任何调用跳转的应用就会导致 全页面刷新，它允许在构建应用和更新浏览器时会有一个更好的用户体验，但仍然支持的是旧版的。</p><p>你可能会想为什么我们不后退到 hash history，问题是这些 URL 是不确定的。如果一个访客在 hash history 和 browser history 上共享一个 URL，然后他们也共享同一个后退功能，最后我们会以产生笛卡尔积数量级的、无限多的 URL 而崩溃。</p><h5 id="hashHistory"><a href="#hashHistory" class="headerlink" title="hashHistory"></a>hashHistory</h5><p>Hash history 使用 URL 中的 hash（#）部分去创建形如 example.com/#/some/path 的路由。</p><h5 id="我应该使用-createHashHistory吗？"><a href="#我应该使用-createHashHistory吗？" class="headerlink" title="我应该使用 createHashHistory吗？"></a>我应该使用 createHashHistory吗？</h5><p>Hash history不需要服务器任何配置就可以运行，如果你刚刚入门，那就使用它吧。但是我们不推荐在实际线上环境中用到它，因为每一个 web 应用都应该渴望使用 browserHistory。</p><h5 id="像这样-k-ckuvup-没用的在-URL-中是什么？"><a href="#像这样-k-ckuvup-没用的在-URL-中是什么？" class="headerlink" title="像这样 ?_k=ckuvup 没用的在 URL 中是什么？"></a>像这样 ?_k=ckuvup 没用的在 URL 中是什么？</h5><p>当一个 history 通过应用程序的 push 或 replace 跳转时，它可以在新的 location 中存储 “location state” 而不显示在 URL 中，这就像是在一个 HTML 中 post 的表单数据。</p><p>在 DOM API 中，这些 hash history 通过 window.location.hash = newHash 很简单地被用于跳转，且不用存储它们的location state。但我们想全部的 history 都能够使用location state，因此我们要为每一个 location 创建一个唯一的 key，并把它们的状态存储在 session storage 中。当访客点击“后退”和“前进”时，我们就会有一个机制去恢复这些 location state。</p><h5 id="createMemoryHistory"><a href="#createMemoryHistory" class="headerlink" title="createMemoryHistory"></a>createMemoryHistory</h5><p>Memory history不会在地址栏被操作或读取。这就解释了我们是如何实现服务器渲染的。同时它也非常适合测试和其他的渲染环境（像 React Native ）。</p><p>和另外两种history的一点不同是你必须创建它，这种方式便于测试。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const history = createMemoryHistory(location)</span><br></pre></td></tr></table></figure><p>实现示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">import &#123; render &#125; from &apos;react-dom&apos;</span><br><span class="line">import &#123; browserHistory, Router, Route, IndexRoute &#125; from &apos;react-router&apos;</span><br><span class="line"></span><br><span class="line">import App from &apos;../components/App&apos;</span><br><span class="line">import Home from &apos;../components/Home&apos;</span><br><span class="line">import About from &apos;../components/About&apos;</span><br><span class="line">import Features from &apos;../components/Features&apos;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Router history=&#123;browserHistory&#125;&gt;</span><br><span class="line">    &lt;Route path=&apos;/&apos; component=&#123;App&#125;&gt;</span><br><span class="line">      &lt;IndexRoute component=&#123;Home&#125; /&gt;</span><br><span class="line">      &lt;Route path=&apos;about&apos; component=&#123;About&#125; /&gt;</span><br><span class="line">      &lt;Route path=&apos;features&apos; component=&#123;Features&#125; /&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">  &lt;/Router&gt;,</span><br><span class="line">  document.getElementById(&apos;app&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><h4 id="HTML5-History-模式"><a href="#HTML5-History-模式" class="headerlink" title="HTML5 History 模式"></a>HTML5 History 模式</h4><p>vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p><p>如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  mode: &apos;history&apos;,</span><br><span class="line">  routes: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当你使用 history 模式时，URL 就像正常的 url，例如 <a href="http://yoursite.com/user/id，也好看！" target="_blank" rel="noopener">http://yoursite.com/user/id，也好看！</a></p><p>不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问 <a href="http://oursite.com/user/id" target="_blank" rel="noopener">http://oursite.com/user/id</a> 就会返回 404，这就不好看了。</p><p>所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。</p><h4 id="后端配置例子"><a href="#后端配置例子" class="headerlink" title="后端配置例子"></a>后端配置例子</h4><h5 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  RewriteEngine On</span><br><span class="line">  RewriteBase /</span><br><span class="line">  RewriteRule ^index\.html$ - [L]</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteRule . /index.html [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><h5 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  try_files $uri $uri/ /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="原生-Node-js"><a href="#原生-Node-js" class="headerlink" title="原生 Node.js"></a>原生 Node.js</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;)</span><br><span class="line">const fs = require(&apos;fs&apos;)</span><br><span class="line">const httpPort = 80</span><br><span class="line"></span><br><span class="line">http.createServer((req, res) =&gt; &#123;</span><br><span class="line">  fs.readFile(&apos;index.htm&apos;, &apos;utf-8&apos;, (err, content) =&gt; &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      console.log(&apos;We cannot open &apos;index.htm&apos; file.&apos;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.writeHead(200, &#123;</span><br><span class="line">      &apos;Content-Type&apos;: &apos;text/html; charset=utf-8&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    res.end(content)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).listen(httpPort, () =&gt; &#123;</span><br><span class="line">  console.log(&apos;Server listening on: http://localhost:%s&apos;, httpPort)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="基于-Node-js-的-Express"><a href="#基于-Node-js-的-Express" class="headerlink" title="基于 Node.js 的 Express"></a>基于 Node.js 的 Express</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于 Node.js/Express，请考虑使用 connect-history-api-fallback 中间件。</span><br></pre></td></tr></table></figure><h4 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h4><p>给个警告，因为这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件。为了避免这种情况，你应该在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  mode: &apos;history&apos;,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &apos;*&apos;, component: NotFoundComponent &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>或者，如果你使用 Node.js 服务器，你可以用服务端路由匹配到来的 URL，并在没有匹配到路由的时候返回 404，以实现回退。更多详情请查阅 Vue 服务端渲染文档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何定义路由（router）&quot;&gt;&lt;a href=&quot;#如何定义路由（router）&quot; class=&quot;headerlink&quot; title=&quot;如何定义路由（router）&quot;&gt;&lt;/a&gt;如何定义路由（router）&lt;/h3&gt;&lt;h4 id=&quot;电讯网络设备路由器（router）
      
    
    </summary>
    
    
  </entry>
  
</feed>
